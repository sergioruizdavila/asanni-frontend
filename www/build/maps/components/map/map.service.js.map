{"version":3,"sources":["components/map/map.service.ts"],"names":[],"mappings":"AAOA,IAAO,UAAU,CA2GhB;AA3GD,WAAO,UAAU;IAAC,IAAA,GAAG,CA2GpB;IA3GiB,WAAA,KAAG,EAAC,CAAC;QAEnB,YAAY,CAAC;QAmBb;YAkBI;YAAe,CAAC;YAMhB,gCAAW,GAAX,UAAY,GAAoB,EAAE,cAAyB;gBAEvD,IAAI,kBAAkB,GAAG,SAAS,CAAC;gBACnC,IAAI,oBAAoB,GAAG,GAAG,CAAC;gBAC/B,IAAI,mBAAmB,GAAG,CAAC,CAAC;gBAC5B,IAAI,gBAAgB,GAAG,SAAS,CAAC;gBACjC,IAAI,kBAAkB,GAAG,IAAI,CAAC;gBAC9B,IAAI,aAAa,GAAG,GAAG,CAAC;gBAGxB,IAAI,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAE;oBACjC,WAAW,EAAE,kBAAkB;oBAC/B,aAAa,EAAE,oBAAoB;oBACnC,YAAY,EAAE,mBAAmB;oBACjC,SAAS,EAAE,gBAAgB;oBAC3B,WAAW,EAAE,kBAAkB;oBAC/B,GAAG,EAAE,GAAG;oBACR,MAAM,EAAE,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,EAAE,cAAc,CAAC,GAAG,CAAC;oBACtE,MAAM,EAAE,aAAa;iBACxB,CAAC,CAAC;gBAEH,MAAM,CAAC,MAAM,CAAC;YAClB,CAAC;YAID,iCAAY,GAAZ,UAAa,IAAY;gBAErB,IAAM,SAAS,GAAG,gBAAgB,CAAC;gBACnC,IAAM,KAAK,GAAG,sBAAsB,CAAC;gBACrC,IAAM,UAAU,GAAG,wBAAwB,CAAC;gBAC5C,IAAM,IAAI,GAAG,qBAAqB,CAAC;gBACnC,IAAM,SAAS,GAAG,uBAAuB,CAAC;gBAE1C,IAAI,YAAY,GAAG,EAAC,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAC,CAAC;gBAE3C,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBACX,KAAK,OAAO;wBACR,YAAY,CAAC,MAAM,GAAG,SAAS,GAAG,KAAK,CAAC;wBACxC,YAAY,CAAC,KAAK,GAAG,SAAS,GAAG,UAAU,CAAC;wBAChD,KAAK,CAAC;oBACN,KAAK,MAAM;wBACP,YAAY,CAAC,MAAM,GAAG,SAAS,GAAG,IAAI,CAAC;wBACvC,YAAY,CAAC,KAAK,GAAG,SAAS,GAAG,SAAS,CAAC;wBAC/C,KAAK,CAAC;oBACN;wBACI,YAAY,CAAC,MAAM,GAAG,SAAS,GAAG,KAAK,CAAC;wBACxC,YAAY,CAAC,KAAK,GAAG,SAAS,GAAG,UAAU,CAAC;wBAChD,KAAK,CAAC;gBACV,CAAC;gBAED,MAAM,CAAC,YAAY,CAAC;YACxB,CAAC;YA1EM,oBAAS,GAAG,mCAAmC,CAAC;YAUhD,kBAAO,GAAG,EAAE,CAAC;YAmExB,iBAAC;QAAD,CA/EA,AA+EC,IAAA;QA/EY,gBAAU,aA+EtB,CAAA;QAGD,OAAO;aACF,MAAM,CAAC,wBAAwB,CAAC;aAChC,OAAO,CAAC,UAAU,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;IAEnD,CAAC,EA3GiB,GAAG,GAAH,cAAG,KAAH,cAAG,QA2GpB;AAAD,CAAC,EA3GM,UAAU,KAAV,UAAU,QA2GhB","file":"../../../www/components/map/map.service.js","sourcesContent":["/**\n * MapService\n * @description - Services related on Student Landing Page Model.\n * @constructor\n * @param {app.core.restApi.IRestApi} restApi - instance rest Api service.\n */\n\nmodule components.map {\n\n    'use strict';\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    export interface IMapService {\n        buildCircle:(map: google.maps.Map, circlePosition: IPosition) => google.maps.Circle;\n        selectMarker:(type: string) => IMarkerStatus;\n    }\n\n    export interface IMarkerStatus {\n        normal: string;\n        hover: string;\n    }\n\n\n    /****************************************/\n    /*           CLASS DEFINITION           */\n    /****************************************/\n    export class MapService implements IMapService {\n\n        static serviceId = 'mainApp.components.map.MapService';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n\n        // --------------------------------\n\n\n        /*-- INJECT DEPENDENCIES --*/\n        static $inject = [];\n\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor() {}\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n        buildCircle(map: google.maps.Map, circlePosition: IPosition): google.maps.Circle {\n            //VARIABLES\n            let circle_strokeColor = '#ff5a5f';\n            let circle_strokeOpacity = 0.8;\n            let circle_strokeWeight = 2;\n            let circle_fillColor = '#ff5a5f';\n            let circle_fillOpacity = 0.35;\n            let circle_radius = 140;\n\n            //Init Circle\n            let circle = new google.maps.Circle ({\n                strokeColor: circle_strokeColor,\n                strokeOpacity: circle_strokeOpacity,\n                strokeWeight: circle_strokeWeight,\n                fillColor: circle_fillColor,\n                fillOpacity: circle_fillOpacity,\n                map: map,\n                center: new google.maps.LatLng(circlePosition.lat, circlePosition.lng),\n                radius: circle_radius\n            });\n\n            return circle;\n        }\n\n\n\n        selectMarker(type: string): IMarkerStatus {\n            //CONSTANTS\n            const imagePath = 'assets/images/';\n            const round = 'round-red-marker.png';\n            const roundHover = 'round-green-marker.png';\n            const long = 'long-red-marker.png';\n            const longHover = 'long-green-marker.png';\n\n            let markerStatus = {normal: '', hover: ''};\n\n            switch (type) {\n                case 'round':\n                    markerStatus.normal = imagePath + round;\n                    markerStatus.hover = imagePath + roundHover;\n                break;\n                case 'long':\n                    markerStatus.normal = imagePath + long;\n                    markerStatus.hover = imagePath + longHover;\n                break;\n                default:\n                    markerStatus.normal = imagePath + round;\n                    markerStatus.hover = imagePath + roundHover;\n                break;\n            }\n\n            return markerStatus;\n        }\n\n\n    }\n\n    /*-- MODULE DEFINITION --*/\n    angular\n        .module('mainApp.components.map')\n        .service(MapService.serviceId, MapService);\n\n}\n"]}