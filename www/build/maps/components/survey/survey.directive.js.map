{"version":3,"sources":["components/survey/survey.directive.ts"],"names":[],"mappings":"AAMA,IAAO,UAAU,CAmKhB;AAnKD,WAAO,UAAU;IAAC,IAAA,MAAM,CAmKvB;IAnKiB,WAAA,MAAM,EAAC,CAAC;QACtB,YAAY,CAAC;QAYb;YA0BI;gBAnBA,qBAAgB,GAAY,IAAI,CAAC;gBACjC,eAAU,GAAG,gBAAgB,CAAC,YAAY,CAAC;gBAC3C,iBAAY,GAAW,IAAI,CAAC;gBAC5B,aAAQ,GAAW,GAAG,CAAC;gBACvB,UAAK,GAAG;oBACJ,WAAW,EAAE,GAAG;oBAChB,IAAI,EAAE,GAAG;oBACT,SAAS,EAAE,GAAG;oBACd,UAAU,EAAE,GAAG;iBAClB,CAAC;gBACF,gBAAW,GAAW,+BAA+B,CAAC;gBAUlD,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;YAC3D,CAAC;YAED,uBAAI,GAAJ,UAAK,MAAsB,EAAE,GAAY,EAAE,IAAyB;gBAChE,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;YACnD,CAAC;YAGM,iBAAQ,GAAf;gBACI,MAAM,CAAC,IAAI,QAAQ,EAAE,CAAC;YAC1B,CAAC;YAnCM,oBAAW,GAAG,UAAU,CAAC;YAoCpC,eAAC;QAAD,CAtCA,AAsCC,IAAA;QAGD,OAAO;aACF,MAAM,CAAC,2BAA2B,CAAC;aACnC,SAAS,CAAC,QAAQ,CAAC,WAAW,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAqBxD;YAyBI,0BACY,OAA+B,EAC/B,SAAwC,EACxC,UAAuB;gBAFvB,YAAO,GAAP,OAAO,CAAwB;gBAC/B,cAAS,GAAT,SAAS,CAA+B;gBACxC,eAAU,GAAV,UAAU,CAAa;gBAC/B,IAAI,CAAC,IAAI,EAAE,CAAC;YAChB,CAAC;YAIO,+BAAI,GAAZ;gBACI,IAAI,CAAC,QAAQ,EAAE,CAAC;YACpB,CAAC;YAGD,mCAAQ,GAAR;gBAEI,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;YAEtD,CAAC;YAeO,2CAAgB,GAAxB;gBAEI,IAAM,cAAc,GAAG,wBAAwB,CAAC;gBAEhD,IAAI,IAAI,GAAG,IAAI,CAAC;gBAEhB,IAAI,OAAO,GAAmC;oBAC1C,SAAS,EAAE,KAAK;oBAChB,QAAQ,EAAE,QAAQ;oBAClB,QAAQ,EAAE,IAAI;oBACd,IAAI,EAAC,IAAI;oBACT,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,eAAe;oBAC5C,UAAU,EAAE,sDAAsD;iBACrE,CAAC;gBAEF,IAAI,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAEjD,QAAQ,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YACnC,CAAC;YA1EM,6BAAY,GAAG,4CAA4C,CAAC;YAe5D,wBAAO,GAAG,CAAC,SAAS;gBACT,WAAW;gBACX,YAAY,CAAC,CAAC;YA6DpC,uBAAC;QAAD,CAhFA,AAgFC,IAAA;QAhFY,uBAAgB,mBAgF5B,CAAA;QAGD,OAAO,CAAC,MAAM,CAAC,2BAA2B,CAAC;aACtC,UAAU,CAAC,gBAAgB,CAAC,YAAY,EAAE,gBAAgB,CAAC,CAAC;IAErE,CAAC,EAnKiB,MAAM,GAAN,iBAAM,KAAN,iBAAM,QAmKvB;AAAD,CAAC,EAnKM,UAAU,KAAV,UAAU,QAmKhB","file":"../../../www/components/survey/survey.directive.js","sourcesContent":["/**\n* MaSurvey\n* @description - MainApp Survey Directive\n* @example - <ma-survey></ma-survey>\n*/\n\nmodule components.survey {\n    'use strict';\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    export interface ISurvey extends angular.IDirective {\n\n    }\n\n    /****************************************/\n    /*           CLASS DEFINITION           */\n    /****************************************/\n    class MaSurvey implements ISurvey {\n\n        static directiveId = 'maSurvey';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        bindToController: Boolean = true;\n        controller = SurveyController.controllerId;\n        controllerAs: string = 'vm';\n        restrict: string = 'E';\n        scope = {\n            surveyValue: '=',\n            size: '@',\n            showLabel: '=',\n            showBorder: '='\n        };\n        templateUrl: string = 'components/survey/survey.html';\n        // --------------------------------\n\n        /*-- INJECT DEPENDENCIES --*/\n        //static $inject = ['dataConfig'];\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor() {\n            DEBUG && console.log('maSurvey directive constructor');\n        }\n\n        link($scope: angular.IScope, elm: Element, attr: angular.IAttributes): void {\n            DEBUG && console.log('maSurvey link function');\n        }\n\n        /*-- INSTANCE FUNCTION --*/\n        static instance(): ISurvey {\n            return new MaSurvey();\n        }\n    }\n\n    /*-- MODULE DEFINITION --*/\n    angular\n        .module('mainApp.components.survey')\n        .directive(MaSurvey.directiveId, MaSurvey.instance);\n\n\n    /*********************************************************/\n    /*                     CONTROLLER                        */\n    /*********************************************************/\n    /**\n    * SurveyController\n    * @description - Survey Controller\n    */\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    interface ISurveyController {\n        activate: () => void;\n    }\n\n    /****************************************/\n    /*           CLASS DEFINITION           */\n    /****************************************/\n    export class SurveyController implements ISurveyController {\n\n        static controllerId = 'mainApp.components.survey.SurveyController';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        CIRCLES_AMOUNT: number;\n        surveyValue: number;\n        size: string;\n        showLabel: boolean;\n        showBorder: boolean;\n        private _title: string;\n        // --------------------------------\n\n\n        /*-- INJECT DEPENDENCIES --*/\n        static $inject = ['$filter',\n                          '$uibModal',\n                          'dataConfig'];\n\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(\n            private $filter: angular.IFilterService,\n            private $uibModal: ng.ui.bootstrap.IModalService,\n            private dataConfig: IDataConfig) {\n            this.init();\n        }\n\n\n        /*-- INITIALIZE METHOD --*/\n        private init() {\n            this.activate();\n        }\n\n        /*-- ACTIVATE METHOD --*/\n        activate(): void {\n            //LOG\n            DEBUG && console.log('survey controller actived');\n\n        }\n\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n\n        /**\n        * _openSurveyModal\n        * @description - open Modal in order to fill a new features survey\n        * @use - this._openSurveyModal();\n        * @function\n        * @return {void}\n        */\n        private _openSurveyModal(): void {\n            //CONSTANTS\n            const CLICK_MIXPANEL = 'Click on Survey Button';\n            //VARIABLES\n            let self = this;\n            // modal default options\n            let options: ng.ui.bootstrap.IModalSettings = {\n                animation: false,\n                backdrop: 'static',\n                keyboard: true,\n                size:'sm',\n                templateUrl: this.dataConfig.modalSurveyTmpl,\n                controller: 'mainApp.components.modal.ModalSurveyController as vm'\n            };\n\n            var modalInstance = this.$uibModal.open(options);\n\n            mixpanel.track(CLICK_MIXPANEL);\n        }\n\n\n\n    }\n\n    /*-- MODULE DEFINITION --*/\n    angular.module('mainApp.components.survey')\n        .controller(SurveyController.controllerId, SurveyController);\n\n}\n"]}