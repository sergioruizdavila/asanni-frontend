{"version":3,"sources":["components/meter/meter.directive.ts"],"names":[],"mappings":"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","file":"../../../www/components/meter/meter.directive.js","sourcesContent":["/**\n* MaMeter\n* @description - MainApp Meter Directive\n* @example - <ma-meter></ma-meter>\n*/\n\nmodule components.meter {\n    'use strict';\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    export interface IMeter extends angular.IDirective {\n\n    }\n\n    /****************************************/\n    /*           CLASS DEFINITION           */\n    /****************************************/\n    class MaMeter implements IMeter {\n\n        static directiveId = 'maMeter';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        bindToController: Boolean = true;\n        controller = MeterController.controllerId;\n        controllerAs: string = 'vm';\n        restrict: string = 'E';\n        scope = {\n            meterValue: '=',\n            size: '@'\n        };\n        templateUrl: string = 'components/meter/meter.html';\n        // --------------------------------\n\n        /*-- INJECT DEPENDENCIES --*/\n        //static $inject = ['dataConfig'];\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor() {\n            console.log('maMeter directive constructor');\n        }\n\n        link($scope: angular.IScope, elm: Element, attr: angular.IAttributes): void {\n            console.log('maMeter link function');\n        }\n\n        /*-- INSTANCE FUNCTION --*/\n        static instance(): IMeter {\n            return new MaMeter();\n        }\n    }\n\n    /*-- MODULE DEFINITION --*/\n    angular\n        .module('mainApp.components.meter')\n        .directive(MaMeter.directiveId, MaMeter.instance);\n\n\n    /*********************************************************/\n    /*                     CONTROLLER                        */\n    /*********************************************************/\n    /**\n    * MeterController\n    * @description - Meter Controller\n    */\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    interface IMeterController {\n        activate: () => void;\n    }\n\n    /****************************************/\n    /*           CLASS DEFINITION           */\n    /****************************************/\n    export class MeterController implements IMeterController {\n\n        static controllerId = 'mainApp.components.meter.MeterController';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        CIRCLES_AMOUNT: number;\n        meterValue: number;\n        size: string;\n        private _title: string;\n        // --------------------------------\n\n\n        /*-- INJECT DEPENDENCIES --*/\n        static $inject = ['$filter'];\n\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(private $filter: angular.IFilterService) {\n            this.init();\n        }\n\n\n        /*-- INITIALIZE METHOD --*/\n        private init() {\n            //CONSTANTS\n            this.CIRCLES_AMOUNT = 5;\n\n            // init label title\n            this._assignTitle();\n\n            this.activate();\n        }\n\n        /*-- ACTIVATE METHOD --*/\n        activate(): void {\n            //LOG\n            console.log('meter controller actived');\n\n        }\n\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n\n        /**\n        * _assignMeterClass\n        * @description - this method assign the specific class to meter block\n        * (e.g. size class and rating class)\n        * @use - this._assignMeterClass();\n        * @function\n        * @return {string} - meter style classes\n        */\n\n        private _assignMeterClass(): string {\n            let ratingClass = 'ma-meter--rating-' + this.meterValue;\n            let meterClass = 'ma-meter--' + this.size;\n\n            return ratingClass + ' ' + meterClass;\n        }\n\n\n\n        /**\n        * _assignTitle\n        * @description - this method assign the specific title (bad, good, great, etc)\n        * to meter component\n        * @use - this._assignTitle();\n        * @function\n        * @return {void}\n        */\n\n        private _assignTitle(): void {\n            \n            //CONSTANTS\n            const BAD_TEXT = this.$filter('translate')('%global.rating.bad.label.text');\n            const REGULAR_TEXT = this.$filter('translate')('%global.rating.regular.label.text');\n            const OKAY_TEXT = this.$filter('translate')('%global.rating.okay.label.text');\n            const GOOD_TEXT = this.$filter('translate')('%global.rating.good.label.text');\n            const GREAT_TEXT = this.$filter('translate')('%global.rating.great.label.text');\n\n            let title = '';\n\n            switch (this.meterValue) {\n                case 1:\n                    title = BAD_TEXT;\n                break;\n                case 2:\n                    title = REGULAR_TEXT;\n                break;\n                case 3:\n                    title = OKAY_TEXT;\n                break;\n                case 4:\n                    title = GOOD_TEXT;\n                break;\n                case 5:\n                    title = GREAT_TEXT;\n                break;\n                default:\n                    title = GOOD_TEXT;\n                break;\n            }\n\n            this._title = title;\n        }\n\n\n\n        /**\n        * _assignCircleClass\n        * @description - this method assign the specific class to each circle\n        * @use - this._assignCircleClass();\n        * @function\n        * @return {string} circle style class\n        */\n\n        private _assignCircleClass(): string {\n            return 'circle--' + this.size;\n        }\n\n\n    }\n\n    /*-- MODULE DEFINITION --*/\n    angular.module('mainApp.components.meter')\n        .controller(MeterController.controllerId, MeterController);\n\n}\n"]}