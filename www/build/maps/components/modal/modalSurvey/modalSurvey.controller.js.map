{"version":3,"sources":["components/modal/modalSurvey/modalSurvey.controller.ts"],"names":[],"mappings":"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","file":"../../../../www/components/modal/modalSurvey/modalSurvey.controller.js","sourcesContent":["/**\n * ModalSurveyController\n * @description - modal Forgot Password controller definition, generic modal\n * in order to show user forgotPassword form\n * @constructor\n * @param {ng.ui.bootstrap.IModalServiceInstance} $uibModalInstance - modal boostrap instance\n */\n\nmodule components.modal.modalSurvey {\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    interface IModalSurveyController {\n        close: () => void;\n        activate: () => void;\n    }\n\n    interface IModalSurveyScope extends ng.IScope {\n\n    }\n\n    interface IModalSurveyForm {\n        option: string;\n    }\n\n\n    class ModalSurveyController implements IModalSurveyController {\n\n        static controllerId = 'mainApp.components.modal.ModalSurveyController';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        form: IModalSurveyForm;\n        loading: boolean;\n        success: boolean;\n        optionsList: any;\n        // --------------------------------\n\n        /*-- INJECT DEPENDENCIES --*/\n        static $inject = [\n            '$rootScope',\n            '$filter',\n            '$uibModalInstance',\n            'dataConfig',\n            'mainApp.models.feature.FeatureService',\n            'mainApp.models.feedback.FeedbackService',\n            'mainApp.core.util.messageUtilService'\n        ];\n\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(\n            private $rootScope: app.core.interfaces.IMainAppRootScope,\n            private $filter: angular.IFilterService,\n            private $uibModalInstance: ng.ui.bootstrap.IModalServiceInstance,\n            private dataConfig: IDataConfig,\n            private FeatureService: app.models.feature.IFeatureService,\n            private FeedbackService: app.models.feedback.IFeedbackService,\n            private messageUtil: app.core.util.messageUtil.IMessageUtilService) {\n\n            this._init();\n\n        }\n\n        /*-- INITIALIZE METHOD --*/\n        private _init() {\n            //VARIABLES\n            let self = this;\n\n            // Init loading\n            this.loading = true;\n\n            // Init success message\n            this.success = false;\n\n            // Init options List\n            this.optionsList = [];\n\n            //Init form\n            this.form = {\n                option: ''\n            };\n\n            this.activate();\n        }\n\n        //active function to handle all controller logic\n        activate(): void {\n            //CONSTANTS\n            const CLICK_MIXPANEL = 'Click: Open Survey Modal';\n            //VARIABLES\n            let self = this;\n            //LOG\n            DEBUG && console.log('modalSurvey controller actived');\n            //MIXPANEL\n            mixpanel.track(CLICK_MIXPANEL);\n\n            // Get Features by Range\n            this.FeatureService.getFeaturesByRange(this.dataConfig.featureMinId).then(\n                function(response: app.models.teacher.ITeacherQueryObject) {\n                    self.optionsList = response.results;\n                    self.loading = false;\n                }\n            );\n\n        }\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n\n        /**\n        * saveOption\n        * @description - when user click select one survey option, send this one\n        * to FeatureService in order to save it on database\n        * @use - this.saveOption(option);\n        * @function\n        * @return {void}\n        */\n\n        saveOption(option): void {\n            //CONSTANTS\n            const CLICK_MIXPANEL = 'Click: Selected feature option ' + option.id;\n            //VARIABLES\n            let self = this;\n            let feedback = new app.models.feedback.Feedback();\n            feedback.NextFeature = option.id;\n\n            this.loading = true;\n\n            this.FeedbackService.createFeedback(feedback).then(\n                function(response) {\n                    if(response.id) {\n                        //Show success message\n                        self.success = true;\n                        self.loading = false;\n                    }\n                },\n                function(error) {\n                    //Show error\n                    self.messageUtil.error('');\n                }\n            );\n        }\n\n\n        /**\n        * close\n        * @description - when user click \"X\" button, close the modal\n        * @use - this.close();\n        * @function\n        * @return {void}\n        */\n\n        close(): void {\n            this.$uibModalInstance.close();\n        }\n\n\n    }\n\n    angular.module('mainApp.components.modal')\n        .controller(ModalSurveyController.controllerId,\n                    ModalSurveyController);\n\n}\n"]}