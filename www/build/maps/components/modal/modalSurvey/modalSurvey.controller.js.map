{"version":3,"sources":["components/modal/modalSurvey/modalSurvey.controller.ts"],"names":[],"mappings":"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","file":"../../../../www/components/modal/modalSurvey/modalSurvey.controller.js","sourcesContent":["/**\r\n * ModalSurveyController\r\n * @description - modal Forgot Password controller definition, generic modal\r\n * in order to show user forgotPassword form\r\n * @constructor\r\n * @param {ng.ui.bootstrap.IModalServiceInstance} $uibModalInstance - modal boostrap instance\r\n */\r\n\r\nmodule components.modal.modalSurvey {\r\n\r\n    /**********************************/\r\n    /*           INTERFACES           */\r\n    /**********************************/\r\n    interface IModalSurveyController {\r\n        close: () => void;\r\n        validate: IModalSurveyValidate;\r\n        activate: () => void;\r\n    }\r\n\r\n    interface IModalSurveyValidate {\r\n        other: app.core.util.functionsUtil.IValid;\r\n    }\r\n\r\n\r\n    class ModalSurveyController implements IModalSurveyController {\r\n\r\n        static controllerId = 'mainApp.components.modal.ModalSurveyController';\r\n\r\n        /**********************************/\r\n        /*           PROPERTIES           */\r\n        /**********************************/\r\n        loading: boolean;\r\n        success: boolean;\r\n        optionsList: any;\r\n        addActive: boolean;\r\n        other: string;\r\n        validate: IModalSurveyValidate;\r\n        // --------------------------------\r\n\r\n        /*-- INJECT DEPENDENCIES --*/\r\n        static $inject = [\r\n            '$rootScope',\r\n            '$filter',\r\n            '$uibModalInstance',\r\n            'dataConfig',\r\n            'mainApp.models.feature.FeatureService',\r\n            'mainApp.models.feedback.FeedbackService',\r\n            'mainApp.core.util.FunctionsUtilService',\r\n            'mainApp.core.util.messageUtilService'\r\n        ];\r\n\r\n\r\n        /**********************************/\r\n        /*           CONSTRUCTOR          */\r\n        /**********************************/\r\n        constructor(\r\n            private $rootScope: app.core.interfaces.IMainAppRootScope,\r\n            private $filter: angular.IFilterService,\r\n            private $uibModalInstance: ng.ui.bootstrap.IModalServiceInstance,\r\n            private dataConfig: IDataConfig,\r\n            private FeatureService: app.models.feature.IFeatureService,\r\n            private FeedbackService: app.models.feedback.IFeedbackService,\r\n            private functionsUtil: app.core.util.functionsUtil.IFunctionsUtilService,\r\n            private messageUtil: app.core.util.messageUtil.IMessageUtilService) {\r\n\r\n            this._init();\r\n\r\n        }\r\n\r\n        /*-- INITIALIZE METHOD --*/\r\n        private _init() {\r\n            //VARIABLES\r\n            let self = this;\r\n\r\n            // Init loading\r\n            this.loading = true;\r\n\r\n            // Init success message\r\n            this.success = false;\r\n\r\n            // Init options List\r\n            this.optionsList = [];\r\n\r\n            // Init Add option active\r\n            this.addActive = false;\r\n\r\n            // Init 'other feature' field\r\n            this.other = '';\r\n\r\n            // Build validate object fields\r\n            this.validate = {\r\n                other: {valid: true, message: ''}\r\n            };\r\n\r\n            this.activate();\r\n        }\r\n\r\n        //active function to handle all controller logic\r\n        activate(): void {\r\n            //CONSTANTS\r\n            const CLICK_MIXPANEL = 'Click: Open Survey Modal';\r\n            //VARIABLES\r\n            let self = this;\r\n            //LOG\r\n            DEBUG && console.log('modalSurvey controller actived');\r\n            //MIXPANEL\r\n            mixpanel.track(CLICK_MIXPANEL);\r\n\r\n            // Get Features by Range\r\n            this.FeatureService.getFeaturesByRange(this.dataConfig.featureMinId).then(\r\n                function(response: app.models.teacher.ITeacherQueryObject) {\r\n                    self.optionsList = response.results;\r\n                    self.loading = false;\r\n                }\r\n            );\r\n\r\n        }\r\n\r\n        /**********************************/\r\n        /*            METHODS             */\r\n        /**********************************/\r\n\r\n\r\n        /**\r\n        * _validateForm\r\n        * @description - Validate each field on form\r\n        * @use - this._validateForm();\r\n        * @function\r\n        * @return {boolean} formValid - return If the complete form is valid or not.\r\n        */\r\n        private _validateForm(): boolean {\r\n            //CONSTANTS\r\n            const NULL_ENUM = app.core.util.functionsUtil.Validation.Null;\r\n            const EMPTY_ENUM = app.core.util.functionsUtil.Validation.Empty;\r\n            /***************************************************/\r\n            //VARIABLES\r\n            let formValid = true;\r\n\r\n            //Validate 'Other Feature' fields\r\n            let other_rules = [NULL_ENUM, EMPTY_ENUM];\r\n            this.validate.other = this.functionsUtil.validator(this.other, other_rules);\r\n            if(!this.validate.other.valid) {\r\n                formValid = this.validate.other.valid;\r\n            }\r\n\r\n            return formValid;\r\n        }\r\n\r\n\r\n\r\n        /**\r\n        * saveOption\r\n        * @description - when user click select one survey option, send this one\r\n        * to FeatureService in order to save it on database\r\n        * @use - this.saveOption(option);\r\n        * @function\r\n        * @param {string} option - option selected or added\r\n        * @param {boolean} isOther - If is a new option added by the user\r\n        * @return {void}\r\n        */\r\n\r\n        saveOption(option: string, isOther: boolean = false): void {\r\n            //CONSTANTS\r\n            let click_mixpanel = '';\r\n\r\n            //VARIABLES\r\n            let self = this;\r\n            let feedback = new app.models.feedback.Feedback();\r\n            let formValid = true;\r\n\r\n            // Validate if is a selected option or a added option\r\n            if(isOther) {\r\n                click_mixpanel = 'Click: Added new feature option: ' + option;\r\n                //Validate data form\r\n                formValid = this._validateForm();\r\n                feedback.NextOtherFeature = option;\r\n            } else {\r\n                click_mixpanel = 'Click: Selected feature option: ' + option;\r\n                feedback.NextFeature = parseInt(option);\r\n            }\r\n\r\n            if (!formValid) { return; }\r\n\r\n            // show loading\r\n            this.loading = true;\r\n\r\n            // Save new feedback on DB\r\n            this.FeedbackService.createFeedback(feedback).then(\r\n                function(response) {\r\n                    if(response.id) {\r\n                        //Show success message\r\n                        self.success = true;\r\n                        self.loading = false;\r\n                    }\r\n                },\r\n                function(error) {\r\n                    //CONSTANTS\r\n                    const ERROR_MESSAGE = 'Error modalSurvey.controller.js method: saveOption ';\r\n                    Raven.captureMessage(ERROR_MESSAGE, error);\r\n                }\r\n            );\r\n\r\n\r\n        }\r\n\r\n\r\n        /**\r\n        * close\r\n        * @description - when user click \"X\" button, close the modal\r\n        * @use - this.close();\r\n        * @function\r\n        * @return {void}\r\n        */\r\n\r\n        close(): void {\r\n            this.$uibModalInstance.close();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    angular.module('mainApp.components.modal')\r\n        .controller(ModalSurveyController.controllerId,\r\n                    ModalSurveyController);\r\n\r\n}\r\n"]}