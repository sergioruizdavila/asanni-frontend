{"version":3,"sources":["components/modal/modalForgotPassword/modalForgotPassword.controller.ts"],"names":[],"mappings":"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","file":"../../../../www/components/modal/modalForgotPassword/modalForgotPassword.controller.js","sourcesContent":["/**\n * ModalForgotPasswordController\n * @description - modal Forgot Password controller definition, generic modal\n * in order to show user forgotPassword form\n * @constructor\n * @param {ng.ui.bootstrap.IModalServiceInstance} $uibModalInstance - modal boostrap instance\n */\n\nmodule components.modal.modalForgotPassword {\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    interface IModalForgotPasswordController {\n        close: () => void;\n        validate: IModalForgotPasswordValidate;\n        activate: () => void;\n    }\n\n    interface IModalForgotPasswordScope extends ng.IScope {\n\n    }\n\n    interface IModalForgotPasswordForm {\n        email: string;\n    }\n\n    interface IModalForgotPasswordValidate {\n        email: app.core.util.functionsUtil.IValid;\n        globalValidate: app.core.util.functionsUtil.IValid;\n    }\n\n\n    class ModalForgotPasswordController implements IModalForgotPasswordController {\n\n        static controllerId = 'mainApp.components.modal.ModalForgotPasswordController';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        form: IModalForgotPasswordForm;\n        validate: IModalForgotPasswordValidate;\n        sending: boolean;\n        // --------------------------------\n\n        /*-- INJECT DEPENDENCIES --*/\n        static $inject = [\n            '$rootScope',\n            'mainApp.auth.AuthService',\n            'mainApp.core.util.FunctionsUtilService',\n            'mainApp.core.util.messageUtilService',\n            'mainApp.register.RegisterService',\n            '$filter',\n            '$uibModal',\n            '$uibModalInstance',\n            'dataConfig'\n        ];\n\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(\n            private $rootScope: app.core.interfaces.IMainAppRootScope,\n            private AuthService: app.auth.IAuthService,\n            private functionsUtil: app.core.util.functionsUtil.IFunctionsUtilService,\n            private messageUtil: app.core.util.messageUtil.IMessageUtilService,\n            private RegisterService: app.register.IRegisterService,\n            private $filter: angular.IFilterService,\n            private $uibModal: ng.ui.bootstrap.IModalService,\n            private $uibModalInstance: ng.ui.bootstrap.IModalServiceInstance,\n            private dataConfig: IDataConfig) {\n\n            this._init();\n\n        }\n\n        /*-- INITIALIZE METHOD --*/\n        private _init() {\n            //VARIABLES\n            let self = this;\n\n            // Init sending loading\n            this.sending = false;\n\n            //Init form\n            this.form = {\n                email: ''\n            };\n\n            // Build validate object fields\n            this.validate = {\n                email: {valid: true, message: ''},\n                globalValidate: {valid: true, message: ''}\n            };\n\n            this.activate();\n        }\n\n        //active function to handle all controller logic\n        activate(): void {\n            //CONSTANTS\n            const ENTER_MIXPANEL = 'Enter: Forgot Passwod Modal';\n            //LOG\n            DEBUG && console.log('modalForgotPassword controller actived');\n            //MIXPANEL\n            mixpanel.track(ENTER_MIXPANEL);\n        }\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n\n\n        /**\n        * _validateForm\n        * @description - Validate each field on form\n        * @use - this._validateForm();\n        * @function\n        * @return {boolean} formValid - return If the complete form is valid or not.\n        */\n        private _validateForm(): boolean {\n            //CONSTANTS\n            const NULL_ENUM = app.core.util.functionsUtil.Validation.Null;\n            const EMPTY_ENUM = app.core.util.functionsUtil.Validation.Empty;\n            const EMAIL_ENUM = app.core.util.functionsUtil.Validation.Email;\n            /***************************************************/\n\n            //VARIABLES\n            let formValid = true;\n\n            //Validate Email field\n            let email_rules = [NULL_ENUM, EMPTY_ENUM, EMAIL_ENUM];\n            this.validate.email = this.functionsUtil.validator(this.form.email, email_rules);\n            if(!this.validate.email.valid) {\n                formValid = this.validate.email.valid;\n            }\n\n            return formValid;\n        }\n\n\n\n        /**\n        * _sendInstructions\n        * @description - Send email with link to reset password\n        * @use - this._sendInstructions();\n        * @function\n        * @return {void}\n        */\n        private _sendInstructions(): void {\n            //CONSTANTS\n            const CLICK_MIXPANEL = 'Click: Send instructions from Forgot Password';\n            const NO_ACCOUNT_EXISTS_1 = this.$filter('translate')('%modal.forgot_password.no_account_exists.part1.text');\n            const NO_ACCOUNT_EXISTS_2 = this.$filter('translate')('%modal.forgot_password.no_account_exists.part2.text');\n            const SENT_LINK = this.$filter('translate')('%modal.forgot_password.sent_link.text');\n\n            //MIXPANEL\n            mixpanel.track(CLICK_MIXPANEL, {\n                \"email\": this.form.email || '*'\n            });\n\n            //VARIABLES\n            let self = this;\n\n            let formValid = this._validateForm();\n\n            if(formValid) {\n\n                //loading On\n                this.sending = true;\n\n                //Validate if given email is in DB\n                this.RegisterService.checkEmail(this.form.email).then(\n\n                    //Success\n                    function(response) {\n                        //VARIABLES\n                        let emailExist = true;\n\n                        if(response.data) {\n                            //TODO: Validar mejor cuando de un error de servidor\n                            emailExist = response.data.emailExist || true;\n                        } else {\n                            emailExist = false;\n                        }\n\n                        self.validate.globalValidate.valid = emailExist;\n\n                        if(!emailExist) {\n                            //loading Off\n                            self.sending = false;\n                            self.validate.globalValidate.message = NO_ACCOUNT_EXISTS_1 + self.form.email + NO_ACCOUNT_EXISTS_2;\n                        } else {\n                            //Send instructions to reset password\n                            self.AuthService.resetPassword(self.form.email).then(\n\n                                //Success\n                                function(response) {\n                                    //loading Off\n                                    self.sending = false;\n                                    self.messageUtil.info(SENT_LINK + self.form.email);\n                                    //Open Log In modal to prepare user to log in\n                                    self._openLogInModal();\n                                },\n\n                                //Error\n                                function(error) {\n                                    //loading Off\n                                    self.sending = false;\n                                    DEBUG && console.error(error);\n                                    self.messageUtil.error('');\n                                }\n                            );\n                        }\n\n                    }\n\n                );\n\n            }\n\n        }\n\n\n\n        /**\n        * _openLogInModal\n        * @description - open Modal in order to Log in action\n        * @use - this._openLogInModal();\n        * @function\n        * @return {void}\n        */\n        private _openLogInModal(): void {\n            //MIXPANEL\n            mixpanel.track(\"Click on 'Log in' from signUp modal\");\n\n            //VARIABLES\n            let self = this;\n            // modal default options\n            let options: ng.ui.bootstrap.IModalSettings = {\n                animation: false,\n                backdrop: 'static',\n                keyboard: false,\n                size: 'sm',\n                templateUrl: this.dataConfig.modalLogInTmpl,\n                controller: 'mainApp.components.modal.ModalLogInController as vm',\n                resolve: {\n                    //one way to send data from this scope to modal\n                    dataSetModal: function () {\n                        return {\n                            hasNextStep: false\n                        }\n                    }\n                }\n            };\n\n            var modalInstance = this.$uibModal.open(options);\n\n            /* When modal is closed,validate if user is Authenticated in order to\n            show current avatar user */\n            modalInstance.result.then(function () {\n                //Validate if user is Authenticated\n                self.$rootScope.$broadcast('Is Authenticated');\n            }, function () {\n                DEBUG && console.info('Modal dismissed at: ' + new Date());\n            });\n\n            this.$uibModalInstance.close();\n        }\n\n\n\n\n        /**\n        * close\n        * @description - when user click \"X\" button, close the modal\n        * @use - this.close();\n        * @function\n        * @return {void}\n        */\n        close(): void {\n            this.$uibModalInstance.close();\n        }\n\n\n    }\n\n    angular.module('mainApp.components.modal')\n        .controller(ModalForgotPasswordController.controllerId,\n                    ModalForgotPasswordController);\n\n}\n"]}