{"version":3,"sources":["components/modal/modalLogIn/modalLogIn.controller.ts"],"names":[],"mappings":"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","file":"../../../../www/components/modal/modalLogIn/modalLogIn.controller.js","sourcesContent":["/**\n * ModalLogInController\n * @description - modal User LogIn controller definition, generic modal\n * in order to show user logIn form\n * @constructor\n * @param {ng.ui.bootstrap.IModalServiceInstance} $uibModalInstance - modal boostrap instance\n */\n\nmodule components.modal.modalLogIn {\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    interface IModalLogInController {\n        close: () => void;\n        validate: IModalLogInValidate;\n        activate: () => void;\n    }\n\n    interface IModalLogInScope extends ng.IScope {\n\n    }\n\n    interface IModalLogInForm {\n        username: string;\n        email: string;\n        password: string;\n    }\n\n    interface IModalLogInValidate {\n        username: app.core.util.functionsUtil.IValid;\n        email: app.core.util.functionsUtil.IValid;\n        password: app.core.util.functionsUtil.IValid;\n        globalValidate: app.core.util.functionsUtil.IValid;\n    }\n\n\n    class ModalLogInController implements IModalLogInController {\n\n        static controllerId = 'mainApp.components.modal.ModalLogInController';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        form: IModalLogInForm;\n        validate: IModalLogInValidate;\n        saving: boolean;\n        // --------------------------------\n\n        /*-- INJECT DEPENDENCIES --*/\n        static $inject = [\n            '$rootScope',\n            '$state',\n            'mainApp.auth.AuthService',\n            'mainApp.account.AccountService',\n            'mainApp.models.user.UserService',\n            'mainApp.core.util.FunctionsUtilService',\n            'mainApp.core.util.messageUtilService',\n            '$filter',\n            'mainApp.localStorageService',\n            'dataSetModal',\n            'dataConfig',\n            '$uibModal',\n            '$uibModalInstance'\n        ];\n\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(\n            private $rootScope: app.core.interfaces.IMainAppRootScope,\n            private $state: ng.ui.IStateService,\n            private AuthService: app.auth.IAuthService,\n            private AccountService: app.account.IAccountService,\n            private userService: app.models.user.IUserService,\n            private functionsUtil: app.core.util.functionsUtil.IFunctionsUtilService,\n            private messageUtil: app.core.util.messageUtil.IMessageUtilService,\n            private $filter: angular.IFilterService,\n            private localStorage,\n            private dataSetModal: app.core.interfaces.IDataSet,\n            private dataConfig: IDataConfig,\n            private $uibModal: ng.ui.bootstrap.IModalService,\n            private $uibModalInstance: ng.ui.bootstrap.IModalServiceInstance) {\n\n            this._init();\n\n        }\n\n        /*-- INITIALIZE METHOD --*/\n        private _init() {\n            //VARIABLES\n            let self = this;\n\n            // Init saving loading\n            this.saving = false;\n\n            //Init form\n            this.form = {\n                username: '',\n                email: '',\n                password: ''\n            };\n\n            // Build validate object fields\n            this.validate = {\n                username: {valid: true, message: ''},\n                email: {valid: true, message: ''},\n                password: {valid: true, message: ''},\n                globalValidate: {valid: true, message: ''}\n            };\n\n            this.activate();\n        }\n\n        //active function to handle all controller logic\n        activate(): void {\n            //CONSTANTS\n            const ENTER_MIXPANEL = 'Enter: Log in modal';\n            //LOG\n            DEBUG && console.log('modalLogIn controller actived');\n            //MIXPANEL\n            mixpanel.track(ENTER_MIXPANEL);\n        }\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n        /**\n        * login\n        * @description - Tries to login a user by calling login AuthService method\n        * @use - this.login();\n        * @function\n        * @return {void}\n        */\n        login(): void {\n            //CONSTANTS\n            const USERNAME_PASSWORD_WRONG = this.$filter('translate')('%error.username_password_wrong.text');\n            const SERVER_ERROR = this.$filter('translate')('%error.server_error.text');\n            const SERVER_CODE_ERROR = this.$filter('translate')('%error.server_error_code.text');\n\n            //VARIABLES\n            let self = this;\n\n            //loading On\n            this.saving = true;\n\n            let formValid = this._validateForm();\n\n            if(formValid) {\n                //get username given an user email\n                this.AccountService.getUsername(this.form.email).then(\n                    function(response) {\n\n                        //If username exists, add this field on request to login\n                        if(response.userExist) {\n                            self.form.username = response.username;\n                        } else {\n                            //TODO: Solucion nada optima, no esta bien asignar el email,\n                            // como si fuera el username, solo para que rompa, y devuelva\n                            // error de login, buscar una solucion mejor.\n                            self.form.username = self.form.email;\n                        }\n\n                        self.AuthService.login(self.form).then(\n\n                            //Success\n                            function(response) {\n                                self.AccountService.getAccount().then(\n                                    function(response) {\n                                        //LOG\n                                        DEBUG && console.log('Data User: ', response);\n\n                                        //loading Off\n                                        self.saving = false;\n\n                                        //Set logged User data in localStorage\n                                        self.localStorage.setItem(self.dataConfig.userDataLocalStorage, JSON.stringify(response));\n                                        //Set logged User data in $rootScope\n                                        self.$rootScope.userData = response;\n\n                                        self.userService.getUserProfileById(response.id).then(\n                                            function(response) {\n                                                if(response.userId) {\n                                                    self.$rootScope.profileData = new app.models.user.Profile(response);\n                                                    self.functionsUtil.addUserIndentifyMixpanel(self.$rootScope.profileData.UserId);\n                                                }\n\n                                                //Close modal\n                                                self.$uibModalInstance.close();\n                                            }\n                                        );\n\n                                    }\n                                );\n                            },\n\n                            // Error\n                            function(response) {\n                                //loading Off\n                                self.saving = false;\n\n                                if (response.status == 401) {\n                                    DEBUG && console.log(USERNAME_PASSWORD_WRONG);\n                                    self.validate.globalValidate.valid = false;\n                                    self.validate.globalValidate.message = USERNAME_PASSWORD_WRONG;\n                                }\n\n                                else if (response.status == -1) {\n                                    DEBUG && console.log(SERVER_ERROR);\n                                    self.messageUtil.error(SERVER_ERROR);\n                                }\n\n                                else {\n                                    DEBUG && console.log(SERVER_CODE_ERROR + response.status);\n                                    self.messageUtil.error(SERVER_CODE_ERROR + response.status);\n                                }\n                            }\n                        );\n                    }\n                );\n\n            } else {\n                //loading Off\n                this.saving = false;\n            }\n\n        }\n\n\n\n        /**\n        * _validateForm\n        * @description - Validate each field on form\n        * @use - this._validateForm();\n        * @function\n        * @return {boolean} formValid - return If the complete form is valid or not.\n        */\n        private _validateForm(): boolean {\n            //CONSTANTS\n            const NULL_ENUM = app.core.util.functionsUtil.Validation.Null;\n            const EMPTY_ENUM = app.core.util.functionsUtil.Validation.Empty;\n            const EMAIL_ENUM = app.core.util.functionsUtil.Validation.Email;\n            /***************************************************/\n\n            //VARIABLES\n            let formValid = true;\n\n            //Validate Email field\n            let email_rules = [NULL_ENUM, EMPTY_ENUM, EMAIL_ENUM];\n            this.validate.email = this.functionsUtil.validator(this.form.email, email_rules);\n            if(!this.validate.email.valid) {\n                formValid = this.validate.email.valid;\n            }\n\n            //Validate Password field\n            let password_rules = [NULL_ENUM, EMPTY_ENUM];\n            this.validate.password = this.functionsUtil.validator(this.form.password, password_rules);\n            if(!this.validate.password.valid) {\n                formValid = this.validate.password.valid;\n            }\n\n            return formValid;\n        }\n\n\n\n        /**\n        * _openForgotPasswordModal\n        * @description - open Modal in order to recover password\n        * @use - this._openForgotPasswordModal();\n        * @function\n        * @return {void}\n        */\n        private _openForgotPasswordModal(): void {\n            //VARIABLES\n            let self = this;\n            // modal default options\n            let options: ng.ui.bootstrap.IModalSettings = {\n                animation: false,\n                backdrop: 'static',\n                size: 'sm',\n                keyboard: false,\n                templateUrl: this.dataConfig.modalForgotPasswordTmpl,\n                controller: 'mainApp.components.modal.ModalForgotPasswordController as vm',\n                resolve: {\n                    //one way to send data from this scope to modal\n                    dataSetModal: function () {\n                        return {\n                            hasNextStep: self.dataSetModal.hasNextStep\n                        }\n                    }\n                }\n            };\n\n            var modalInstance = this.$uibModal.open(options);\n\n            this.$uibModalInstance.close();\n        }\n\n\n\n        /**\n        * _openSignUpModal\n        * @description - open Modal in order to Log in action\n        * @use - this._openSignUpModal();\n        * @function\n        * @return {void}\n        */\n        private _openSignUpModal(): void {\n\n            //VARIABLES\n            let self = this;\n            // modal default options\n            let options: ng.ui.bootstrap.IModalSettings = {\n                animation: false,\n                backdrop: 'static',\n                size: 'sm',\n                keyboard: false,\n                templateUrl: this.dataConfig.modalSignUpTmpl,\n                controller: 'mainApp.components.modal.ModalSignUpController as vm',\n                resolve: {\n                    //one way to send data from this scope to modal\n                    dataSetModal: function () {\n                        return {\n                            hasNextStep: self.dataSetModal.hasNextStep\n                        }\n                    }\n                }\n            };\n\n            var modalInstance = this.$uibModal.open(options);\n\n            this.$uibModalInstance.close();\n        }\n\n\n\n        /**\n        * close\n        * @description - when user click \"X\" button, close the modal\n        * @use - this.close();\n        * @function\n        * @return {void}\n        */\n        close(): void {\n            this.$uibModalInstance.close();\n        }\n\n\n    }\n\n    angular.module('mainApp.components.modal')\n        .controller(ModalLogInController.controllerId,\n                    ModalLogInController);\n\n}\n"]}