{"version":3,"sources":["components/modal/modalCertificate/modalCertificate.controller.ts"],"names":[],"mappings":"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","file":"../../../../www/components/modal/modalCertificate/modalCertificate.controller.js","sourcesContent":["/**\n * ModalCertificateController\n * @description - modal Teacher's Certificate controller definition, generic modal in order\n * to show add new teacher's certificate form\n * @constructor\n * @param {ng.ui.bootstrap.IModalServiceInstance} $uibModalInstance - modal boostrap instance\n */\n\nmodule components.modal.modalCertificate {\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    interface IModalCertificateController {\n        form: IModalCertificateForm;\n        validate: IModalCertificateValidate;\n        close: () => void;\n        activate: () => void;\n    }\n\n    interface IModalCertificateScope extends ng.IScope {\n\n    }\n\n    interface IModalCertificateForm {\n        name: string;\n        institution: string;\n        dateReceived: string;\n        description: string;\n    }\n\n    interface IModalCertificateValidate {\n        name: app.core.util.functionsUtil.IValid;\n        institution: app.core.util.functionsUtil.IValid;\n        dateReceived: app.core.util.functionsUtil.IValid;\n        description: app.core.util.functionsUtil.IValid;\n    }\n\n    interface IDataSet {\n        certificate: app.models.teacher.Certificate;\n        teacherId: string;\n    }\n\n\n    class ModalCertificateController implements IModalCertificateController {\n\n        static controllerId = 'mainApp.components.modal.ModalCertificateController';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        form: IModalCertificateForm;\n        validate: IModalCertificateValidate;\n        certificate: app.models.teacher.Certificate;\n        listReceivedYears: Array<app.core.interfaces.ISelectListElement>;\n        receivedYearObject: app.core.interfaces.ISelectListElement;\n        defaultConfig: any;\n        // --------------------------------\n\n        /*-- INJECT DEPENDENCIES --*/\n        static $inject = [\n            '$uibModalInstance',\n            'dataSetModal',\n            'mainApp.core.util.GetDataStaticJsonService',\n            'mainApp.core.util.FunctionsUtilService',\n            'mainApp.models.teacher.TeacherService',\n            '$timeout',\n            '$filter'\n        ];\n\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(\n            private $uibModalInstance: ng.ui.bootstrap.IModalServiceInstance,\n            private dataSetModal: IDataSet,\n            private getDataFromJson: app.core.util.getDataStaticJson.IGetDataStaticJsonService,\n            private functionsUtilService: app.core.util.functionsUtil.IFunctionsUtilService,\n            private teacherService: app.models.teacher.ITeacherService,\n            private $timeout: angular.ITimeoutService,\n            private $filter: angular.IFilterService) {\n\n            this._init();\n\n        }\n\n        /*-- INITIALIZE METHOD --*/\n        private _init() {\n            //VARIABLES\n            let self = this;\n\n            //Create Certificate object\n            this.certificate = this.dataSetModal.certificate || new app.models.teacher.Certificate();\n\n            // Years Select List Structure\n            this.receivedYearObject = {value: this.certificate.DateReceived || ''};\n\n            //Init form\n            this.form = {\n                name: this.certificate.Name || '',\n                institution: this.certificate.Institution || '',\n                dateReceived: this.certificate.DateReceived || '',\n                description: this.certificate.Description || ''\n            };\n\n            // Build Years select lists\n            this.listReceivedYears = this.functionsUtilService.buildNumberSelectList(1957, 2017);\n\n            // Build validate object fields\n            this.validate = {\n                name: {valid: true, message: ''},\n                institution: {valid: true, message: ''},\n                dateReceived: {valid: true, message: ''},\n                description: {valid: true, message: ''}\n            };\n\n            this.activate();\n        }\n\n        //active function to handle all controller logic\n        activate(): void {\n            //LOG\n            console.log('modalCertificate controller actived');\n        }\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n\n\n        /**\n        * _validateForm\n        * @description - Validate each field on form\n        * @use - this._validateForm();\n        * @function\n        * @return {boolean} formValid - return If the complete form is valid or not.\n        */\n        private _validateForm(): boolean {\n            //CONSTANTS\n            const NULL_ENUM = app.core.util.functionsUtil.Validation.Null;\n            const EMPTY_ENUM = app.core.util.functionsUtil.Validation.Empty;\n            const EMAIL_ENUM = app.core.util.functionsUtil.Validation.Email;\n\n            /***************************************************/\n            //VARIABLES\n            let formValid = true;\n\n            //Validate Name field\n            let name_rules = [NULL_ENUM, EMPTY_ENUM];\n            this.validate.name = this.functionsUtilService.validator(this.form.name, name_rules);\n            if(!this.validate.name.valid) {\n                formValid = this.validate.name.valid;\n            }\n\n            //Validate Institution field\n            let institution_rules = [NULL_ENUM, EMPTY_ENUM];\n            this.validate.institution = this.functionsUtilService.validator(this.form.institution, institution_rules);\n            if(!this.validate.institution.valid) {\n                formValid = this.validate.institution.valid;\n            }\n\n            //Validate 'Received Year' fields\n            let received_year_rules = [NULL_ENUM, EMPTY_ENUM];\n            this.validate.dateReceived = this.functionsUtilService.validator(this.receivedYearObject.value, received_year_rules);\n            if(!this.validate.dateReceived.valid) {\n                formValid = this.validate.dateReceived.valid;\n            }\n\n            return formValid;\n        }\n\n\n\n        /**\n        * save\n        * @description - when user click \"Save\" button, close the modal and\n        * send the new certificate data\n        * @use - this.save();\n        * @function\n        * @return {void}\n        */\n        save(): void {\n            //Validate data form\n            let formValid = this._validateForm();\n            //If form is valid, save data model\n            if(formValid) {\n                //VARIABLES\n                let self = this;\n                let receivedYear = this.receivedYearObject.value;\n                /*********************************/\n\n                this.form.dateReceived = receivedYear;\n\n                //Charge new data\n                this.certificate.Name = this.form.name;\n                this.certificate.Institution = this.form.institution;\n                this.certificate.DateReceived = this.form.dateReceived;\n                this.certificate.Description = this.form.description;\n\n                if(this.certificate.Id) {\n                    this.teacherService.updateCertificate(this.dataSetModal.teacherId, this.certificate)\n                    .then(\n                        function(response) {\n                            if(response.id) {\n                                self.$uibModalInstance.close();\n                            } else {\n                                //error\n                            }\n                        }\n                    );\n                } else {\n                    this.teacherService.createCertificate(this.dataSetModal.teacherId, this.certificate)\n                    .then(\n                        function(response) {\n                            if(response.id) {\n                                self.certificate.Id = response.id;\n                                self.$uibModalInstance.close(self.certificate);\n                            } else {\n                                //error\n                            }\n                        }\n                    );\n                }\n\n            } else {\n                //Go top pages\n                window.scrollTo(0, 0);\n            }\n\n        }\n\n\n\n        /**\n        * close\n        * @description - when user click \"X\" button, close the modal\n        * @use - this.close();\n        * @function TODO: deberia siempre llamarse a close, no a $uibModalInstance\n        * dejarle la funcion de cerrar a este metodo.\n        * @return {void}\n        */\n        close(): void {\n            this.$uibModalInstance.close();\n        }\n\n\n    }\n\n    angular.module('mainApp.components.modal')\n        .controller(ModalCertificateController.controllerId,\n                    ModalCertificateController);\n\n}\n"]}