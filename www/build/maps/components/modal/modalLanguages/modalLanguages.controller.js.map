{"version":3,"sources":["components/modal/modalLanguages/modalLanguages.controller.ts"],"names":[],"mappings":"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","file":"../../../../www/components/modal/modalLanguages/modalLanguages.controller.js","sourcesContent":["/**\n * ModalLanguagesController\n * @description - modal Contact controller definition, generic modal in order\n * to show add new meeting point form\n * @constructor\n * @param {ng.ui.bootstrap.IModalServiceInstance} $uibModalInstance - modal boostrap instance\n */\n\nmodule components.modal.modalLanguages {\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    interface IModalLanguagesController {\n        close: () => void;\n        activate: () => void;\n    }\n\n    interface IModalLanguagesScope extends ng.IScope {\n\n    }\n\n    interface IModalLanguagesForm {\n        options: Array<app.core.interfaces.IKeyValue>;\n    }\n\n\n    interface IModalLanguagesError {\n        message: string;\n    }\n\n    interface IDataSet {\n        list: Array<app.core.interfaces.IKeyValue>;\n    }\n\n\n    class ModalLanguagesController implements IModalLanguagesController {\n\n        static controllerId = 'mainApp.components.modal.ModalLanguageController';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        form: IModalLanguagesForm;\n        error: IModalLanguagesError;\n        checked: boolean;\n        defaultConfig: any;\n        // --------------------------------\n\n        /*-- INJECT DEPENDENCIES --*/\n        static $inject = [\n            '$uibModalInstance',\n            'dataSetModal',\n            '$timeout'\n        ];\n\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(\n            private $uibModalInstance: ng.ui.bootstrap.IModalServiceInstance,\n            private dataSetModal: IDataSet,\n            private $timeout: angular.ITimeoutService ) {\n\n            this._init();\n\n        }\n\n        /*-- INITIALIZE METHOD --*/\n        private _init() {\n            //VARIABLES\n            let self = this;\n\n            //assign respective title\n            console.log('Title');\n\n            //Init form\n            this.form = {\n                options: this.dataSetModal.list || []\n            };\n\n            // Build Languages Checked List\n            this.$timeout(function(){\n                self._buildLanguagesChecked();\n            });\n\n\n            this.error = {\n                message: ''\n            };\n\n            this.activate();\n        }\n\n        //active function to handle all controller logic\n        activate(): void {\n            //LOG\n            console.log('modalLanguages controller actived');\n        }\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n        /**\n        * addLanguages\n        * @description - add new option to options languages array\n        * @use - this.addLanguages(3);\n        * @function\n        * @param {key} option - languages selected by user\n        * @return {void}\n        */\n        addLanguages(key): void {\n\n            let check = document.getElementById('language-' + key);\n            let checkClasses = check.classList;\n            let checked = check.getAttribute('data-checked');\n            let value = check.innerText;\n\n            if(checked == 'true') {\n                this._removeLanguage(key);\n                checkClasses.remove('ma-label--box--check--active');\n                check.setAttribute('data-checked', 'false');\n            } else {\n                let option = {\n                    key: key,\n                    value: value\n                };\n                this.form.options.push(option);\n                checkClasses.add('ma-label--box--check--active');\n                check.setAttribute('data-checked', 'true');\n            }\n\n        }\n\n\n\n        /**\n        * _removeLanguage\n        * @description - remove a language element of options array\n        * @use - this._removeLanguage(3);\n        * @function\n        * @param {string} key - languages deselected by user\n        * @return {void}\n        */\n        private _removeLanguage(key): void {\n            this.form.options = this.form.options.filter(function(el) {\n                return el.key !== key;\n            });\n        }\n\n\n\n        /**\n        * _buildLanguagesChecked\n        * @description - when open modal, build languages have already checked\n        * before by the user\n        * @use - this._buildLanguagesChecked();\n        * @function\n        * @return {void}\n        */\n        private _buildLanguagesChecked(): void {\n            if(this.form.options.length > 0){\n                for (let i = 0; i < this.form.options.length; i++) {\n                    let language = this.form.options[i];\n                    let check = document.getElementById('language-' + language.key);\n                    let checkClasses = check.classList;\n                    checkClasses.add('ma-label--box--check--active');\n                    check.setAttribute('data-checked', 'true');\n                }\n            }\n        }\n\n\n\n        /**\n        * _save\n        * @description - when user click \"Save\" button, close the modal and\n        * send the new languages options list\n        * @use - this.save();\n        * @function\n        * @return {void}\n        */\n        private _save(): void {\n            this.$uibModalInstance.close(this.form.options);\n        }\n\n\n\n        /**\n        * close\n        * @description - when user click \"X\" button, close the modal\n        * @use - this.close();\n        * @function\n        * @return {void}\n        */\n        close(): void {\n            this.$uibModalInstance.close();\n        }\n\n\n    }\n\n    angular.module('mainApp.components.modal')\n        .controller(ModalLanguagesController.controllerId,\n                    ModalLanguagesController);\n\n}\n"]}