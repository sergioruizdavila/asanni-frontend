{"version":3,"sources":["components/modal/modalCreateUser/modalPhoto/modalPhoto.controller.ts"],"names":[],"mappings":"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","file":"../../../../../www/components/modal/modalCreateUser/modalPhoto/modalPhoto.controller.js","sourcesContent":["/**\n * ModalPhotoController\n * @description - modal photo after the user signed up in Waysily\n * @constructor\n */\n\nmodule components.modal.modalPhoto {\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    interface IModalPhotoController {\n        form: IModalPhotoForm;\n        validate: IModalPhotoValidate;\n        activate: () => void;\n    }\n\n    interface IModalPhotoForm {\n        avatar: File;\n        croppedDataUrl: string;\n        thumbnail: string;\n    }\n\n    interface IModalPhotoValidate {\n        avatar: app.core.util.functionsUtil.IValid;\n        thumbnail: app.core.util.functionsUtil.IValid;\n    }\n\n\n    /****************************************/\n    /*           CLASS DEFINITION           */\n    /****************************************/\n    class ModalPhotoController implements IModalPhotoController {\n\n        static controllerId = 'mainApp.components.modal.ModalPhotoController';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        form: IModalPhotoForm;\n        validate: IModalPhotoValidate;\n        uploading: boolean;\n        // --------------------------------\n\n        /*-- INJECT DEPENDENCIES --*/\n        static $inject = [\n            'mainApp.models.user.UserService',\n            'mainApp.core.s3Upload.S3UploadService',\n            '$uibModalInstance',\n            'mainApp.core.util.messageUtilService',\n            'Upload',\n            'dataConfig',\n            '$uibModal',\n            '$rootScope'\n        ];\n\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(\n            private userService: app.models.user.IUserService,\n            private S3UploadService: app.core.s3Upload.IS3UploadService,\n            private $uibModalInstance: ng.ui.bootstrap.IModalServiceInstance,\n            private messageUtil: app.core.util.messageUtil.IMessageUtilService,\n            private Upload: app.core.interfaces.IUpload,\n            private dataConfig: IDataConfig,\n            private $uibModal: ng.ui.bootstrap.IModalService,\n            private $rootScope: app.core.interfaces.IMainAppRootScope) {\n\n            this._init();\n\n        }\n\n        /*-- INITIALIZE METHOD --*/\n        private _init() {\n            //VARIABLES\n            let self = this;\n\n            // Init upload loading button\n            this.uploading = false;\n\n            // Init form\n            this.form = {\n                avatar: null,\n                croppedDataUrl: '',\n                thumbnail: ''\n            };\n\n            // Build validate object fields\n            this.validate = {\n                avatar: {valid: true, message: ''},\n                thumbnail: {valid: true, message: ''}\n            };\n\n            this.activate();\n        }\n\n        /*-- ACTIVATE METHOD --*/\n        activate(): void {\n            //LOG\n            DEBUG && console.log('modalPhoto controller actived');\n        }\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n\n        /**\n        * _resizeImage\n        * @description - resize image base on defaults parameters\n        * @use - this._resizeImage();\n        * @function\n        * @return {void}\n        */\n        private _resizeImage(): angular.IPromise<any> {\n            //VARIABLES\n            let self = this;\n            //New file name\n            let newName = app.core.util.functionsUtil.FunctionsUtilService.generateGuid() + '.jpeg';\n            // Image Options\n            let options= {\n                width: 250,\n                height: 250,\n                quality: 1.0,\n                type: 'image/jpeg',\n                pattern:'.jpg',\n                restoreExif: false\n            };\n            // Build file base on cropped data image\n            let file = this.Upload.dataUrltoBlob(this.form.croppedDataUrl, newName);\n            /****************************************************/\n\n            // Resize image (change extension to jpeg, resize and quality)\n            return this.Upload.resize(file, options).then(\n                function(resizedFile) {\n\n                    if(resizedFile) {\n                        // Upload resized file to Amazon S3\n                        return self._uploadImage(resizedFile).then(function(result) {\n                            return result;\n                        });\n                    } else {\n                        self.messageUtil.error('Hubo un problema al redimensionar la foto, intenta nuevamente por favor.');\n                    }\n                }\n            );\n\n        }\n\n\n\n        /**\n        * _uploadImage\n        * @description - upload resize image to Amazon S3\n        * @use - this._uploadImage(resizedFile);\n        * @function\n        * @param {File} resizedFile file object\n        * @return {void}\n        */\n        private _uploadImage(resizedFile): angular.IPromise<any> {\n            //VARIABLES\n            let self = this;\n\n            return this.S3UploadService.upload(resizedFile).then(function (result) {\n\n                return result;\n\n            }, function (error) {\n\n                // Mark the error\n                console.log('error', error);\n                return error;\n\n            });\n\n        }\n\n\n\n        /**\n        * _parseData\n        * @description - parse data in order to send to DB\n        * @use - this._parseData();\n        * @function\n        * @return {void}\n        */\n        private _parseData(avatar): void {\n\n            // Prepare data to send to DB\n            this.$rootScope.profileData.Avatar = avatar;\n\n        }\n\n\n\n        /**\n        * goToNext\n        * @description - go to next step (save user information on DB)\n        * @function\n        * @return void\n        */\n        private _goToNext(): void {\n            //VARIABLES\n            let self = this;\n\n            this.uploading = true;\n\n            // If this.form.avatar exists, resize and upload image\n            if(this.form.avatar) {\n\n                this._resizeImage().then(function(result) {\n\n                    if(result.Location) {\n\n                        self._parseData(result.Location);\n\n                        // Update existing profile\n                        self.userService.updateUserProfile(self.$rootScope.profileData)\n                        .then(\n                            function(response) {\n                                if(response.userId) {\n                                    //stop loading\n                                    self.uploading = false;\n\n                                    //go to next step\n                                    self._openBornModal();\n                                }\n                            }\n                        );\n\n                    } else {\n                        self.messageUtil.error('');\n                    }\n\n                });\n\n            // If this.form.avatar not exists, only go to next step\n            } else {\n                //go to next step\n                this._openBornModal();\n            }\n\n        }\n\n\n\n        /**\n        * _openBornModal\n        * @description - open Modal in order to ask user born info\n        * @use - this._openBornModal();\n        * @function\n        * @return {void}\n        */\n        private _openBornModal(): void {\n            //VARIABLES\n            let self = this;\n            // modal default options\n            let options: ng.ui.bootstrap.IModalSettings = {\n                animation: false,\n                backdrop: 'static',\n                size: 'sm',\n                keyboard: false,\n                templateUrl: this.dataConfig.modalBornTmpl,\n                controller: 'mainApp.components.modal.ModalBornController as vm'\n            };\n\n            var modalInstance = this.$uibModal.open(options);\n\n            this.$uibModalInstance.close();\n        }\n\n    }\n\n    angular.module('mainApp.components.modal')\n        .controller(ModalPhotoController.controllerId,\n                    ModalPhotoController);\n\n}\n"]}