{"version":3,"sources":["components/modal/modalCreateUser/modalBorn/modalBorn.controller.ts"],"names":[],"mappings":"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","file":"../../../../../www/components/modal/modalCreateUser/modalBorn/modalBorn.controller.js","sourcesContent":["/**\n * ModalBornController\n * @description - modal get user born information after the user signed up in Waysily\n * @constructor\n */\n\nmodule components.modal.modalBorn {\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    interface IModalBornController {\n        close: () => void;\n        form: IModalBornForm;\n        validate: IModalBornValidate;\n        activate: () => void;\n    }\n\n    interface IModalBornTooltip {\n        birthDate: string;\n        countryBirth: string;\n        cityBirth: string;\n    }\n\n    interface IModalBornForm {\n        birthDate: string;\n        country: string;\n        city: string;\n    }\n\n    interface IModalBornValidate {\n        country: app.core.util.functionsUtil.IValid;\n        city: app.core.util.functionsUtil.IValid;\n        birthDate: app.core.interfaces.IBirthdateValidate;\n    }\n\n    interface IBirthdateForm {\n        day: app.core.interfaces.ISelectListElement;\n        month: app.core.interfaces.IDataFromJsonI18n;\n        year: app.core.interfaces.ISelectListElement;\n    }\n\n    class ModalBornController implements IModalBornController {\n\n        static controllerId = 'mainApp.components.modal.ModalBornController';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        form: IModalBornForm;\n        validate: IModalBornValidate;\n        listMonths: Array<app.core.interfaces.IDataFromJsonI18n>;\n        listDays: Array<app.core.interfaces.ISelectListElement>;\n        listYears: Array<app.core.interfaces.ISelectListElement>;\n        dateObject: IBirthdateForm;\n        tooltip: IModalBornTooltip;\n        listCountries: Array<app.core.interfaces.IDataFromJsonI18n>;\n        countryObject: app.core.interfaces.IDataFromJsonI18n;\n        // --------------------------------\n\n        /*-- INJECT DEPENDENCIES --*/\n        static $inject = [\n            'mainApp.models.user.UserService',\n            'mainApp.core.util.GetDataStaticJsonService',\n            'mainApp.core.util.FunctionsUtilService',\n            '$uibModalInstance',\n            'dataConfig',\n            '$filter',\n            '$uibModal',\n            '$rootScope'\n        ];\n\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(\n            private userService: app.models.user.IUserService,\n            private getDataFromJson: app.core.util.getDataStaticJson.IGetDataStaticJsonService,\n            private functionsUtilService: app.core.util.functionsUtil.IFunctionsUtilService,\n            private $uibModalInstance: ng.ui.bootstrap.IModalServiceInstance,\n            private dataConfig: IDataConfig,\n            private $filter: angular.IFilterService,\n            private $uibModal: ng.ui.bootstrap.IModalService,\n            private $rootScope: app.core.interfaces.IMainAppRootScope\n        ) {\n\n            this._init();\n\n        }\n\n        /*-- INITIALIZE METHOD --*/\n        private _init() {\n            //CONSTANTS\n            const BIRTHDATE_TOOLTIP = this.$filter('translate')('%tooltip.modal_born.birthdate.text');\n            const COUNTRY_BIRTH_TOOLTIP = this.$filter('translate')('%tooltip.modal_born.cntry_birth.text');\n            const CITY_BIRTH_TOOLTIP = this.$filter('translate')('%tooltip.modal_born.city_birth.text');\n            //VARIABLES\n            let self = this;\n\n            //Init form\n            this.form = {\n                country: '',\n                city: '',\n                birthDate: null\n            };\n\n            //tooltips\n            this.tooltip = {\n                birthDate: BIRTHDATE_TOOLTIP,\n                countryBirth: COUNTRY_BIRTH_TOOLTIP,\n                cityBirth: CITY_BIRTH_TOOLTIP\n            };\n\n            // Birthdate Select List Structure\n            this.dateObject = {day:{value:''}, month: {code:'', value:''}, year: {value:''}};\n\n            // Country Select List Structure\n            this.countryObject = {code: '', value: ''};\n\n            // Build Countries select lists\n            this.listCountries = this.getDataFromJson.getCountryi18n();\n\n            // Build Months, Days and Years select lists\n            this.listMonths = this.getDataFromJson.getMonthi18n();\n            this.listDays = this.functionsUtilService.buildNumberSelectList(1, 31);\n            this.listYears = this.functionsUtilService.buildNumberSelectList(1916, 2017);\n\n            // Build validate object fields\n            this.validate = {\n                birthDate: {\n                    day:{valid: true, message: ''},\n                    month: {valid: true, message: ''},\n                    year: {valid: true, message: ''},\n                    valid: true,\n                    message: ''\n                },\n                country: {valid: true, message: ''},\n                city: {valid: true, message: ''}\n            };\n\n            this.activate();\n        }\n\n        /*-- ACTIVATE METHOD --*/\n        activate(): void {\n            //LOG\n            DEBUG && console.log('modalBorn controller actived');\n        }\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n        /**\n        * _openBasicInfoModal\n        * @description - open Modal in order to ask user basic info\n        * @use - this._openBasicInfoModal();\n        * @function\n        * @return {void}\n        */\n        private _openBasicInfoModal(): void {\n            //VARIABLES\n            let self = this;\n            // modal default options\n            let options: ng.ui.bootstrap.IModalSettings = {\n                animation: false,\n                backdrop: 'static',\n                size: 'sm',\n                keyboard: false,\n                templateUrl: this.dataConfig.modalBasicInfoTmpl,\n                controller: 'mainApp.components.modal.ModalBasicInfoController as vm'\n            };\n\n            var modalInstance = this.$uibModal.open(options);\n\n            this.$uibModalInstance.close();\n        }\n\n\n\n        /**\n        * _validateForm\n        * @description - Validate each field on form\n        * @use - this._validateForm();\n        * @function\n        * @return {boolean} formValid - return If the complete form is valid or not.\n        */\n        private _validateForm(): boolean {\n            //CONSTANTS\n            const NULL_ENUM = app.core.util.functionsUtil.Validation.Null;\n            const NAN_ENUM = app.core.util.functionsUtil.Validation.IsNotNaN;\n            const EMPTY_ENUM = app.core.util.functionsUtil.Validation.Empty;\n            const NUMBER_ENUM = app.core.util.functionsUtil.Validation.Number;\n            const BIRTHDATE_MESSAGE = this.$filter('translate')('%create.teacher.basic_info.form.birthdate.validation.message.text');\n\n            /***************************************************/\n            //VARIABLES\n            let formValid = true;\n\n            //Reset validation\n            this.validate.birthDate.valid = true;\n\n            //Validate 'Day' Birth Date fields\n            let day_birthdate_rules = [NULL_ENUM, EMPTY_ENUM, NAN_ENUM];\n            this.validate.birthDate.day = this.functionsUtilService.validator(this.dateObject.day.value, day_birthdate_rules);\n            if(!this.validate.birthDate.day.valid) {\n                formValid = this.validate.birthDate.day.valid;\n                this.validate.birthDate.valid = this.validate.birthDate.day.valid;\n                this.validate.birthDate.message = BIRTHDATE_MESSAGE;\n            }\n\n            //Validate 'Month' Birth Date fields\n            let month_birthdate_rules = [NULL_ENUM, EMPTY_ENUM];\n            this.validate.birthDate.month = this.functionsUtilService.validator(this.dateObject.month.code, month_birthdate_rules);\n            if(!this.validate.birthDate.month.valid) {\n                formValid = this.validate.birthDate.month.valid;\n                this.validate.birthDate.valid = this.validate.birthDate.month.valid;\n                this.validate.birthDate.message = BIRTHDATE_MESSAGE;\n            }\n\n            //Validate 'Year' Birth Date fields\n            let year_birthdate_rules = [NULL_ENUM, EMPTY_ENUM, NAN_ENUM];\n            this.validate.birthDate.year = this.functionsUtilService.validator(this.dateObject.year.value, year_birthdate_rules);\n            if(!this.validate.birthDate.year.valid) {\n                formValid = this.validate.birthDate.year.valid;\n                this.validate.birthDate.valid = this.validate.birthDate.year.valid;\n                this.validate.birthDate.message = BIRTHDATE_MESSAGE;\n            }\n\n            //Validate Country field\n            let country_rules = [NULL_ENUM, EMPTY_ENUM];\n            this.validate.country = this.functionsUtilService.validator(this.countryObject.code, country_rules);\n            if(!this.validate.country.valid) {\n                formValid = this.validate.country.valid;\n            }\n\n            //Validate City field\n            let city_rules = [NULL_ENUM, EMPTY_ENUM];\n            this.validate.city = this.functionsUtilService.validator(this.form.city, city_rules);\n            if(!this.validate.city.valid) {\n                formValid = this.validate.city.valid;\n            }\n\n            return formValid;\n        }\n\n\n\n        /**\n        * _parseData\n        * @description - parse data in order to send to DB\n        * @use - this._parseData();\n        * @function\n        * @return {void}\n        */\n        private _parseData(): void {\n            //VARIABLES\n            let dateFormatted = this.functionsUtilService.joinDate(\n                                    this.dateObject.day.value,\n                                    this.dateObject.month.code,\n                                    this.dateObject.year.value);\n            let countryCode = this.countryObject.code;\n            /*********************************/\n\n            this.form.country = countryCode;\n            // Prepare data to send to DB\n            this.$rootScope.profileData.BirthDate = dateFormatted;\n            this.$rootScope.profileData.BornCountry = this.form.country;\n            this.$rootScope.profileData.BornCity = this.form.city;\n\n        }\n\n\n\n        /**\n        * goToNext\n        * @description - go to next step (save user information on DB)\n        * @function\n        * @return void\n        */\n        private _goToNext(): void {\n            //VARIABLES\n            let self = this;\n\n            //Validate data form\n            let formValid = this._validateForm();\n\n            if(formValid) {\n                this._parseData();\n                // UPDATE EXISTING TEACHER\n                this.userService.updateUserProfile(this.$rootScope.profileData)\n                .then(\n                    function(response) {\n                        if(response.userId) {\n                            //go to next step\n                            self._openBasicInfoModal();\n                        }\n                    }\n                );\n            } else {\n                //Go top pages\n                window.scrollTo(0, 0);\n            }\n\n        }\n\n\n\n        /**\n        * close\n        * @description - when user click \"X\" button, close the modal\n        * @use - this.close();\n        * @function\n        * @return {void}\n        */\n        close(): void {\n            this.$uibModalInstance.close();\n        }\n\n\n    }\n\n    angular.module('mainApp.components.modal')\n        .controller(ModalBornController.controllerId,\n                    ModalBornController);\n\n}\n"]}