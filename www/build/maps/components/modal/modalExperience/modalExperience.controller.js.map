{"version":3,"sources":["components/modal/modalExperience/modalExperience.controller.ts"],"names":[],"mappings":"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","file":"../../../../www/components/modal/modalExperience/modalExperience.controller.js","sourcesContent":["/**\n * ModalExperienceController\n * @description - modal Teacher's Experience controller definition, generic modal\n * in order to show add new experience form\n * @constructor\n * @param {ng.ui.bootstrap.IModalServiceInstance} $uibModalInstance - modal boostrap instance\n */\n\nmodule components.modal.modalExperience {\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    interface IModalExperienceController {\n        form: IModalExperienceForm;\n        validate: IModalExperienceValidate;\n        close: () => void;\n        activate: () => void;\n    }\n\n    interface IModalExperienceScope extends ng.IScope {\n\n    }\n\n    interface IModalExperienceForm {\n        position: string;\n        company: string;\n        country: string;\n        city: string;\n        dateStart: string;\n        dateFinish: string;\n        description: string;\n    }\n\n    interface IModalExperienceValidate {\n        position: app.core.util.functionsUtil.IValid;\n        company: app.core.util.functionsUtil.IValid;\n        country: app.core.util.functionsUtil.IValid;\n        city: app.core.util.functionsUtil.IValid;\n        dateStart: app.core.util.functionsUtil.IValid;\n        dateFinish: app.core.util.functionsUtil.IValid;\n        description: app.core.util.functionsUtil.IValid;\n    }\n\n    interface IDataSet {\n        experience: app.models.teacher.Experience;\n        teacherId: string;\n    }\n\n\n    class ModalExperienceController implements IModalExperienceController {\n\n        static controllerId = 'mainApp.components.modal.ModalExperienceController';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        form: IModalExperienceForm;\n        validate: IModalExperienceValidate;\n        experience: app.models.teacher.Experience;\n        listStartYears: Array<app.core.interfaces.ISelectListElement>;\n        listFinishYears: Array<app.core.interfaces.ISelectListElement>;\n        startYearObject: app.core.interfaces.ISelectListElement;\n        finishYearObject: app.core.interfaces.ISelectListElement;\n        countryObject: app.core.interfaces.IDataFromJsonI18n;\n        listCountries: Array<app.core.interfaces.IDataFromJsonI18n>;\n        defaultConfig: any;\n        HELP_TEXT_TITLE: string;\n        HELP_TEXT_DESCRIPTION: string;\n        // --------------------------------\n\n        /*-- INJECT DEPENDENCIES --*/\n        static $inject = [\n            '$uibModalInstance',\n            'dataSetModal',\n            'mainApp.core.util.GetDataStaticJsonService',\n            'mainApp.core.util.FunctionsUtilService',\n            'mainApp.models.teacher.TeacherService',\n            '$timeout',\n            '$filter'\n        ];\n\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(\n            private $uibModalInstance: ng.ui.bootstrap.IModalServiceInstance,\n            private dataSetModal: IDataSet,\n            private getDataFromJson: app.core.util.getDataStaticJson.IGetDataStaticJsonService,\n            private functionsUtilService: app.core.util.functionsUtil.IFunctionsUtilService,\n            private teacherService: app.models.teacher.ITeacherService,\n            private $timeout: angular.ITimeoutService,\n            private $filter: angular.IFilterService) {\n\n            this._init();\n\n        }\n\n        /*-- INITIALIZE METHOD --*/\n        private _init() {\n            //VARIABLES\n            let self = this;\n\n            //Create Experience object\n            this.experience = this.dataSetModal.experience || new app.models.teacher.Experience();\n\n            // Country Select List Structure\n            this.countryObject = {code: this.experience.Country || '', value: ''};\n\n            // Years Select List Structure\n            this.startYearObject = {value: this.experience.DateStart || ''};\n            this.finishYearObject = {value: this.experience.DateFinish || ''};\n\n            //Init form\n            this.form = {\n                position: this.experience.Position || '',\n                company: this.experience.Company || '',\n                country: this.experience.Country || '',\n                city: this.experience.City || '',\n                dateStart: this.experience.DateStart || '',\n                dateFinish: this.experience.DateFinish || '',\n                description: this.experience.Description || ''\n            };\n\n            // Build Years select lists\n            this.listStartYears = this.functionsUtilService.buildNumberSelectList(1957, 2017);\n            this.listFinishYears = this.functionsUtilService.buildNumberSelectList(1957, 2017);\n\n            //Build Countries select lists\n            this.listCountries = this.getDataFromJson.getCountryi18n();\n\n            // Build validate object fields\n            this.validate = {\n                position: {valid: true, message: ''},\n                company: {valid: true, message: ''},\n                country: {valid: true, message: ''},\n                city: {valid: true, message: ''},\n                dateStart: {valid: true, message: ''},\n                dateFinish: {valid: true, message: ''},\n                description: {valid: true, message: ''}\n            };\n\n            this.activate();\n        }\n\n        //active function to handle all controller logic\n        activate(): void {\n            //LOG\n            console.log('modalExperience controller actived');\n        }\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n\n\n        /**\n        * _validateForm\n        * @description - Validate each field on form\n        * @use - this._validateForm();\n        * @function\n        * @return {boolean} formValid - return If the complete form is valid or not.\n        */\n        private _validateForm(): boolean {\n            //CONSTANTS\n            const NULL_ENUM = app.core.util.functionsUtil.Validation.Null;\n            const EMPTY_ENUM = app.core.util.functionsUtil.Validation.Empty;\n            /***************************************************/\n            //VARIABLES\n            let formValid = true;\n\n            //Validate Position field\n            let position_rules = [NULL_ENUM, EMPTY_ENUM];\n            this.validate.position = this.functionsUtilService.validator(this.form.position, position_rules);\n            if(!this.validate.position.valid) {\n                formValid = this.validate.position.valid;\n            }\n\n            //Validate Company field\n            let company_rules = [NULL_ENUM, EMPTY_ENUM];\n            this.validate.company = this.functionsUtilService.validator(this.form.company, company_rules);\n            if(!this.validate.company.valid) {\n                formValid = this.validate.company.valid;\n            }\n\n            //Validate Country field\n            let country_rules = [NULL_ENUM, EMPTY_ENUM];\n            this.validate.country = this.functionsUtilService.validator(this.countryObject.code, country_rules);\n            if(!this.validate.country.valid) {\n                formValid = this.validate.country.valid;\n            }\n\n            //Validate City field\n            let city_rules = [NULL_ENUM, EMPTY_ENUM];\n            this.validate.city = this.functionsUtilService.validator(this.form.city, city_rules);\n            if(!this.validate.city.valid) {\n                formValid = this.validate.city.valid;\n            }\n\n            //Validate 'Start Year' fields\n            let start_year_rules = [NULL_ENUM, EMPTY_ENUM];\n            this.validate.dateStart = this.functionsUtilService.validator(this.startYearObject.value, start_year_rules);\n            if(!this.validate.dateStart.valid) {\n                formValid = this.validate.dateStart.valid;\n            }\n\n            //Validate 'Finish Year' fields\n            let finish_year_rules = [NULL_ENUM, EMPTY_ENUM];\n            this.validate.dateFinish = this.functionsUtilService.validator(this.finishYearObject.value, finish_year_rules);\n            if(!this.validate.dateFinish.valid) {\n                formValid = this.validate.dateFinish.valid;\n            }\n\n            return formValid;\n        }\n\n\n\n        /**\n        * save\n        * @description - when user click \"Save\" button, close the modal and\n        * send the new experience data\n        * @use - this.save();\n        * @function\n        * @return {void}\n        */\n        save(): void {\n            //Validate data form\n            let formValid = this._validateForm();\n            //If form is valid, save data model\n            if(formValid) {\n                //VARIABLES\n                let self = this;\n                let countryCode = this.countryObject.code;\n                let startYear = this.startYearObject.value;\n                let finishYear = this.finishYearObject.value;\n                /*********************************/\n\n                this.form.country = countryCode;\n                this.form.dateStart = startYear;\n                this.form.dateFinish = finishYear;\n\n                //Charge new data\n                this.experience.Position = this.form.position;\n                this.experience.Country = this.form.country;\n                this.experience.City = this.form.city;\n                this.experience.Company = this.form.company;\n                this.experience.DateStart = this.form.dateStart;\n                this.experience.DateFinish = this.form.dateFinish;\n                this.experience.Description = this.form.description;\n\n                if(this.experience.Id) {\n                    this.teacherService.updateExperience(this.dataSetModal.teacherId, this.experience)\n                    .then(\n                        function(response) {\n                            if(response.id) {\n                                self.$uibModalInstance.close();\n                            } else {\n                                //error\n                            }\n                        }\n                    );\n                } else {\n                    this.teacherService.createExperience(this.dataSetModal.teacherId, this.experience)\n                    .then(\n                        function(response) {\n                            if(response.id) {\n                                self.experience.Id = response.id;\n                                self.$uibModalInstance.close(self.experience);\n                            } else {\n                                //error\n                            }\n                        }\n                    );\n                }\n\n            } else {\n                //Go top pages\n                window.scrollTo(0, 0);\n            }\n\n        }\n\n\n\n        /**\n        * close\n        * @description - when user click \"X\" button, close the modal\n        * @use - this.close();\n        * @function\n        * @return {void}\n        */\n        close(): void {\n            this.$uibModalInstance.close();\n        }\n\n\n    }\n\n    angular.module('mainApp.components.modal')\n        .controller(ModalExperienceController.controllerId,\n                    ModalExperienceController);\n\n}\n"]}