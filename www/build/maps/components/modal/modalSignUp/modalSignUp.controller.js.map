{"version":3,"sources":["components/modal/modalSignUp/modalSignUp.controller.ts"],"names":[],"mappings":"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","file":"../../../../www/components/modal/modalSignUp/modalSignUp.controller.js","sourcesContent":["/**\n * ModalSignUpController\n * @description - modal User SignUp controller definition, generic modal\n * in order to show user signUp form\n * @constructor\n */\n\nmodule components.modal.modalSignUp {\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    interface IModalSignUpController {\n        close: () => void;\n        validate: IModalSignUpValidate;\n        activate: () => void;\n    }\n\n    interface IModalSignUpScope extends ng.IScope {\n\n    }\n\n    interface IModalSignUpForm extends app.register.IRegisterUserData {\n        username: string;\n        email: string;\n        first_name: string;\n        last_name: string;\n        password: string;\n    }\n\n    interface IModalSignUpValidate {\n        username: app.core.util.functionsUtil.IValid;\n        email: app.core.util.functionsUtil.IValid;\n        first_name: app.core.util.functionsUtil.IValid;\n        last_name: app.core.util.functionsUtil.IValid;\n        password: app.core.util.functionsUtil.IValid;\n        globalValidate: app.core.util.functionsUtil.IValid;\n    }\n\n    class ModalSignUpController implements IModalSignUpController {\n\n        static controllerId = 'mainApp.components.modal.ModalSignUpController';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        form: IModalSignUpForm;\n        validate: IModalSignUpValidate;\n        passwordMinLength: number;\n        passwordMaxLength: number;\n        saving: boolean;\n        defaultConfig: any;\n        // --------------------------------\n\n        /*-- INJECT DEPENDENCIES --*/\n        static $inject = [\n            '$rootScope',\n            'mainApp.auth.AuthService',\n            'mainApp.account.AccountService',\n            'mainApp.register.RegisterService',\n            'mainApp.core.util.FunctionsUtilService',\n            'mainApp.core.util.messageUtilService',\n            '$filter',\n            'mainApp.localStorageService',\n            'dataSetModal',\n            'dataConfig',\n            '$uibModal',\n            '$uibModalInstance'\n        ];\n\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(\n            private $rootScope: app.core.interfaces.IMainAppRootScope,\n            private AuthService: app.auth.IAuthService,\n            private AccountService: app.account.IAccountService,\n            private RegisterService: app.register.IRegisterService,\n            private functionsUtil: app.core.util.functionsUtil.IFunctionsUtilService,\n            private messageUtil: app.core.util.messageUtil.IMessageUtilService,\n            private $filter: angular.IFilterService,\n            private localStorage,\n            private dataSetModal: app.core.interfaces.IDataSet,\n            private dataConfig: IDataConfig,\n            private $uibModal: ng.ui.bootstrap.IModalService,\n            private $uibModalInstance: ng.ui.bootstrap.IModalServiceInstance) {\n\n            this._init();\n\n        }\n\n        /*-- INITIALIZE METHOD --*/\n        private _init() {\n            //VARIABLES\n            let self = this;\n\n            //Init form\n            this.form = {\n                username: '',\n                email: '',\n                first_name: '',\n                last_name: '',\n                password: ''\n            };\n\n            // Init saving loading\n            this.saving = false;\n\n            // Password min length\n            this.passwordMinLength = this.dataConfig.passwordMinLength;\n\n            // Password max length\n            this.passwordMaxLength = this.dataConfig.passwordMaxLength;\n\n            // Build validate object fields\n            this.validate = {\n                username: {valid: true, message: ''},\n                email: {valid: true, message: ''},\n                first_name: {valid: true, message: ''},\n                last_name: {valid: true, message: ''},\n                password: {valid: true, message: ''},\n                globalValidate: {valid: true, message: ''}\n            };\n\n            this.activate();\n        }\n\n        /*-- ACTIVATE METHOD --*/\n        activate(): void {\n            //CONSTANTS\n            const ENTER_MIXPANEL = 'Enter: Sign up modal';\n            //LOG\n            DEBUG && console.log('modalSignUp controller actived');\n            //MIXPANEL\n            mixpanel.track(ENTER_MIXPANEL);\n        }\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n\n        /**\n        * registerUser\n        * @description - Tried to create a new user account\n        * @use - this.registerUser();\n        * @function\n        * @return {void}\n        */\n        registerUser(): void {\n            //VARIABLES\n            let self = this;\n\n            //Validate data form\n            let formValid = this._validateForm();\n\n            if(formValid) {\n                //loading On\n                this.saving = true;\n\n                //Create a username based on first name and last name\n                this.form.username = this.functionsUtil.generateUsername(this.form.first_name, this.form.last_name);\n\n                //Register current user\n                this.RegisterService.register(this.form).then(\n\n                    //Success\n                    function(response: app.core.interfaces.IUserDataAuth) {\n                        //LOG\n                        DEBUG && console.log('Welcome!, Your new account has been successfuly created.');\n                        //Log user signed up\n                        self._loginAfterRegister(\n                            response.username,\n                            response.email,\n                            response.password\n                        );\n                    },\n\n                    //Error\n                    function(error) {\n                        //LOG\n                        DEBUG && console.log(JSON.stringify(error));\n\n                        //loading Off\n                        self.saving = false;\n\n                        //Parse Error\n                        var errortext = [];\n                        for (var key in error.data) {\n                            //var line = key.toUpperCase();\n                            var line = key;\n                            line += ': '\n                            line += error.data[key];\n                            errortext.push(line);\n                        }\n\n                        //LOG Parsed Error\n                        DEBUG && console.error(errortext);\n\n                        self.validate.globalValidate.valid = false;\n                        self.validate.globalValidate.message = errortext[0];\n                    }\n                );\n\n            }\n\n        }\n\n\n\n        /**\n        * _validateForm\n        * @description - Validate each field on form\n        * @use - this._validateForm();\n        * @function\n        * @return {boolean} formValid - return If the complete form is valid or not.\n        */\n        private _validateForm(): boolean {\n            //CONSTANTS\n            const NULL_ENUM = app.core.util.functionsUtil.Validation.Null;\n            const EMPTY_ENUM = app.core.util.functionsUtil.Validation.Empty;\n            const EMAIL_ENUM = app.core.util.functionsUtil.Validation.Email;\n            const PASSWORD_MESSAGE = this.$filter('translate')('%modal.signup.error.short_password.text');\n            /***************************************************/\n\n            //VARIABLES\n            let formValid = true;\n\n            //Validate First Name field\n            let firstName_rules = [NULL_ENUM, EMPTY_ENUM];\n            this.validate.first_name = this.functionsUtil.validator(this.form.first_name, firstName_rules);\n            if(!this.validate.first_name.valid) {\n                formValid = this.validate.first_name.valid;\n            }\n\n            //Validate Last Name field\n            let lastName_rules = [NULL_ENUM, EMPTY_ENUM];\n            this.validate.last_name = this.functionsUtil.validator(this.form.last_name, lastName_rules);\n            if(!this.validate.last_name.valid) {\n                formValid = this.validate.last_name.valid;\n            }\n\n            //Validate Email field\n            let email_rules = [NULL_ENUM, EMPTY_ENUM, EMAIL_ENUM];\n            this.validate.email = this.functionsUtil.validator(this.form.email, email_rules);\n            if(!this.validate.email.valid) {\n                formValid = this.validate.email.valid;\n            }\n\n            //Validate Password field\n            let password_rules = [NULL_ENUM, EMPTY_ENUM];\n            this.validate.password = this.functionsUtil.validator(this.form.password, password_rules);\n            if(!this.validate.password.valid) {\n                formValid = this.validate.password.valid;\n                this.validate.password.message = PASSWORD_MESSAGE;\n            }\n\n            return formValid;\n        }\n\n\n\n        /**\n        * _checkIfEmailExist\n        * @description - Check if email given exists\n        * @use - this._checkIfEmailExist();\n        * @function\n        * @return {void}\n        */\n        private _checkIfEmailExist(): void {\n            //CONSTANTS\n            const EMAIL_TAKEN_MESSAGE = this.$filter('translate')('%modal.signup.error.email_taken.text');\n\n            //VARIABLES\n            let self = this;\n\n            if(this.form.email) {\n                this.RegisterService.checkEmail(this.form.email).then(\n\n                    function(response) {\n                        if(response.data) {\n                            if(!response.data.emailExist) {\n                                self.validate.email.valid = true;\n                            } else {\n                                self.validate.email.valid = false;\n                                self.validate.email.message = EMAIL_TAKEN_MESSAGE;\n                            }\n                        } else if(response.email) {\n                            self.validate.email.valid = true;\n                        }\n                    }\n\n                );\n            }\n\n        }\n\n\n\n        /**\n        * _openLogInModal\n        * @description - open Modal in order to Log in action\n        * @use - this._openLogInModal();\n        * @function\n        * @return {void}\n        */\n        private _openLogInModal(): void {\n            \n            //VARIABLES\n            let self = this;\n            // modal default options\n            let options: ng.ui.bootstrap.IModalSettings = {\n                animation: false,\n                backdrop: 'static',\n                keyboard: false,\n                size: 'sm',\n                templateUrl: this.dataConfig.modalLogInTmpl,\n                controller: 'mainApp.components.modal.ModalLogInController as vm',\n                resolve: {\n                    //one way to send data from this scope to modal\n                    dataSetModal: function () {\n                        return {\n                            hasNextStep: self.dataSetModal.hasNextStep\n                        }\n                    }\n                }\n            };\n\n            var modalInstance = this.$uibModal.open(options);\n\n            /* When modal is closed,validate if user is Authenticated in order to\n            show current avatar user */\n            modalInstance.result.then(function () {\n\n                //Validate if user is Authenticated\n                self.$rootScope.$broadcast('Is Authenticated', self.dataSetModal.hasNextStep);\n\n            }, function () {\n                DEBUG && console.info('Modal dismissed at: ' + new Date());\n            });\n\n            this.$uibModalInstance.close();\n        }\n\n\n\n        /**\n        * _loginAfterRegister\n        * @description - Tries to login a user after a successful sign up\n        * @use - this._loginAfterRegister();\n        * @function\n        * @return {void}\n        */\n        private _loginAfterRegister(username, email, password): void {\n            //CONSTANTS\n            const USERNAME_PASSWORD_WRONG = this.$filter('translate')('%error.username_password_wrong.text');\n            const SERVER_ERROR = this.$filter('translate')('%error.server_error.text');\n            const SERVER_CODE_ERROR = this.$filter('translate')('%error.server_error_code.text');\n\n            //VARIABLES\n            let self = this;\n            let userData = {\n                username: username,\n                email: email,\n                password: password\n            };\n\n            this.AuthService.login(userData).then(\n\n                //Success\n                function(response) {\n                    self.AccountService.getAccount().then(\n                        function(response) {\n                            //LOG\n                            DEBUG && console.log('Data User: ', response);\n\n                            //loading Off\n                            self.saving = false;\n\n                            //Set logged User data in localStorage\n                            self.localStorage.setItem(self.dataConfig.userDataLocalStorage, JSON.stringify(response));\n                            //Set logged User data in $rootScope\n                            self.$rootScope.userData = response;\n                            /* NOTE: We received 'id' not 'userId' from this endpoint\n                                that's why we have to parse 'id' to 'userId'*/\n                            response.userId = response.id;\n                            self.$rootScope.profileData = new app.models.user.Profile(response);\n\n                            //MIXPANEL\n                            self.functionsUtil.addUserIndentifyMixpanel(self.$rootScope.profileData.UserId);\n                            self.functionsUtil.setUserMixpanel(self.$rootScope.profileData);\n\n                            //Validate if user is Authenticated\n                            self.$rootScope.$broadcast('Is Authenticated', self.dataSetModal.hasNextStep);\n\n                            if(!self.dataSetModal.hasNextStep) {\n                                //Open Welcome Modal\n                                self._openWelcomeModal();\n                            }\n\n                            self.$uibModalInstance.close();\n\n                        }\n                    );\n                },\n\n                // Error\n                function(response) {\n                    //loading Off\n                    self.saving = false;\n\n                    if (response.status == 401) {\n                        DEBUG && console.log(USERNAME_PASSWORD_WRONG);\n                        self.validate.globalValidate.valid = false;\n                        self.validate.globalValidate.message = USERNAME_PASSWORD_WRONG;\n                    }\n\n                    else if (response.status == -1) {\n                        DEBUG && console.log(SERVER_ERROR);\n                        self.messageUtil.error(SERVER_ERROR);\n                    }\n\n                    else {\n                        DEBUG && console.log(SERVER_CODE_ERROR + response.status);\n                        self.messageUtil.error(SERVER_CODE_ERROR + response.status);\n                    }\n                }\n            );\n\n        }\n\n\n\n        /**\n        * _openWelcomeModal\n        * @description - open welcome Modal after a success signUp and log In\n        * @use - this._openWelcomeModal();\n        * @function\n        * @return {void}\n        */\n        private _openWelcomeModal(): void {\n\n            //VARIABLES\n            let self = this;\n            // modal default options\n            let options: ng.ui.bootstrap.IModalSettings = {\n                animation: true,\n                backdrop: 'static',\n                keyboard: false,\n                size: 'sm',\n                templateUrl: this.dataConfig.modalWelcomeTmpl,\n                controller: 'mainApp.components.modal.ModalWelcomeController as vm'\n            };\n\n            var modalInstance = this.$uibModal.open(options);\n\n        }\n\n\n\n        /**\n        * close\n        * @description - when user click \"X\" button, close the modal\n        * @use - this.close();\n        * @function\n        * @return {void}\n        */\n        close(): void {\n            this.$uibModalInstance.close();\n        }\n\n\n    }\n\n    angular.module('mainApp.components.modal')\n        .controller(ModalSignUpController.controllerId,\n                    ModalSignUpController);\n\n}\n"]}