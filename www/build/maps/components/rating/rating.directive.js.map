{"version":3,"sources":["components/rating/rating.directive.ts"],"names":[],"mappings":"AAMA,IAAO,UAAU,CA0JhB;AA1JD,WAAO,UAAU;IAAC,IAAA,MAAM,CA0JvB;IA1JiB,WAAA,MAAM,EAAC,CAAC;QACtB,YAAY,CAAC;QAYb;YAwBI;gBAjBA,qBAAgB,GAAY,IAAI,CAAC;gBACjC,eAAU,GAAG,gBAAgB,CAAC,YAAY,CAAC;gBAC3C,iBAAY,GAAW,IAAI,CAAC;gBAC5B,aAAQ,GAAW,GAAG,CAAC;gBACvB,UAAK,GAAG;oBACJ,WAAW,EAAE,GAAG;oBAChB,IAAI,EAAE,GAAG;iBACZ,CAAC;gBACF,gBAAW,GAAW,+BAA+B,CAAC;gBAUlD,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;YAClD,CAAC;YAED,uBAAI,GAAJ,UAAK,MAAsB,EAAE,GAAY,EAAE,IAAyB;gBAChE,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;YAC1C,CAAC;YAGM,iBAAQ,GAAf;gBACI,MAAM,CAAC,IAAI,QAAQ,EAAE,CAAC;YAC1B,CAAC;YAjCM,oBAAW,GAAG,UAAU,CAAC;YAkCpC,eAAC;QAAD,CApCA,AAoCC,IAAA;QAGD,OAAO;aACF,MAAM,CAAC,2BAA2B,CAAC;aACnC,SAAS,CAAC,QAAQ,CAAC,WAAW,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAqBxD;YAoBI;gBACI,IAAI,CAAC,IAAI,EAAE,CAAC;YAChB,CAAC;YAIO,+BAAI,GAAZ;gBAEI,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;gBACtB,IAAI,CAAC,QAAQ,EAAE,CAAC;YACpB,CAAC;YAGD,mCAAQ,GAAR;gBAEI,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;gBAGzC,IAAI,CAAC,aAAa,EAAE,CAAC;YACzB,CAAC;YASO,wCAAa,GAArB;gBACI,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC;gBAC7B,IAAI,SAAS,GAAG,KAAK,GAAG,CAAC,CAAC;gBAE1B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;oBAEzB,EAAE,CAAA,CAAC,SAAS,IAAI,CAAC,CAAC,CAAA,CAAC;wBACf,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAClC,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,IAAI,GAAG,CAAC,CAAC,CAAC;wBAC1B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;oBACvC,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,IAAI,CAAC,CAAC,CAAC,CAAC;wBACxB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBACzC,CAAC;oBAED,SAAS,GAAG,SAAS,GAAG,CAAC,CAAC;gBAC9B,CAAC;YACL,CAAC;YAIO,uCAAY,GAApB;gBACI,MAAM,CAAC,kBAAkB,GAAG,IAAI,CAAC,IAAI,CAAC;YAC1C,CAAC;YApEM,6BAAY,GAAG,4CAA4C,CAAC;YAuEvE,uBAAC;QAAD,CAzEA,AAyEC,IAAA;QAzEY,uBAAgB,mBAyE5B,CAAA;QAGD,OAAO,CAAC,MAAM,CAAC,2BAA2B,CAAC;aACtC,UAAU,CAAC,gBAAgB,CAAC,YAAY,EAAE,gBAAgB,CAAC,CAAC;IAErE,CAAC,EA1JiB,MAAM,GAAN,iBAAM,KAAN,iBAAM,QA0JvB;AAAD,CAAC,EA1JM,UAAU,KAAV,UAAU,QA0JhB","file":"../../../www/components/rating/rating.directive.js","sourcesContent":["/**\n* MaRating\n* @description - MainApp Rating Directive\n* @example - <ma-rating></ma-rating>\n*/\n\nmodule components.rating {\n    'use strict';\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    export interface IRating extends angular.IDirective {\n\n    }\n\n    /****************************************/\n    /*           CLASS DEFINITION           */\n    /****************************************/\n    class MaRating implements IRating {\n\n        static directiveId = 'maRating';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        bindToController: Boolean = true;\n        controller = RatingController.controllerId;\n        controllerAs: string = 'vm';\n        restrict: string = 'E';\n        scope = {\n            ratingValue: '=',\n            size: '@'\n        };\n        templateUrl: string = 'components/rating/rating.html';\n        // --------------------------------\n\n        /*-- INJECT DEPENDENCIES --*/\n        //static $inject = ['dataConfig'];\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor() {\n            console.log('maRating directive constructor');\n        }\n\n        link($scope: angular.IScope, elm: Element, attr: angular.IAttributes): void {\n            console.log('maRating link function');\n        }\n\n        /*-- INSTANCE FUNCTION --*/\n        static instance(): IRating {\n            return new MaRating();\n        }\n    }\n\n    /*-- MODULE DEFINITION --*/\n    angular\n        .module('mainApp.components.rating')\n        .directive(MaRating.directiveId, MaRating.instance);\n\n\n    /*********************************************************/\n    /*                     CONTROLLER                        */\n    /*********************************************************/\n    /**\n    * RatingController\n    * @description - Rating Controller\n    */\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    interface IRatingController {\n        activate: () => void;\n    }\n\n    /****************************************/\n    /*           CLASS DEFINITION           */\n    /****************************************/\n    export class RatingController implements IRatingController {\n\n        static controllerId = 'mainApp.components.rating.RatingController';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        ratingValue: number;\n        size: string;\n        private _ratingList: Array<string>;\n        // --------------------------------\n\n\n        /*-- INJECT DEPENDENCIES --*/\n        //static $inject = [];\n\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor() {\n            this.init();\n        }\n\n\n        /*-- INITIALIZE METHOD --*/\n        private init() {\n            //init stars list\n            this._ratingList = [];\n            this.activate();\n        }\n\n        /*-- ACTIVATE METHOD --*/\n        activate(): void {\n            //LOG\n            console.log('rating controller actived');\n\n            //Create stars List\n            this._calcuteStars();\n        }\n\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n\n        //TODO: colocar descripcion\n        private _calcuteStars(): void {\n            let value = this.ratingValue;\n            let halfValue = value / 2;\n\n            for (let i = 0; i < 5; i++) {\n\n                if(halfValue >= 1){\n                    this._ratingList.push('star');\n                } else if (halfValue == 0.5) {\n                    this._ratingList.push('star_half');\n                } else if (halfValue <= 0) {\n                    this._ratingList.push('star_border');\n                }\n\n                halfValue = halfValue - 1;\n            }\n        }\n\n\n        //TODO: colocar descripcion\n        private _assignClass(): string {\n            return 'ma-stars__icon--' + this.size;\n        }\n\n\n    }\n\n    /*-- MODULE DEFINITION --*/\n    angular.module('mainApp.components.rating')\n        .controller(RatingController.controllerId, RatingController);\n\n}\n"]}