{"version":3,"sources":["app/account/account.service.ts"],"names":[],"mappings":"AAOA,IAAO,GAAG,CAqHT;AArHD,WAAO,GAAG;IAAC,IAAA,OAAO,CAqHjB;IArHU,WAAA,OAAO,EAAC,CAAC;QAEhB,YAAY,CAAC;QAcb;YAsBI,wBAAoB,EAAqB,EACrB,OAAkC;gBADlC,OAAE,GAAF,EAAE,CAAmB;gBACrB,YAAO,GAAP,OAAO,CAA2B;gBAElD,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;gBAGlD,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;gBAC7B,IAAI,CAAC,wBAAwB,GAAG,kBAAkB,CAAC;YACvD,CAAC;YAcD,mCAAU,GAAV;gBAEI,IAAI,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC;gBAE3B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,GAAG,EAAC,CAAC,CAAC,QAAQ;qBACxC,IAAI,CACD,UAAS,QAAQ;oBACb,MAAM,CAAC,QAAQ,CAAC;gBACpB,CAAC,EACD,UAAS,KAAK;oBACV,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBAC9B,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC,CACJ,CAAC;YACV,CAAC;YAYD,oCAAW,GAAX,UAAY,KAAK;gBAEb,IAAI,GAAG,GAAG,IAAI,CAAC,wBAAwB,CAAC;gBACxC,IAAI,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC;gBAC/B,IAAI,IAAI,GAAG;oBACP,KAAK,EAAE,KAAK;iBACf,CAAC;gBAEF,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAC,GAAG,EAAE,GAAG,EAAC,EAAE,IAAI,CAAC,CAAC,QAAQ;qBACzC,IAAI,CACD,UAAS,QAAQ;oBACb,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;gBAC/B,CAAC,EAED,UAAS,KAAK;oBACV,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBAC9B,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAC3B,CAAC,CACJ,CAAC;gBAEN,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;YAE5B,CAAC;YA1FM,wBAAS,GAAG,gCAAgC,CAAC;YAW7C,sBAAO,GAAG;gBACb,IAAI;gBACJ,qCAAqC;aACxC,CAAC;YA8EN,qBAAC;QAAD,CA9FA,AA8FC,IAAA;QA9FY,sBAAc,iBA8F1B,CAAA;QAGD,OAAO;aACF,MAAM,CAAC,iBAAiB,EAAE,EAAE,CAAC;aAC7B,OAAO,CAAC,cAAc,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;IAE3D,CAAC,EArHU,OAAO,GAAP,WAAO,KAAP,WAAO,QAqHjB;AAAD,CAAC,EArHM,GAAG,KAAH,GAAG,QAqHT","file":"../../../www/app/account/account.service.js","sourcesContent":["/**\n * AccountService\n * @description - Services related on User's Account.\n * @constructor\n * @param {app.core.restApi.IRestApi} restApi - instance rest Api service.\n */\n\nmodule app.account {\n\n    'use strict';\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    export interface IAccountService {\n        getAccount:() => angular.IPromise<any>;\n        getUsername:(email: string) => angular.IPromise<any>;\n    }\n\n\n    /****************************************/\n    /*           CLASS DEFINITION           */\n    /****************************************/\n    export class AccountService implements IAccountService {\n\n        static serviceId = 'mainApp.account.AccountService';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        ACCOUNT_URI: string;\n        ACCOUNT_GET_USERNAME_URI: string;\n        // --------------------------------\n\n\n        /*-- INJECT DEPENDENCIES --*/\n        static $inject = [\n            '$q',\n            'mainApp.core.restApi.restApiService'\n        ];\n\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(private $q: angular.IQService,\n                    private restApi: app.core.restApi.IRestApi) {\n            //LOG\n            DEBUG && console.log('account service instanced');\n\n            //CONSTANTS\n            this.ACCOUNT_URI = 'account';\n            this.ACCOUNT_GET_USERNAME_URI = 'account/username';\n        }\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n        /**\n        * getAccount\n        * @description - get account information\n        * @use - this.AccountService.getAccount();\n        * @function\n        * @return {angular.IPromise<any>} promise - return user's account data\n        */\n\n        getAccount(): angular.IPromise<any> {\n            //VARIABLES\n            let url = this.ACCOUNT_URI;\n\n            return this.restApi.show({url: url}).$promise\n                .then(\n                    function(response) {\n                        return response;\n                    },\n                    function(error) {\n                        DEBUG && console.error(error);\n                        return error;\n                    }\n                );\n        }\n\n\n        /**\n        * getUsername\n        * @description - Getting an username with a given email\n        * @use - this.AccountService.getUsername();\n        * @function\n        * @param {string} email - user's email\n        * @return {angular.IPromise<any>} promise\n        */\n\n        getUsername(email): angular.IPromise<any> {\n            //VARIABLES\n            let url = this.ACCOUNT_GET_USERNAME_URI;\n            let deferred = this.$q.defer();\n            let data = {\n                email: email\n            };\n\n            this.restApi.create({url: url}, data).$promise\n                .then(\n                    function(response) {\n                        deferred.resolve(response);\n                    },\n\n                    function(error) {\n                        DEBUG && console.error(error);\n                        deferred.reject(error);\n                    }\n                );\n\n            return deferred.promise;\n\n        }\n\n    }\n\n    /*-- MODULE DEFINITION --*/\n    angular\n        .module('mainApp.account', [])\n        .service(AccountService.serviceId, AccountService);\n\n}\n"]}