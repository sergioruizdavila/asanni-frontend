{"version":3,"sources":["app/core/s3Upload/s3Upload.service.ts"],"names":[],"mappings":"AAMA,IAAO,GAAG,CAqHT;AArHD,WAAO,GAAG;IAAC,IAAA,IAAI,CAqHd;IArHU,WAAA,IAAI;QAAC,IAAA,QAAQ,CAqHvB;QArHe,WAAA,QAAQ,EAAC,CAAC;YAEtB,YAAY,CAAC;YAeb;gBAuBI,yBAAoB,EAAgB,EAAU,UAAuB;oBAAjD,OAAE,GAAF,EAAE,CAAc;oBAAU,eAAU,GAAV,UAAU,CAAa;oBAEjE,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;oBAE1C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;oBACvC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;oBACnD,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC;oBAC3D,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;oBAIvC,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBAChC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC;wBACd,WAAW,EAAE,IAAI,CAAC,aAAa;wBAC/B,eAAe,EAAE,IAAI,CAAC,iBAAiB;qBAC1C,CAAC,CAAC;oBACH,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC;wBACrB,MAAM,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,UAAU,EAAE,EAAE,EAAE;wBAC/C,WAAW,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE;qBACnC,CAAC,CAAC;gBACP,CAAC;gBAgBD,gCAAM,GAAN,UAAO,IAAI;oBAEP,IAAI,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC;oBAC/B,IAAI,MAAM,GAAG;wBACT,MAAM,EAAE,IAAI,CAAC,MAAM;wBACnB,GAAG,EAAE,IAAI,CAAC,IAAI;wBACd,WAAW,EAAE,IAAI,CAAC,IAAI;wBACtB,IAAI,EAAE,IAAI;qBACb,CAAC;oBACF,IAAI,OAAO,GAAG;wBAEV,QAAQ,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI;wBAC1B,SAAS,EAAE,CAAC;wBAEZ,GAAG,EAAE,2BAA2B;qBACnC,CAAC;oBAIF,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,EAAE,UAAU,GAAG,EAAE,IAAI;wBAClE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4BACN,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;wBACzB,CAAC;wBACD,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBAC3B,CAAC,CAAC,CAAC;oBAOH,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;gBAC5B,CAAC;gBAzFM,yBAAS,GAAG,uCAAuC,CAAC;gBAepD,uBAAO,GAAG,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;gBA4E1C,sBAAC;YAAD,CA7FA,AA6FC,IAAA;YA7FY,wBAAe,kBA6F3B,CAAA;YAGD,OAAO;iBACF,MAAM,CAAC,uBAAuB,EAAE,EAAE,CAAC;iBACnC,OAAO,CAAC,eAAe,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;QAE7D,CAAC,EArHe,QAAQ,GAAR,aAAQ,KAAR,aAAQ,QAqHvB;IAAD,CAAC,EArHU,IAAI,GAAJ,QAAI,KAAJ,QAAI,QAqHd;AAAD,CAAC,EArHM,GAAG,KAAH,GAAG,QAqHT","file":"../../../../www/app/core/s3Upload/s3Upload.service.js","sourcesContent":["/**\n * S3Upload Service\n * @description - Services related on upload files on Amazon AWS S3.\n * @constructor\n */\n\nmodule app.core.s3Upload {\n\n    'use strict';\n\n    declare const AWS: any;\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    export interface IS3UploadService {\n        upload: (file: File) => angular.IPromise<any>;\n    }\n\n\n    /****************************************/\n    /*           CLASS DEFINITION           */\n    /****************************************/\n    export class S3UploadService implements IS3UploadService {\n\n        static serviceId = 'mainApp.core.s3Upload.S3UploadService';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        bucket: any;\n        REGION: string;\n        ACCESS_KEY_ID: string;\n        SECRET_ACCESS_KEY: string;\n        BUCKET: string;\n\n        // --------------------------------\n\n\n        /*-- INJECT DEPENDENCIES --*/\n        static $inject = ['$q', 'dataConfig'];\n\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(private $q: ng.IQService, private dataConfig: IDataConfig) {\n            //LOG\n            console.log('S3Upload service instanced');\n            //CONSTANTS\n            this.REGION = this.dataConfig.regionS3;\n            this.ACCESS_KEY_ID = this.dataConfig.accessKeyIdS3;\n            this.SECRET_ACCESS_KEY = this.dataConfig.secretAccessKeyS3;\n            this.BUCKET = this.dataConfig.bucketS3;\n            /*********************************/\n\n            // Init AWS S3\n            AWS.config.region = this.REGION;\n            AWS.config.update({\n                accessKeyId: this.ACCESS_KEY_ID,\n                secretAccessKey: this.SECRET_ACCESS_KEY\n            });\n            this.bucket = new AWS.S3({\n                params: { Bucket: this.BUCKET, maxRetries: 10 },\n                httpOptions: { timeout: 360000 }\n            });\n        }\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n\n        /**\n        * upload\n        * @description - upload file on Amazon AWS S3\n        * @use - this.S3UploadService.upload(file);\n        * @function\n        * @param {File} file file object\n        * @return {angular.IPromise<any>} promise\n        */\n\n        upload(file): angular.IPromise<any> {\n            //VARIABLES\n            var deferred = this.$q.defer();\n            var params = {\n                Bucket: this.BUCKET,\n                Key: file.name,\n                ContentType: file.type,\n                Body: file\n            };\n            var options = {\n                // Part Size of 10mb\n                partSize: 10 * 1024 * 1024,\n                queueSize: 1,\n                // Give the owner of the bucket full control\n                ACL: 'bucket-owner-full-control'\n            };\n            /*********************************************/\n\n            // Upload file to Amazon S3 Service\n            var uploader = this.bucket.upload(params, options, function (err, data) {\n                if (err) {\n                    deferred.reject(err);\n                }\n                deferred.resolve(data);\n            });\n\n            // Notify Upload process in order to show a loading bar or loading gif\n            /*uploader.on('httpUploadProgress', function (event) {\n                deferred.notify(event);\n            });*/\n\n            return deferred.promise;\n        }\n\n    }\n\n    /*-- MODULE DEFINITION --*/\n    angular\n        .module('mainApp.core.s3Upload', [])\n        .service(S3UploadService.serviceId, S3UploadService);\n\n}\n"]}