{"version":3,"sources":["app/core/restApi/restApi.service.ts"],"names":[],"mappings":"AAKA,IAAO,GAAG,CA+FT;AA/FD,WAAO,GAAG;IAAC,IAAA,IAAI,CA+Fd;IA/FU,WAAA,IAAI;QAAC,IAAA,OAAO,CA+FtB;QA/Fe,WAAA,OAAO,EAAC,CAAC;YAErB,YAAY,CAAC;YAiBb;gBAiBI,wBAAoB,SAAuC,EAC/C,UAAuB;oBADf,cAAS,GAAT,SAAS,CAA8B;gBAE3D,CAAC;gBAKa,kBAAG,GAAjB,UAAkB,SAAS,EAAE,UAAuB;oBAEhD,IAAI,QAAQ,GAAG,SAAS,CAAC,UAAU,CAAC,OAAO,GAAG,UAAU,EAAE,EAAE,GAAG,EAAE,MAAM,EAAC,EACxE;wBACI,IAAI,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,EAAC,EAAE,EAAE,KAAK,EAAC,EAAE;wBAC5C,KAAK,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE;wBACvC,WAAW,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE;wBAC9C,MAAM,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE;wBAC1B,MAAM,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE;wBAChD,MAAM,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE;qBACtD,CAAC,CAAC;oBAEH,MAAM,CAAW,QAAQ,CAAC;gBAE9B,CAAC;gBAjCM,wBAAS,GAAG,qCAAqC,CAAC;gBAIlD,sBAAO,GAAG;oBACb,WAAW;oBACX,YAAY;iBACf,CAAC;gBA4BN,qBAAC;YAAD,CAxCA,AAwCC,IAAA;YAxCY,sBAAc,iBAwC1B,CAAA;YAGD,OAAO;iBACF,MAAM,CAAC,sBAAsB,CAAC;iBAC9B,OAAO,CAAC,cAAc,CAAC,SAAS,EAAE,cAAc,CAAC,GAAG,CAAC;iBACrD,OAAO,CAAC,uBAAuB,EAAE,qBAAqB,CAAC;iBACvD,MAAM,CAAC,SAAS,CAAC,CAAC;YAEnB,SAAS,CAAC,OAAO,GAAG,CAAC,eAAe,CAAC,CAAC;YACtC,qBAAqB,CAAC,OAAO,GAAG,CAAC,IAAI,EAAE,sCAAsC,CAAC,CAAC;YAE/E,mBAAmB,aAAa;gBAC5B,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;YAC7D,CAAC;YAED,+BACY,EAAqB,EACrB,WAA0D;gBAElE,MAAM,CAAC;oBACH,OAAO,EAAE,UAAS,GAAG;wBACjB,GAAG,CAAC,GAAG,GAAG,kBAAkB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;wBACtC,MAAM,CAAC,GAAG,CAAC;oBACf,CAAC;oBACD,YAAY,EAAE,UAAU,SAAS;wBAC7B,MAAM,CAAC,SAAS,CAAC;oBACrB,CAAC;oBACD,QAAQ,EAAE,UAAU,GAAG;wBACnB,MAAM,CAAC,GAAG,CAAC;oBACf,CAAC;iBACJ,CAAA;YAEL,CAAC;QAGT,CAAC,EA/Fe,OAAO,GAAP,YAAO,KAAP,YAAO,QA+FtB;IAAD,CAAC,EA/FU,IAAI,GAAJ,QAAI,KAAJ,QAAI,QA+Fd;AAAD,CAAC,EA/FM,GAAG,KAAH,GAAG,QA+FT","file":"../../../../www/app/core/restApi/restApi.service.js","sourcesContent":["/**\n * RestApiService\n * @description - Rest Api Service\n */\n\nmodule app.core.restApi {\n\n    'use strict';\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    export interface IRestApi extends ng.resource.IResource<any> {\n        show: any;\n        query: any;\n        queryObject: any;\n        create: any;\n        update: any;\n        remove: any;\n    }\n\n    /**********************************/\n    /*         CLASS DEFINITION       */\n    /**********************************/\n    export class RestApiService {\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        static serviceId = 'mainApp.core.restApi.restApiService';\n\n\n        /*-- INJECT DEPENDENCIES--*/\n        static $inject = [\n            '$resource',\n            'dataConfig'\n        ];\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(private $resource: ng.resource.IResourceService,\n                    dataConfig: IDataConfig) {\n        }\n\n        /**********************************/\n        /*               API              */\n        /**********************************/\n        public static Api($resource, dataConfig: IDataConfig): IRestApi {\n\n            var resource = $resource(dataConfig.baseUrl + ':url/:id', { url: '@url'},\n            {\n                show: { method: 'GET', params: {id: '@id'} },\n                query: { method: 'GET', isArray: true },\n                queryObject: { method: 'GET', isArray: false },\n                create: { method: 'POST' },\n                update: { method: 'PUT', params: { id: '@id' } },\n                remove: { method: 'DELETE', params: { id: '@id' } }\n            });\n\n            return <IRestApi>resource;\n\n        }\n\n    }\n\n\n    angular\n        .module('mainApp.core.restApi')\n        .factory(RestApiService.serviceId, RestApiService.Api)\n        .factory('customHttpInterceptor', customHttpInterceptor)\n        .config(configApi);\n\n        configApi.$inject = ['$httpProvider'];\n        customHttpInterceptor.$inject = ['$q', 'mainApp.core.util.messageUtilService'];\n\n        function configApi($httpProvider) {\n            $httpProvider.interceptors.push('customHttpInterceptor');\n        }\n\n        function customHttpInterceptor(\n                    $q: angular.IQService,\n                    messageUtil: app.core.util.messageUtil.IMessageUtilService) {\n\n            return {\n                request: function(req) {\n                    req.url = decodeURIComponent(req.url);\n                    return req;\n                },\n                requestError: function (rejection) {\n                    return rejection;\n                },\n                response: function (res) {\n                    return res;\n                }\n            }\n\n        }\n\n\n}\n"]}