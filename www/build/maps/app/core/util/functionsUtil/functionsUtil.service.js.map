{"version":3,"sources":["app/core/util/functionsUtil/functionsUtil.service.ts"],"names":[],"mappings":"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","file":"../../../../../www/app/core/util/functionsUtil/functionsUtil.service.js","sourcesContent":["/**\n* functionsUtilService\n* @description - Service with util functions used accross the whole application\n* @constructor\n*/\n\nmodule app.core.util.functionsUtil {\n    'use strict';\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    export interface IFunctionsUtilService {\n        normalizeString: (value: string) => string;\n        splitToColumns: (arr: Array<any>, size: number) => Array<any>;\n        buildMapConfig: (dataSet: Array<any>,\n                        mapType: string,\n                        position: components.map.IPosition,\n                        zoom: number) =>  components.map.IMapConfig;\n        generateRangesOfNumbers: (from: number, to:number) => Array<number>;\n        buildNumberSelectList: (from: number, to:number) => Array<app.core.interfaces.ISelectListElement>;\n        dateFormat: (date: string) => string;\n        ageFormat: (date: any) => string;\n        getCurrentLanguage: () => string;\n        generateUsername: (firstName: string, lastName: string) => string;\n        changeLanguage: (language: string) => angular.IPromise<string> ;\n        joinDate: (day:string, month:string, year:string) => string;\n        splitDate: (date:string) => app.core.interfaces.IDateSplitted;\n        progress: (currentStep: number, totalSteps: number) => string;\n        validator: (value: any, validations: Array<Validation>) => IValid;\n        averageNumbersArray: (values: Array<number>) => number;\n        teacherRatingAverage: (ratingsArr: Array<Object>) => number;\n        addUserIndentifyMixpanel: (userId: string) => void;\n        setUserMixpanel: (userData: app.models.user.Profile) => void;\n        setPropertyMixpanel: (property: Object) => void;\n    }\n\n    export interface IValid {\n        valid: boolean;\n        message: string;\n    }\n\n\n    /****************************************/\n    /*      ENUM VALIDATION DEFINITION      */\n    /****************************************/\n\n    export const enum Validation {\n        Email = 0,\n        String = 1,\n        Null = 2,\n        Empty = 3,\n        Number = 4,\n        IsNotZero = 5,\n        Defined = 6,\n        IsTrue = 7,\n        IsNotNaN = 8\n    }\n\n    /****************************************/\n    /*           CLASS DEFINITION           */\n    /****************************************/\n\n    export class FunctionsUtilService implements IFunctionsUtilService {\n\n        static serviceId = 'mainApp.core.util.FunctionsUtilService';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n\n        // --------------------------------\n\n        /*-- INJECT DEPENDENCIES --*/\n        public static $inject = ['$filter',\n                                 'dataConfig',\n                                 '$translate'];\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(private $filter: angular.IFilterService,\n                    private dataConfig: IDataConfig,\n                    private $translate: angular.translate.ITranslateService) {\n            console.log('functionsUtil service called');\n        }\n\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n\n        /**\n        * normalizeString\n        * @description - replace special characters from a string\n        * @use - this.FunctionsUtilService.normalizeString('Fábula Niño');\n        * @function\n        * @param {string} str - string to parse\n        * @return {string} string parsed (e.g. Fabula Nino)\n        */\n        normalizeString(str): string {\n            //VARIABLES\n            let from = \"ÃÀÁÄÂÈÉËÊÌÍÏÎÒÓÖÔÙÚÜÛãàáäâèéëêìíïîòóöôùúüûÑñÇç\";\n            let to = \"AAAAAEEEEIIIIOOOOUUUUaaaaaeeeeiiiioooouuuunncc\";\n            let mapping = {};\n\n            for(var i = 0; i < from.length; i++ )\n              mapping[ from.charAt(i) ] = to.charAt(i);\n\n            var ret = [];\n            for( var i = 0; i < str.length; i++ ) {\n                var c = str.charAt(i);\n                if(mapping.hasOwnProperty(str.charAt(i)))\n                    ret.push(mapping[c]);\n                else\n                    ret.push(c);\n            }\n\n            return ret.join( '' );\n\n        }\n\n\n\n        /**\n        * generateGuid\n        * @description - generate Guid id string\n        * @function\n        * @return {string} guid - Returns an Guid Id string.\n        */\n        public static generateGuid(): string {\n            var fmt = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';\n            var guid = fmt.replace(/[xy]/g, function (c) {\n                var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n                return v.toString(16);\n            });\n            return guid;\n        }\n\n\n        /**\n        * dateFormat\n        * @description - format a date to 'YYYY-MM-DD'\n        * @use - this.FunctionsUtilService.dateFormat('June 10, 2016');\n        * @function\n        * @params {string} date - date to format\n        * @return {string} dateFormatted - date formatted.\n        */\n        dateFormat(date: string): string {\n            //CONSTANTS\n            const DEFAULT_DJANGO_DATE_FORMAT = 'YYYY-MM-DD';\n            //Safari issue with 'YYYY-MM-DD' format\n            const TEMPORAL_FORMAT = 'MM/DD/YYYY';\n            /*****************************/\n\n            let dateTemporalFormatted = moment(date).format(TEMPORAL_FORMAT);\n            let dateFormattedSplit = this.splitDate(dateTemporalFormatted);\n            let dateFormatted = this.joinDate(dateFormattedSplit.day, dateFormattedSplit.month, dateFormattedSplit.year);\n\n            return dateFormatted;\n        }\n\n\n\n        /**\n        * ageFormat\n        * @description - return the current age\n        * @use - this.FunctionsUtilService.ageFormat('1987');\n        * @function\n        * @params {any} year - birth year\n        * @return {string} age - age of user.\n        */\n        ageFormat(year): string {\n            //VARIABLES\n            let currentYear = parseInt(this.dataConfig.currentYear);\n            let birthYear = parseInt(year);\n            let age = currentYear - birthYear;\n\n            return age.toString();\n        }\n\n\n\n        /**\n        * getCurrentLanguage\n        * @description - get current site language\n        * @use - this.FunctionsUtilService.getCurrentLanguage();\n        * @function\n        * @return {string} currentLanguage - current site language code (e.g. 'es', 'en')\n        */\n        getCurrentLanguage(): string {\n             let currentLanguage = this.$translate.use();\n             return currentLanguage;\n        }\n\n\n\n        /**\n        * dateFormat\n        * @description - format a date to 'YYYY-MM-DD'\n        * @use - this.FunctionsUtilService.dateFormat('June 10, 2016');\n        * @function\n        * @param {string} firstName - entity first name\n        * @param {string} lastName - entity last name\n        * @return {string} username - username generated\n        */\n        generateUsername(firstName, lastName): string {\n            //VARIABLES\n            let alias = '';\n            let username = '';\n            let randomCode = '';\n            let minLength = this.dataConfig.usernameMinLength;\n            let maxLength = this.dataConfig.usernameMaxLength;\n\n            //CONSTANTS\n            let ALPHABET = '0123456789';\n            let ID_LENGTH = 7;\n            let REMAINDER = maxLength - ID_LENGTH;\n            let EXTRAS = 2;\n\n            //Replace characters special\n            firstName = this.normalizeString(firstName);\n            //remove space and other characters to firstName\n            firstName = firstName.replace(/[^\\w\\s]/gi, '').replace(/\\s/g, '');\n\n            //Replace characters special\n            lastName = this.normalizeString(lastName);\n            //remove space and other characters to lastName\n            lastName = lastName.replace(/[^\\w\\s]/gi, '').replace(/\\s/g, '');\n\n            /* Validate if firstname is longer than\n               REMAINDER - EXTRAS (1 lastName letter + '-' character)*/\n            if(firstName.length > REMAINDER - EXTRAS) {\n                firstName = firstName.substring(0, REMAINDER - EXTRAS);\n            }\n\n            // Create Alias value\n            alias = (firstName + lastName.substring(0,1)).toLowerCase();\n\n            //Generate random code\n            for (var i = 0; i < ID_LENGTH; i++) {\n                randomCode += ALPHABET.charAt(Math.floor(Math.random() * ALPHABET.length));\n            }\n\n            //build username\n            username = alias + '-' + randomCode;\n\n            return username;\n        }\n\n\n\n        /**\n        * changeLanguage\n        * @description - change site language\n        * @use - this.FunctionsUtilService.changeLanguage('es');\n        * @function\n        * @params {angular.IPromise<string>} language - language code\n        * @return {void}\n        */\n        changeLanguage(language): angular.IPromise<string> {\n            return this.$translate.use(language).then(\n                function(data) {\n                    return data;\n                }\n            );\n        }\n\n\n\n        /**\n        * joinDate\n        * @description - join separate values (day, month and year) and formatting\n        * a date to 'YYYY-MM-DD'\n        * @use - this.FunctionsUtilService.joinDate(obj);\n        * @function\n        * @params {string} day - day value\n        * @params {string} month - month value\n        * @params {string} year - year value\n        * @return {string} dateFormatted - date formatted.\n        */\n        joinDate(day, month, year): string {\n            let newDate = year + '-' + month + '-' + day;\n            //let dateFormatted = moment(newDate).format('YYYY-MM-DD');\n            return newDate;\n        }\n\n\n\n        /**\n        * splitDate\n        * @description - Split Date in 3 parts: day, month and year\n        * @use - this.FunctionsUtilService.splitDate(date);\n        * @function\n        * @params {string} date - date value\n        * @return {app.core.interfaces.IDateSplitted} dateFormatted - date formatted.\n        */\n        splitDate(date): app.core.interfaces.IDateSplitted {\n            //CONSTANTS\n            //Safari issue with 'YYYY-MM-DD' format\n            const TEMPORAL_FORMAT = 'MM/DD/YYYY';\n            /*****************************/\n\n            let dateString = moment(date).format(TEMPORAL_FORMAT).split('/');\n            //Split date to day, month and year\n            let dateFormatted = {\n                day: dateString[1],\n                month: dateString[0],\n                year: dateString[2]\n            };\n\n            return dateFormatted;\n        }\n\n\n\n        /**\n        * splitToColumns\n        * @description - split an array on one parent array with X arrays\n        * @use - this.FunctionsUtilService.splitToColumns(array, 2);\n        * @function\n        * @params {Array<any>} arr - array\n        * @params {number} size - size of new array\n        * @return {Array<any>} newArr - parent array with X arrays inside.\n        */\n        splitToColumns(arr, size) {\n            var newArr = [];\n            for (var i = 0; i < arr.length; i += size) {\n                newArr.push(arr.slice(i, i+size));\n            }\n            return newArr;\n        }\n\n\n\n        /**\n        * buildMapConfig\n        * @description - build each marker on a specific map (based on a dataSet)\n        * @use - this.FunctionsUtilService.buildMapConfig(response,\n                                                          'search-map',\n                                                          {lat: 6.175434,lng: -75.583329});\n        * @function\n        * TODO: Asignar un tipo de datos al Array, ya que esta muy complicado entender que es dataSet\n        * @param {Array<any>} dataSet - dataSet array\n        * @param {string} mapType - map type\n        * @param {components.map.IPosition} position - position on map (lat and lng)\n        * @param {number} zoom - zoom on the mapa\n        * @return {components.map.IMapConfig} mapConfig - google map config.\n        */\n        buildMapConfig(dataSet, mapType, position, zoom): components.map.IMapConfig {\n            //VARIABLES\n            let mapConfig = {\n                type: mapType,\n                data: {\n                    position: position || {lat: 6.175434,lng: -75.583329},\n                    markers: [],\n                    zoom: zoom\n                }\n            };\n\n            if(dataSet) {\n                for (let i = 0; i < dataSet.length; i++) {\n\n                    let markerPosition = null;\n\n                    if(dataSet[i].profile) {\n                        markerPosition = new app.models.user.Position(dataSet[i].profile.location.position);\n                    } else if(dataSet[i].location) {\n                        markerPosition = new app.models.user.Position(dataSet[i].location.position);\n                    }\n\n                    mapConfig.data.markers.push({\n                        id: dataSet[i].id,\n                        position: markerPosition\n                    });\n\n                }\n            }\n\n            return mapConfig;\n        }\n\n\n\n        /**\n        * generateRangesOfNumbers\n        * @description - generate a range of numbers (i.e from 3 until 34)\n        * @use - this.FunctionsUtilService.generateRangesOfNumbers(1, 31);\n        * @function\n        * @params {number} from - start number\n        * @params {number} to - finish number\n        * @return {Array<number>} array - range of numbers array.\n        */\n        generateRangesOfNumbers(from, to): Array<number> {\n            var array = [];\n            for (var i = from; i <= to; i++) {\n                array.push(i);\n            }\n            return array;\n        }\n\n\n\n        /**\n        * buildNumberSelectList\n        * @description - buil numbers (days, years, etc) select list\n        * @use - this.FunctionsUtilService.buildNumberSelect(1, 31);\n        * @function\n        * @params {number} from - start number\n        * @params {number} to - finish number\n        * @return {Array<app.core.interfaces.ISelectList>} list - list format\n        * to use on one select list element\n        */\n        buildNumberSelectList(from, to): Array<app.core.interfaces.ISelectListElement> {\n            let dayRange = this.generateRangesOfNumbers(from, to);\n            let list = [];\n            for (let i = 0; i < dayRange.length; i++) {\n                list.push({value: dayRange[i]});\n            }\n\n            return list;\n        }\n\n\n\n        /**\n        * progress\n        * @description - increase or reduce progress bar width\n        * @param {number} currentStep - current step\n        * @param {number} totalSteps - total steps\n        * @function\n        * @return void\n        */\n        progress(currentStep, totalSteps): string {\n            let percent = (100 / totalSteps) * (currentStep);\n            return percent + '%';\n        }\n\n\n\n        /**\n        * validator\n        * @description - All form's field validate rules\n        * @use - this.FunctionsUtilService.validator('sergioruizdavila@gmail.com',\n                                                     [Validation.Null, Validation.Email]);\n        * @function\n        * @param {any} value - value to validate (string, number, object, etc)\n        * @param {Array<Validation>} validations - list of validations required:\n        * (e.g. Null, String, Email, Number, Empty, etc)\n        * @return {IValid} obj - object with validation result: valid and message\n        */\n        //TODO: Hacer un refactor ya que voy a necesitar validar por min y max,\n        // asi que voy a tener que enviar el min y el max para que aqui lo valide.\n        validator(value, validations = []): IValid {\n            //CONSTANTS\n            const NULL_MESSAGE = this.$filter('translate')('%global.validation.null.message.text');\n            const EMPTY_MESSAGE = this.$filter('translate')('%global.validation.empty.message.text');\n            const DEFINED_MESSAGE = this.$filter('translate')('%global.validation.null.message.text');\n            const IS_NOT_ZERO_MESSAGE = this.$filter('translate')('%global.validation.is_not_zero.message.text');\n            const STRING_MESSAGE = this.$filter('translate')('%global.validation.string.message.text');\n            const NUMBER_MESSAGE = this.$filter('translate')('%global.validation.number.message.text');\n            const EMAIL_MESSAGE = this.$filter('translate')('%global.validation.email.message.text');\n            const TRUE_MESSAGE = this.$filter('translate')('%global.validation.true.message.text');\n            const NAN_MESSAGE = this.$filter('translate')('%global.validation.number.message.text');\n            /*******************************/\n            //VARIABLES\n            let obj = {valid: true, message: 'ok'};\n            /*******************************/\n\n            for (let i = 0; i < validations.length; i++) {\n\n                switch (validations[i]) {\n\n                    case Validation.Email:\n                        let pattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n                        obj.valid = pattern.test(value);\n                        if(obj.valid == false) {\n                            obj.message = EMAIL_MESSAGE;\n                        }\n                        break;\n\n                    case Validation.String:\n                        if(typeof value !== 'string') {\n                            obj.message = STRING_MESSAGE;\n                            obj.valid = false;\n                        }\n                        break;\n\n                    case Validation.Null:\n                        if(value == null) {\n                            obj.message = NULL_MESSAGE;\n                            obj.valid = false;\n                        }\n                        break;\n\n                    case Validation.Empty:\n                        if(value == '') {\n                            obj.message = EMPTY_MESSAGE;\n                            obj.valid = false;\n                        }\n                        break;\n\n                    case Validation.Number:\n                        if(typeof value !== 'number') {\n                            obj.message = NUMBER_MESSAGE;\n                            obj.valid = false;\n                        }\n                        break;\n\n                    case Validation.IsNotZero:\n                        if(parseInt(value) == 0) {\n                            obj.message = IS_NOT_ZERO_MESSAGE;\n                            obj.valid = false;\n                        }\n                        break;\n\n                    case Validation.Defined:\n                        if(value === undefined) {\n                            obj.message = DEFINED_MESSAGE;\n                            obj.valid = false;\n                        }\n                        break;\n\n                    case Validation.IsTrue:\n                        if(value !== true) {\n                            obj.message = TRUE_MESSAGE;\n                            obj.valid = false;\n                        }\n                        break;\n\n                    case Validation.IsNotNaN:\n                        if(isNaN(value)){\n                            obj.message = NAN_MESSAGE;\n                            obj.valid = false;\n                        }\n                        break;\n\n                }\n\n            }\n\n            return obj;\n\n        }\n\n\n\n        /**\n        * External Function: extractCountriesFromHtml\n        * @external\n        * @description Get Countries and Codes from HTML (assets/schemas/countries/countries.html)\n        * @use 1. You have to paste countries html in one app template (i.e. studentPage.html)\n               2. On Dev Console Chrome put:\n        * var countriesList = app.core.util.functionsUtil.FunctionsUtilService.extractCountriesFromHtml()\n        * return on console: countries list Object formatted to i18n json\n        */\n        public static extractCountriesFromHtml(): any {\n            // VARIABLES\n            let countries_json = {};\n            let language = 'EN'; //Change to specific language (ES, EN, etc)\n            let html:any = document.getElementById(\"countriesList.\" + language);\n\n\n            for (let i = 0; i < html.length; i++) {\n                let countryText = html[i].innerText;\n                let countryCode = html[i].attributes[0].nodeValue;\n                countries_json[\"%country.\" + countryCode] = countryText;\n            }\n\n            console.log(JSON.stringify(countries_json));\n        }\n\n\n\n        /**\n        * averageNumbersArray\n        * @description - Calculate numbers array average\n        * @use - this.FunctionsUtilService.averageNumbersArray([1,4,4,5]);\n        * @function\n        * @param {Array<number>} values - list of numbers\n        * @return {number} average - average value\n        */\n        averageNumbersArray(values): number {\n            //VARIABLES\n            let total = 0;\n            let average = 0;\n            let amountValues = values.length;\n            /***************************/\n\n            for (let i = 0; i < values.length; i++) {\n                total = values[i] + total;\n            }\n\n            average = Math.round(total / amountValues);\n\n            return average;\n        }\n\n\n\n        /**\n        * teacherRatingAverage\n        * @description - Calculate teacher rating average based on a ratings list given\n        * @use - this.FunctionsUtilService.teacherRatingAverage(ratingsArray);\n        * @function\n        * @param {Array<Object>} ratingsArr - list of rating objects\n        * @return {number} average - average value\n        */\n        //TODO: Analizar por que puse Array<Object> en vez de Array<Rating>\n        // y solucionar\n        teacherRatingAverage(ratingsArr: Array<Object>): number {\n            //VARIABLES\n            let average = 0;\n            let averageArr = [];\n            let ratings: Array<app.models.teacher.Rating> = [];\n\n            for (let i = 0; i < ratingsArr.length; i++) {\n\n                ratings.push(new app.models.teacher.Rating(ratingsArr[i]));\n\n                let newArr = [\n                    ratings[i].MethodologyValue,\n                    ratings[i].TeachingValue,\n                    ratings[i].CommunicationValue\n                ];\n\n                averageArr.push(this.averageNumbersArray(newArr));\n\n            }\n\n            average = this.averageNumbersArray(averageArr);\n\n            return average;\n        }\n\n\n\n        /**\n        * addUserIndentifyMixpanel\n        * @description - Assign a Identify number to your user on MixPanel\n        * @use - this.FunctionsUtilService.addUserIndentifyMixpanel('1');\n        * @function\n        * @param {app.models.user.Profile} userData - user profile information\n        * @return {void}\n        */\n        addUserIndentifyMixpanel(userId: string): void {\n            mixpanel.identify(userId);\n        }\n\n\n\n        /**\n        * setUserMixpanel\n        * @description - Set User on MixPanel service in order to track his behavior\n        * @use - this.FunctionsUtilService.setUserMixpanel(userObject);\n        * @function\n        * @param {app.models.user.Profile} userData - user profile information\n        * @return {void}\n        */\n        setUserMixpanel(userData: app.models.user.Profile): void {\n            mixpanel.people.set({\n                'username': userData.Username,\n                '$name': userData.FirstName + ' ' + userData.LastName,\n                'gender': userData.Gender,\n                '$email': userData.Email,\n                '$created': userData.DateJoined,\n                '$last_login': new Date()\n            });\n        }\n\n        /**\n        * setPropertyMixpanel\n        * @description - Set new property on user's MixPanel service\n        * @use - this.FunctionsUtilService.setPropertyMixpanel({key: 'value'});\n        * @function\n        * @param {Object} property - new property\n        * @return {void}\n        */\n        //TODO: Probar ya que nunca se uso.\n        setPropertyMixpanel(property: Object): void {\n            let arr = [];\n            arr.push(property);\n            let setData = {};\n            _.mapKeys(arr, function(value, key) {\n                setData[key] = value;\n            });\n\n            mixpanel.people.set(setData);\n        }\n\n\n    }\n\n    /*-- MODULE DEFINITION --*/\n    angular\n    .module('mainApp.core.util', [])\n    .service(FunctionsUtilService.serviceId, FunctionsUtilService);\n\n\n}\n"]}