{"version":3,"sources":["app/pages/editProfile/editProfileLocation/editProfileLocation.controller.ts"],"names":[],"mappings":"AAKA,IAAO,GAAG,CAkbT;AAlbD,WAAO,GAAG;IAAC,IAAA,KAAK,CAkbf;IAlbU,WAAA,KAAK;QAAC,IAAA,mBAAmB,CAkbnC;QAlbgB,WAAA,mBAAmB,EAAC,CAAC;YAkClC;gBAoCI,uCACY,UAAuB,EACvB,WAAyC,EACzC,eAA0E,EAC1E,aAAgE,EAChE,MAA2B,EAC3B,OAA+B,EAC/B,QAAiC,EACjC,MAAsB,EACtB,UAAiD;oBARjD,eAAU,GAAV,UAAU,CAAa;oBACvB,gBAAW,GAAX,WAAW,CAA8B;oBACzC,oBAAe,GAAf,eAAe,CAA2D;oBAC1E,kBAAa,GAAb,aAAa,CAAmD;oBAChE,WAAM,GAAN,MAAM,CAAqB;oBAC3B,YAAO,GAAP,OAAO,CAAwB;oBAC/B,aAAQ,GAAR,QAAQ,CAAyB;oBACjC,WAAM,GAAN,MAAM,CAAgB;oBACtB,eAAU,GAAV,UAAU,CAAuC;oBAEzD,IAAI,CAAC,KAAK,EAAE,CAAC;gBAEjB,CAAC;gBAGO,6CAAK,GAAb;oBAEI,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;oBAG9B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;oBAGpB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;oBAGnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;oBAGnB,IAAI,CAAC,aAAa,GAAG,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAC,CAAC;oBAG3C,IAAI,CAAC,IAAI,GAAG;wBACR,eAAe,EAAE,EAAE;wBACnB,YAAY,EAAE,EAAE;wBAChB,aAAa,EAAE,EAAE;wBACjB,eAAe,EAAE,EAAE;wBACnB,eAAe,EAAE,EAAE;wBACnB,gBAAgB,EAAE,IAAI,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE;qBACnD,CAAC;oBAGF,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE,CAAC;oBAG3D,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,CAC9C,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,IAAI,CACrC,CAAC;oBAGF,IAAI,CAAC,QAAQ,GAAG;wBACZ,eAAe,EAAE,EAAC,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAC;wBAC3C,YAAY,EAAE,EAAC,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAC;wBACxC,aAAa,EAAE,EAAC,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAC;wBACzC,eAAe,EAAE,EAAC,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAC;wBAC3C,eAAe,EAAE,EAAC,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAC;wBAC3C,gBAAgB,EAAE,EAAC,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAC;qBAC/C,CAAC;oBAEF,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACpB,CAAC;gBAGD,gDAAQ,GAAR;oBAEI,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAC;oBAG/D,IAAI,CAAC,kBAAkB,EAAE,CAAC;oBAG1B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;gBAChD,CAAC;gBAWD,qDAAa,GAAb;oBACI,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,wBAAwB,CAAC,CAAC;gBAC7C,CAAC;gBASD,uDAAe,GAAf;oBACI,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,4BAA4B,CAAC,CAAC;gBACjD,CAAC;gBAYO,iDAAS,GAAjB,UAAkB,IAA6B;oBAC3C,IAAI,CAAC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;oBAClD,IAAI,CAAC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;oBAC5C,IAAI,CAAC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;oBAC9C,IAAI,CAAC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;oBAElD,IAAI,CAAC,aAAa,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;oBAEhD,IAAI,CAAC,IAAI,CAAC,gBAAgB,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;oBAElF,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,CAC9C;wBACI;4BACI,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE;4BACjC,QAAQ,EAAE;gCACN,QAAQ,EAAE;oCACN,GAAG,EAAE,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC;oCAC/C,GAAG,EAAE,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC;iCAClD;6BACJ;yBACJ;qBACJ,EACD,gBAAgB,EAChB,EAAC,GAAG,EAAE,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAAC,EAClG,IAAI,CACP,CAAC;oBAQF,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,cAAc,EAAE,EAAC,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,YAAY,EAAE,OAAO,EAAC,CAAC,CAAC;gBAC/F,CAAC;gBAWO,6DAAqB,GAA7B;oBAEI,IAAM,SAAS,GAAG,CAA2C,CAAC;oBAC9D,IAAM,UAAU,GAAG,CAA4C,CAAC;oBAChE,IAAM,WAAW,GAAG,CAA6C,CAAC;oBAIlE,IAAI,SAAS,GAAG,IAAI,CAAC;oBAGrB,IAAI,aAAa,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;oBAC5C,IAAI,CAAC,QAAQ,CAAC,eAAe,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;oBACrG,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;wBACtC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC;oBACpD,CAAC;oBAGD,IAAI,UAAU,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;oBACzC,IAAI,CAAC,QAAQ,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;oBAC9F,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;wBACnC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC;oBACjD,CAAC;oBAGD,IAAI,WAAW,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;oBAC1C,IAAI,CAAC,QAAQ,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;oBACjG,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;wBACpC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC;oBAClD,CAAC;oBAGD,IAAI,aAAa,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;oBAC5C,IAAI,CAAC,QAAQ,CAAC,eAAe,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;oBACvG,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;wBACtC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC;oBACpD,CAAC;oBAGD,IAAI,cAAc,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;oBAC7C,IAAI,WAAW,GAAE,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;oBAC9F,IAAI,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;oBAC/F,EAAE,CAAA,CAAC,CAAC,WAAW,CAAC,KAAK,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;wBAC1C,EAAE,CAAA,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;4BACpB,IAAI,CAAC,QAAQ,CAAC,gBAAgB,GAAG,WAAW,CAAC;4BAC7C,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,KAAK,CAAC;wBACrD,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAA,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;4BAC3B,IAAI,CAAC,QAAQ,CAAC,gBAAgB,GAAG,WAAW,CAAC;4BAC7C,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,KAAK,CAAC;wBACrD,CAAC;oBACL,CAAC;oBAED,MAAM,CAAC,SAAS,CAAC;gBACrB,CAAC;gBAYD,yDAAiB,GAAjB;oBAEI,IAAI,IAAI,GAAG,IAAI,CAAC;oBAChB,IAAI,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;oBAG1C,IAAI,CAAC,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC;oBAExC,IAAI,QAAQ,GAAG;wBACX,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,eAAe;wBAClC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,YAAY;wBAC5B,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,eAAe;qBACrC,CAAC;oBAGF,IAAI,CAAC,QAAQ,CAAC;wBACV,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;oBACpD,CAAC,CAAC,CAAC;gBAEP,CAAC;gBAWO,4DAAoB,GAA5B;oBAEI,IAAI,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;oBAG1C,IAAI,CAAC,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC;oBAExC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC;oBACzE,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC;oBACzE,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;oBACnE,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC;oBACrE,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC;oBACzE,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC;gBAC/E,CAAC;gBAUD,2DAAmB,GAAnB;oBAEI,IAAI,IAAI,GAAG,IAAI,CAAC;oBAEhB,IAAI,SAAS,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;oBAE7C,EAAE,CAAA,CAAC,SAAS,CAAC,CAAC,CAAC;wBAEX,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;wBACnB,IAAI,CAAC,oBAAoB,EAAE,CAAC;wBAC5B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;oBAC3C,CAAC;oBAAC,IAAI,CAAC,CAAC;wBAEJ,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC1B,CAAC;gBACL,CAAC;gBAYO,0DAAkB,GAA1B;oBAEI,IAAI,IAAI,GAAG,IAAI,CAAC;oBAWhB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,UAAS,KAAK,EAAE,IAAI;wBAC5C,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;wBAC1C,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;oBAC9C,CAAC,CAAC,CAAC;oBAUH,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,wBAAwB,EACpC,UAAS,KAAK,EAAE,IAAI;wBAChB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;wBACnB,EAAE,CAAA,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC;4BAClB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;wBACzB,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;wBACtB,CAAC;oBACL,CAAC,CACJ,CAAC;oBASF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,EACnB,UAAS,KAAK,EAAE,IAAI;wBAEhB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;wBACpB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;wBACnB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;wBAElB,IAAI,CAAC,QAAQ,CAAC;4BACV,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;wBACvB,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;oBAC/B,CAAC,CACJ,CAAC;gBACN,CAAC;gBArYM,0CAAY,GAAG,yDAAyD,CAAC;gBAmBlE,qCAAO,GAAG;oBACpB,YAAY;oBACZ,iCAAiC;oBACjC,4CAA4C;oBAC5C,wCAAwC;oBACxC,QAAQ;oBACR,SAAS;oBACT,UAAU;oBACV,QAAQ;oBACR,YAAY;iBACf,CAAC;gBA0WN,oCAAC;YAAD,CAzYA,AAyYC,IAAA;YAzYY,iDAA6B,gCAyYzC,CAAA;YAGD,OAAO;iBACF,MAAM,CAAC,2BAA2B,CAAC;iBACnC,UAAU,CAAC,6BAA6B,CAAC,YAAY,EAAE,6BAA6B,CAAC,CAAC;QAE/F,CAAC,EAlbgB,mBAAmB,GAAnB,yBAAmB,KAAnB,yBAAmB,QAkbnC;IAAD,CAAC,EAlbU,KAAK,GAAL,SAAK,KAAL,SAAK,QAkbf;AAAD,CAAC,EAlbM,GAAG,KAAH,GAAG,QAkbT","file":"../../../../../www/app/pages/editProfile/editProfileLocation/editProfileLocation.controller.js","sourcesContent":["/**\n * EditProfileLocationController\n * @description - Edit User Location Profile Page Controller\n */\n\nmodule app.pages.editProfileLocation {\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    export interface IEditProfileLocationController {\n        form: IEditProfileLocationForm;\n        validate: IEditProfileLocationValidate;\n        activate: () => void;\n        goToEditMedia: () => void;\n        goToEditProfile: () => void;\n    }\n\n    export interface IEditProfileLocationForm {\n        countryLocation: string;\n        addressLocation: string;\n        cityLocation: string;\n        stateLocation: string;\n        zipCodeLocation: string;\n        positionLocation: app.models.user.Position;\n    }\n\n    interface IEditProfileLocationValidate {\n        countryLocation: app.core.util.functionsUtil.IValid;\n        addressLocation: app.core.util.functionsUtil.IValid;\n        cityLocation: app.core.util.functionsUtil.IValid;\n        stateLocation: app.core.util.functionsUtil.IValid;\n        zipCodeLocation: app.core.util.functionsUtil.IValid;\n        positionLocation: app.core.util.functionsUtil.IValid;\n    }\n\n    /****************************************/\n    /*           CLASS DEFINITION           */\n    /****************************************/\n    export class EditProfileLocationController implements IEditProfileLocationController {\n\n        static controllerId = 'mainApp.pages.editProfile.EditProfileLocationController';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        form: IEditProfileLocationForm;\n        validate: IEditProfileLocationValidate;\n        saving: boolean;\n        saved: boolean;\n        error: boolean;\n        geocoder: google.maps.Geocoder;\n        mapConfig: components.map.IMapConfig;\n        listCountries: Array<app.core.interfaces.IDataFromJsonI18n>;\n        countryObject: app.core.interfaces.IDataFromJsonI18n;\n        TIME_SHOW_MESSAGE: number;\n        // --------------------------------\n\n\n        /*-- INJECT DEPENDENCIES --*/\n        public static $inject = [\n            'dataConfig',\n            'mainApp.models.user.UserService',\n            'mainApp.core.util.GetDataStaticJsonService',\n            'mainApp.core.util.FunctionsUtilService',\n            '$state',\n            '$filter',\n            '$timeout',\n            '$scope',\n            '$rootScope'\n        ];\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(\n            private dataConfig: IDataConfig,\n            private userService: app.models.user.IUserService,\n            private getDataFromJson: app.core.util.getDataStaticJson.IGetDataStaticJsonService,\n            private functionsUtil: app.core.util.functionsUtil.IFunctionsUtilService,\n            private $state: ng.ui.IStateService,\n            private $filter: angular.IFilterService,\n            private $timeout: angular.ITimeoutService,\n            private $scope: angular.IScope,\n            private $rootScope: app.core.interfaces.IMainAppRootScope) {\n\n            this._init();\n\n        }\n\n        /*-- INITIALIZE METHOD --*/\n        private _init() {\n            //CONSTANTS\n            this.TIME_SHOW_MESSAGE = 6000;\n\n            // Init saving loading\n            this.saving = false;\n\n            // Init saved message\n            this.saved = false;\n\n            // Init error message\n            this.error = false;\n\n            // Country Select List Structure\n            this.countryObject = {code: '', value: ''};\n\n            //Init form\n            this.form = {\n                countryLocation: '',\n                cityLocation: '',\n                stateLocation: '',\n                addressLocation: '',\n                zipCodeLocation: '',\n                positionLocation: new app.models.user.Position()\n            };\n\n            // Build Countries select lists\n            this.listCountries = this.getDataFromJson.getCountryi18n();\n\n            // Init Map\n            this.mapConfig = this.functionsUtil.buildMapConfig(\n                null, 'drag-maker-map', null, null\n            );\n\n            // Build validate object fields\n            this.validate = {\n                countryLocation: {valid: true, message: ''},\n                cityLocation: {valid: true, message: ''},\n                stateLocation: {valid: true, message: ''},\n                addressLocation: {valid: true, message: ''},\n                zipCodeLocation: {valid: true, message: ''},\n                positionLocation: {valid: true, message: ''}\n            };\n\n            this.activate();\n        }\n\n        /*-- ACTIVATE METHOD --*/\n        activate(): void {\n            //LOG\n            DEBUG && console.log('EditProfileLocation controller actived');\n\n            //SUBSCRIBE TO EVENTS\n            this._subscribeToEvents();\n\n            //FILL FORM FROM ROOTSCOPE USER INFO\n            this._fillForm(this.$rootScope.profileData);\n        }\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n        /*\n        * Go to edit media page\n        * @description this method is launched when user press 'Edit Photo' menu\n        * option\n        */\n        goToEditMedia(): void {\n            this.$state.go('page.editProfile.media');\n        }\n\n\n\n        /*\n        * Go to edit profile page\n        * @description this method is launched when user press 'Edit Location' menu\n        * option\n        */\n        goToEditProfile(): void {\n            this.$state.go('page.editProfile.basicInfo');\n        }\n\n\n\n        /**\n        * _fillForm\n        * @description - Fill form with user location data\n        * @use - this._fillForm(data);\n        * @function\n        * @param {app.models.user.Profile} data - Profile Data\n        * @return {void}\n        */\n        private _fillForm(data: app.models.user.Profile): void {\n            this.form.addressLocation = data.Location.Address;\n            this.form.cityLocation = data.Location.City;\n            this.form.stateLocation = data.Location.State;\n            this.form.zipCodeLocation = data.Location.ZipCode;\n            //Charge Country on select List\n            this.countryObject.code = data.Location.Country;\n            //Current Map Position\n            this.form.positionLocation = new app.models.user.Position(data.Location.Position);\n\n            this.mapConfig = this.functionsUtil.buildMapConfig(\n                [\n                    {\n                        id: this.form.positionLocation.Id,\n                        location: {\n                            position: {\n                                lat: parseFloat(this.form.positionLocation.Lat),\n                                lng: parseFloat(this.form.positionLocation.Lng)\n                            }\n                        }\n                    }\n                ],\n                'drag-maker-map',\n                {lat: parseFloat(this.form.positionLocation.Lat), lng: parseFloat(this.form.positionLocation.Lng)},\n                null\n            );\n\n            /*\n            * Send event to child (MapController) in order to It draws\n            * each Marker on the Map\n            */\n            //LEGACY\n            //this.$scope.$broadcast('BuildMarkers', this.mapConfig);\n            this.$scope.$broadcast('BuildMarkers', {mapConfig: this.mapConfig, typeOfMarker: 'round'});\n        }\n\n\n\n        /**\n        * _validateLocationForm\n        * @description - Validate each field on location's form\n        * @use - this._validateLocationForm();\n        * @function\n        * @return {boolean} formValid - return If the complete form is valid or not.\n        */\n        private _validateLocationForm(): boolean {\n            //CONSTANTS\n            const NULL_ENUM = app.core.util.functionsUtil.Validation.Null;\n            const EMPTY_ENUM = app.core.util.functionsUtil.Validation.Empty;\n            const NUMBER_ENUM = app.core.util.functionsUtil.Validation.Number;\n\n            /***************************************************/\n            //VARIABLES\n            let formValid = true;\n\n            //Validate Country field\n            let country_rules = [NULL_ENUM, EMPTY_ENUM];\n            this.validate.countryLocation = this.functionsUtil.validator(this.countryObject.code, country_rules);\n            if(!this.validate.countryLocation.valid) {\n                formValid = this.validate.countryLocation.valid;\n            }\n\n            //Validate City field\n            let city_rules = [NULL_ENUM, EMPTY_ENUM];\n            this.validate.cityLocation = this.functionsUtil.validator(this.form.cityLocation, city_rules);\n            if(!this.validate.cityLocation.valid) {\n                formValid = this.validate.cityLocation.valid;\n            }\n\n            //Validate State field\n            let state_rules = [NULL_ENUM, EMPTY_ENUM];\n            this.validate.stateLocation = this.functionsUtil.validator(this.form.stateLocation, state_rules);\n            if(!this.validate.stateLocation.valid) {\n                formValid = this.validate.stateLocation.valid;\n            }\n\n            //Validate Address field\n            let address_rules = [NULL_ENUM, EMPTY_ENUM];\n            this.validate.addressLocation = this.functionsUtil.validator(this.form.addressLocation, address_rules);\n            if(!this.validate.addressLocation.valid) {\n                formValid = this.validate.addressLocation.valid;\n            }\n\n            //Validate Position on Map\n            let position_rules = [NULL_ENUM, EMPTY_ENUM];\n            let latValidate= this.functionsUtil.validator(this.form.positionLocation.Lat, position_rules);\n            let lngValidate = this.functionsUtil.validator(this.form.positionLocation.Lng, position_rules);\n            if(!latValidate.valid || !lngValidate.valid) {\n                if(!latValidate.valid) {\n                    this.validate.positionLocation = latValidate;\n                    formValid = this.validate.positionLocation.valid;\n                } else if(!lngValidate.valid) {\n                    this.validate.positionLocation = lngValidate;\n                    formValid = this.validate.positionLocation.valid;\n                }\n            }\n\n            return formValid;\n        }\n\n\n\n        /**\n        * changeMapPosition\n        * @description -\n        * @use - this.changeMapPosition();\n        * @function\n        * @param {string} - change map position\n        * @return {void}\n        */\n        changeMapPosition(): void {\n            //VARIABLES\n            let self = this;\n            let countryCode = this.countryObject.code;\n            /*********************************/\n\n            this.form.countryLocation = countryCode;\n\n            let location = {\n                country: this.form.countryLocation,\n                city: this.form.cityLocation,\n                address: this.form.addressLocation\n            };\n            /************************************/\n\n            this.$timeout(function(){\n                self.$scope.$broadcast('CodeAddress', location);\n            });\n\n        }\n\n\n\n        /**\n        * _setLocationFromForm\n        * @description - get data from form's input in order to put it on $parent.teacherData\n        * @use - this._setLocationFromForm();\n        * @function\n        * @return {void}\n        */\n        private _setLocationFromForm(): void {\n            //VARIABLES\n            let countryCode = this.countryObject.code;\n            /*********************************/\n\n            this.form.countryLocation = countryCode;\n            // Send data to parent (createTeacherPage)\n            this.$rootScope.profileData.Location.Country = this.form.countryLocation;\n            this.$rootScope.profileData.Location.Address = this.form.addressLocation;\n            this.$rootScope.profileData.Location.City = this.form.cityLocation;\n            this.$rootScope.profileData.Location.State = this.form.stateLocation;\n            this.$rootScope.profileData.Location.ZipCode = this.form.zipCodeLocation;\n            this.$rootScope.profileData.Location.Position = this.form.positionLocation;\n        }\n\n\n\n        /**\n        * saveLocationSection\n        * @description - Update profile's location data calling to save method\n        * @function\n        * @return void\n        */\n        saveLocationSection(): void {\n            //VARIABLES\n            let self = this;\n            //Validate data form\n            let formValid = this._validateLocationForm();\n\n            if(formValid) {\n                //loading On\n                this.saving = true;\n                this._setLocationFromForm();\n                this.$scope.$emit('Save Profile Data');\n            } else {\n                //Go top pages\n                window.scrollTo(0, 0);\n            }\n        }\n\n\n\n        /**\n        * _subscribeToEvents\n        * @description - this method subscribes User Basic Info Section\n        * to Parent Events\n        * @use - this._subscribeToEvents();\n        * @function\n        * @return {void}\n        */\n        private _subscribeToEvents(): void {\n            //VARIABLES\n            let self = this;\n\n\n            /**\n            * Return Position\n            * @child - MapController\n            * @description - Parent (UserEditLocationPageController) receive\n                             Child's event (MapController) with new position on\n                             map (lng, lat)\n            * @event\n            */\n            this.$scope.$on('Position', function(event, args) {\n                self.form.positionLocation.Lng = args.lng;\n                self.form.positionLocation.Lat = args.lat;\n            });\n\n\n            /**\n            * Fill Form event\n            * @parent - EditUserController\n            * @description - Parent send user profile data in order to\n            * Child fill the form's field\n            * @event\n            */\n            this.$scope.$on('Fill User Profile Form',\n                function(event, args) {\n                    self.error = false;\n                    if(args !== 'error') {\n                        self._fillForm(args);\n                    } else {\n                        self.error = true;\n                    }\n                }\n            );\n\n\n            /**\n            * Saved event\n            * @parent - EditProfileController\n            * @description - Parent notify that data was saved successful\n            * @event\n            */\n            this.$scope.$on('Saved',\n                function(event, args) {\n                    //loading Off\n                    self.saving = false;\n                    self.error = false;\n                    self.saved = true;\n\n                    self.$timeout(function() {\n                        self.saved = false;\n                    }, self.TIME_SHOW_MESSAGE);\n                }\n            );\n        }\n\n    }\n\n    /*-- MODULE DEFINITION --*/\n    angular\n        .module('mainApp.pages.editProfile')\n        .controller(EditProfileLocationController.controllerId, EditProfileLocationController);\n\n}\n"]}