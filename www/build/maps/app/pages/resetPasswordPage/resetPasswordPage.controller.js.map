{"version":3,"sources":["app/pages/resetPasswordPage/resetPasswordPage.controller.ts"],"names":[],"mappings":"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","file":"../../../../www/app/pages/resetPasswordPage/resetPasswordPage.controller.js","sourcesContent":["/**\n * ResetPasswordPageController\n * @description - Create Teacher Page Controller\n */\n\nmodule app.pages.resetPasswordPage {\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    export interface IResetPasswordPageController {\n        form: IResetPasswordForm;\n        validate: IResetPasswordValidate;\n        activate: () => void;\n    }\n\n    interface IResetPasswordForm {\n        newPassword1: string;\n        newPassword2: string;\n    }\n\n    interface IResetPasswordValidate {\n        newPassword1: app.core.util.functionsUtil.IValid;\n        newPassword2: app.core.util.functionsUtil.IValid;\n        globalValidate: app.core.util.functionsUtil.IValid;\n    }\n\n    /********************************/\n    /*    STATEPARAMS INTERFACES    */\n    /********************************/\n    interface IResetPasswordParams extends app.core.interfaces.IStateParamsData {\n        uid: string;\n        token: string;\n    }\n\n    /****************************************/\n    /*           CLASS DEFINITION           */\n    /****************************************/\n    export class ResetPasswordPageController implements IResetPasswordPageController {\n\n        static controllerId = 'mainApp.pages.resetPasswordPage.ResetPasswordPageController';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        uid: string;\n        token: string;\n        form: IResetPasswordForm;\n        validate: IResetPasswordValidate;\n        passwordMinLength: number;\n        passwordMaxLength: number;\n        saving: boolean;\n        // --------------------------------\n\n\n        /*-- INJECT DEPENDENCIES --*/\n        public static $inject = [\n            '$state',\n            'dataConfig',\n            '$filter',\n            '$stateParams',\n            'mainApp.auth.AuthService',\n            'mainApp.core.util.FunctionsUtilService',\n            'mainApp.core.util.messageUtilService'\n        ];\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(\n            private $state: ng.ui.IStateService,\n            private dataConfig: IDataConfig,\n            private $filter: angular.IFilterService,\n            private $stateParams: IResetPasswordParams,\n            private AuthService: app.auth.IAuthService,\n            private functionsUtil: app.core.util.functionsUtil.IFunctionsUtilService,\n            private messageUtil: app.core.util.messageUtil.IMessageUtilService\n        ) {\n\n            this._init();\n\n        }\n\n        /*-- INITIALIZE METHOD --*/\n        private _init() {\n            //VARIABLES\n            let self = this;\n\n            // Init saving loading\n            this.saving = false;\n\n            this.uid = this.$stateParams.uid;\n\n            this.token = this.$stateParams.token;\n\n            // Password min length\n            this.passwordMinLength = this.dataConfig.passwordMinLength;\n\n            // Password max length\n            this.passwordMaxLength = this.dataConfig.passwordMaxLength;\n\n            //Init form\n            this.form = {\n                newPassword1: '',\n                newPassword2: ''\n            };\n\n            // Build validate object fields\n            this.validate = {\n                newPassword1: {valid: true, message: ''},\n                newPassword2: {valid: true, message: ''},\n                globalValidate: {valid: true, message: ''}\n            };\n\n            this.activate();\n        }\n\n        /*-- ACTIVATE METHOD --*/\n        activate(): void {\n            //CONSTANTS\n            const ENTER_MIXPANEL = 'Enter: Reset Password Page';\n            //VARIABLES\n            let self = this;\n\n            //LOG\n            console.log('resetPasswordPage controller actived');\n            //MIXPANEL\n            mixpanel.track(ENTER_MIXPANEL, {\n                \"uid\": this.uid || '*',\n                \"token\": this.token || '*'\n            });\n\n        }\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n\n        /**\n        * _validateForm\n        * @description - Validate each field on form\n        * @use - this._validateForm();\n        * @function\n        * @return {boolean} formValid - return If the complete form is valid or not.\n        */\n        private _validateForm(): boolean {\n            //CONSTANTS\n            const NULL_ENUM = app.core.util.functionsUtil.Validation.Null;\n            const EMPTY_ENUM = app.core.util.functionsUtil.Validation.Empty;\n            const PASSWORD_MESSAGE = this.$filter('translate')('%recover.password.not_match.text');\n            /***************************************************/\n\n            //VARIABLES\n            let formValid = true;\n            let password_rules = [NULL_ENUM, EMPTY_ENUM];\n\n            //Validate New Password field\n            this.validate.newPassword1 = this.functionsUtil.validator(this.form.newPassword1, password_rules);\n            if(!this.validate.newPassword1.valid) {\n                formValid = this.validate.newPassword1.valid;\n            }\n\n            //Validate Confirm Password field\n            this.validate.newPassword2 = this.functionsUtil.validator(this.form.newPassword2, password_rules);\n            if(!this.validate.newPassword2.valid) {\n                formValid = this.validate.newPassword2.valid;\n            }\n\n            //Validate if both password are equal\n            if(this.form.newPassword1 !== this.form.newPassword2) {\n                formValid = false;\n                this.validate.globalValidate.valid = false;\n                this.validate.globalValidate.message = PASSWORD_MESSAGE;\n            }\n\n            return formValid;\n        }\n\n\n\n        /**\n        * _changePassword\n        * @description - Send change password request to Auth DB\n        * @use - this._changePassword();\n        * @function\n        * @return {void}\n        */\n        private _changePassword(): void {\n            //CONSTANTS\n            const SUCCESS_CHANGE_PROCESS = this.$filter('translate')('%recover.password.success.text');\n            const LINK_EXPIRED = this.$filter('translate')('%recover.password.link_expired.text');\n            const PASSWORD_COMMON = this.$filter('translate')('%recover.password.password_common.text');\n\n            //VARIABLES\n            let self = this;\n\n            let formValid = this._validateForm();\n\n            if(formValid) {\n\n                this.validate.globalValidate.valid = true;\n\n                //loading On\n                this.saving = true;\n\n                this.AuthService.confirmResetPassword(\n                    self.uid,\n                    self.token,\n                    self.form.newPassword1,\n                    self.form.newPassword2).then(\n                        //Success\n                        function(response) {\n                            //loading Off\n                            self.saving = false;\n                            self.messageUtil.success(SUCCESS_CHANGE_PROCESS);\n                            self.$state.go('page.landingPage',{showLogin: true}, {reload: true});\n                        },\n\n                        //Error\n                        function(error) {\n                            //loading Off\n                            self.saving = false;\n                            self.validate.globalValidate.valid = false;\n                            if(error.data) {\n                                if(error.data.token) {\n                                    if(error.data.token[0] === 'Invalid value'){\n                                        self.validate.globalValidate.message = LINK_EXPIRED;\n                                    } else {\n                                        self.messageUtil.error('');\n                                    }\n                                } else if(error.data.newPassword2) {\n                                    self.validate.globalValidate.message = PASSWORD_COMMON;\n                                } else {\n                                    self.messageUtil.error('');\n                                }\n                            }\n                        }\n                    );\n\n            }\n\n        }\n\n    }\n\n\n    /*-- MODULE DEFINITION --*/\n    angular\n        .module('mainApp.pages.resetPasswordPage')\n        .controller(ResetPasswordPageController.controllerId,\n                    ResetPasswordPageController);\n\n}\n"]}