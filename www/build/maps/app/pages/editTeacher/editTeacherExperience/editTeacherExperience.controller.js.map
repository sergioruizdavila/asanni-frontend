{"version":3,"sources":["app/pages/editTeacher/editTeacherExperience/editTeacherExperience.controller.ts"],"names":[],"mappings":"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","file":"../../../../../www/app/pages/editTeacher/editTeacherExperience/editTeacherExperience.controller.js","sourcesContent":["/**\n * EditTeacherExperienceController\n * @description - Edit Teacher Experience Section Controller (edit teacher)\n */\n\nmodule app.pages.editTeacher {\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    export interface IEditTeacherExperienceController {\n        form: IEditTeacherExperienceForm;\n        validate: IEditTeacherExperienceValidate;\n        activate: () => void;\n    }\n\n    export interface IEditTeacherExperienceForm {\n        type: string;\n        experiences: Array<app.models.teacher.Experience>;\n    }\n\n    interface IEditTeacherExperienceValidate {\n        type: app.core.util.functionsUtil.IValid;\n        teacherSince: app.core.util.functionsUtil.IValid;\n        experiences: app.core.util.functionsUtil.IValid;\n    }\n\n    /****************************************/\n    /*           CLASS DEFINITION           */\n    /****************************************/\n    export class EditTeacherExperienceController implements IEditTeacherExperienceController {\n\n        static controllerId = 'mainApp.pages.editTeacher.EditTeacherExperienceController';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        form: IEditTeacherExperienceForm;\n        saving: boolean;\n        saved: boolean;\n        error: boolean;\n        validate: IEditTeacherExperienceValidate;\n        helpText: app.core.interfaces.IHelpTextStep;\n        listYears: Array<app.core.interfaces.ISelectListElement>;\n        yearObject: app.core.interfaces.ISelectListElement;\n        private _hobbyChecked: any;\n        private _professionalChecked: any;\n        HELP_TEXT_TITLE: string;\n        HELP_TEXT_DESCRIPTION: string;\n        TIME_SHOW_MESSAGE: number;\n        // --------------------------------\n\n\n        /*-- INJECT DEPENDENCIES --*/\n        public static $inject = [\n            'dataConfig',\n            'mainApp.core.util.GetDataStaticJsonService',\n            'mainApp.core.util.FunctionsUtilService',\n            '$timeout',\n            '$filter',\n            '$scope',\n            '$rootScope',\n            '$uibModal'\n        ];\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(\n            private dataConfig: IDataConfig,\n            private getDataFromJson: app.core.util.getDataStaticJson.IGetDataStaticJsonService,\n            private functionsUtilService: app.core.util.functionsUtil.IFunctionsUtilService,\n            private $timeout: angular.ITimeoutService,\n            private $filter: angular.IFilterService,\n            private $scope: angular.IScope,\n            private $rootScope: app.core.interfaces.IMainAppRootScope,\n            private $uibModal: ng.ui.bootstrap.IModalService) {\n                this._init();\n        }\n\n        /*-- INITIALIZE METHOD --*/\n        private _init() {\n            //CONSTANTS\n            this.TIME_SHOW_MESSAGE = 6000;\n            this.HELP_TEXT_TITLE = this.$filter('translate')('%create.teacher.experience.help_text.title.text');\n            this.HELP_TEXT_DESCRIPTION = this.$filter('translate')('%create.teacher.experience.help_text.description.text');\n            /*********************************/\n\n            // Init saving loading\n            this.saving = false;\n\n            // Init saved message\n            this.saved = false;\n\n            // Init error message\n            this.error = false;\n\n            //Put Help Text Default\n            this.helpText = {\n                title: this.HELP_TEXT_TITLE,\n                description: this.HELP_TEXT_DESCRIPTION\n            };\n\n            //Init form\n            this.form = {\n                type: 'H',\n                experiences: []\n            };\n\n            // Current Year\n            let currentYear = parseInt(this.dataConfig.currentYear);\n\n            // Build Years select lists\n            this.listYears = this.functionsUtilService.buildNumberSelectList(1957, currentYear);\n\n            //\n            this.yearObject = {value: ''};\n\n            // Init type of teacher checks\n            this._hobbyChecked = {type:'H', checked: true};\n            this._professionalChecked = {type:'P', checked: false};\n\n            // Build validate object fields\n            this.validate = {\n                type: {valid: true, message: ''},\n                teacherSince: {valid: true, message: ''},\n                experiences: {valid: true, message: ''}\n            };\n\n            this.activate();\n        }\n\n        /*-- ACTIVATE METHOD --*/\n        activate(): void {\n            //LOG\n            DEBUG && console.log('EditTeacherExperienceController controller actived');\n\n            //SUBSCRIBE TO EVENTS\n            this._subscribeToEvents();\n\n            //FILL FORM FROM ROOTSCOPE TEACHER INFO\n            if(this.$rootScope.teacherData) {\n                this._fillForm(this.$rootScope.teacherData);\n            }\n\n        }\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n        /**\n        * saveExperienceSection\n        * @description - save teacher experiences (update teacher data on DB)\n        * @function\n        * @return void\n        */\n        saveExperienceSection(): void {\n            //Validate data form\n            let formValid = this._validateForm();\n\n            if(formValid) {\n                //loading On\n                this.saving = true;\n                this._setDataModelFromForm();\n                this.$scope.$emit('Save Data');\n            } else {\n                //Go top pages\n                window.scrollTo(0, 0);\n            }\n        }\n\n\n\n        /**\n        * _checkType\n        * @description - select a type of teacher\n        * @use - this._checkType();\n        * @function\n        * @param {key} option - type of teacher option selected by user\n        * @return {void}\n        */\n        private _checkType(key): void {\n            let type = key.type;\n            if(type === 'H') {\n                this._professionalChecked.checked = false;\n                this._hobbyChecked.checked = true;\n                this.form.type = this._hobbyChecked.type;\n            } else {\n                this._professionalChecked.checked = true;\n                this._hobbyChecked.checked = false;\n                this.form.type = this._professionalChecked.type;\n            }\n        }\n\n\n\n        /**\n        * _fillForm\n        * @description - Fill form with teacher data\n        * @use - this._fillForm(data);\n        * @function\n        * @param {app.models.teacher.Teacher} data - Teacher Data\n        * @return {void}\n        */\n        private _fillForm(data: app.models.teacher.Teacher): void {\n            this.form.type = data.Type || 'H';\n            if(this.form.type === 'H') {\n                this._professionalChecked.checked = false;\n                this._hobbyChecked.checked = true;\n            } else {\n                this._professionalChecked.checked = true;\n                this._hobbyChecked.checked = false;\n            }\n\n            this.yearObject.value = data.TeacherSince;\n\n            this.form.experiences = data.Experiences;\n        }\n\n\n\n        /**\n        * _validateForm\n        * @description - Validate each field on form\n        * @use - this._validateForm();\n        * @function\n        * @return {boolean} formValid - return If the complete form is valid or not.\n        */\n        private _validateForm(): boolean {\n            //CONSTANTS\n            const NULL_ENUM = app.core.util.functionsUtil.Validation.Null;\n            const EMPTY_ENUM = app.core.util.functionsUtil.Validation.Empty;\n\n            /***************************************************/\n            //VARIABLES\n            let formValid = true;\n\n            //Validate 'Year' Teacher Since fields\n            let teacher_since_rules = [NULL_ENUM, EMPTY_ENUM];\n            this.validate.teacherSince = this.functionsUtilService.validator(this.yearObject.value, teacher_since_rules);\n            if(!this.validate.teacherSince.valid) {\n                formValid = this.validate.teacherSince.valid;\n            }\n\n            return formValid;\n        }\n\n\n\n        /**\n        * changeHelpText\n        * @description - change help block text (titles and descriptions) dynamically\n        *  based on specific field (type, since, experiences)\n        * @use - this.changeHelpText('firstName');\n        * @function\n        * @return {void}\n        */\n        changeHelpText(type): void {\n            //CONSTANTS\n            const TYPE_HOBBY_TITLE = this.$filter('translate')('%global.teacher.type.hobby.text');\n            const TYPE_HOBBY_DESCRIPTION = this.$filter('translate')('%create.teacher.experience.help_text.type.hobby.description.text');\n            const TYPE_PROFESSIONAL_TITLE = this.$filter('translate')('%global.teacher.type.professional.text');\n            const TYPE_PROFESSIONAL_DESCRIPTION = this.$filter('translate')('%create.teacher.experience.help_text.type.professional.description.text');\n            const SINCE_TITLE = this.$filter('translate')('%create.teacher.experience.help_text.teacher_since.title.text');\n            const SINCE_DESCRIPTION = this.$filter('translate')('%create.teacher.experience.help_text.teacher_since.description.text');\n            const EXPERIENCES_TITLE = this.$filter('translate')('%create.teacher.experience.help_text.experiences.title.text');\n            const EXPERIENCES_DESCRIPTION = this.$filter('translate')('%create.teacher.experience.help_text.experiences.description.text');\n            /*****************************************************/\n\n            switch(type) {\n                case 'default':\n                    this.helpText.title = this.HELP_TEXT_TITLE;\n                    this.helpText.description = this.HELP_TEXT_DESCRIPTION;\n                break;\n\n                case 'hobby':\n                    this.helpText.title = TYPE_HOBBY_TITLE;\n                    this.helpText.description = TYPE_HOBBY_DESCRIPTION;\n                break;\n\n                case 'professional':\n                    this.helpText.title = TYPE_PROFESSIONAL_TITLE;\n                    this.helpText.description = TYPE_PROFESSIONAL_DESCRIPTION;\n                break;\n\n                case 'teacherSince':\n                    this.helpText.title = SINCE_TITLE;\n                    this.helpText.description = SINCE_DESCRIPTION;\n                break;\n\n                case 'experiences':\n                    this.helpText.title = EXPERIENCES_TITLE;\n                    this.helpText.description = EXPERIENCES_DESCRIPTION;\n                break;\n            }\n\n        }\n\n\n\n        /**\n        * _addEditExperience\n        * @description - open Modal in order to add a New Teacher's Experience on Box\n        * @use - this._addEditExperience();\n        * @function\n        * @return {void}\n        */\n        private _addEditExperience(index, $event): void {\n            let self = this;\n            // modal default options\n            let options: ng.ui.bootstrap.IModalSettings = {\n                animation: false,\n                backdrop: 'static',\n                keyboard: false,\n                templateUrl: this.dataConfig.modalExperienceTmpl,\n                controller: 'mainApp.components.modal.ModalExperienceController as vm',\n                resolve: {\n                    //one way to send data from this scope to modal\n                    dataSetModal: function () {\n                        return {\n                            experience: self.form.experiences[index],\n                            teacherId: self.$rootScope.teacherData.Id\n                        }\n                    }\n                }\n            };\n\n            var modalInstance = this.$uibModal.open(options);\n\n            //When Modal closed, return the new experience data\n            modalInstance.result.then(function (newExperience) {\n                if(newExperience) {\n                    self.form.experiences.push(newExperience);\n                }\n            }, function () {\n                DEBUG && console.info('Modal dismissed at: ' + new Date());\n            });\n\n            $event.preventDefault();\n        }\n\n\n\n        /**\n        * _setDataModelFromForm\n        * @description - get data from form's input in order to put it\n        * on $parent.teacherData\n        * @use - this._getDataFromForm();\n        * @function\n        * @return {void}\n        */\n        private _setDataModelFromForm(): void {\n            // Send data to parent (editTeacher)\n            this.$rootScope.teacherData.Type = this.form.type;\n            this.$rootScope.teacherData.TeacherSince = this.yearObject.value;\n        }\n\n\n\n        /**\n        * _subscribeToEvents\n        * @description - this method subscribes Teacher Location Section\n        * to Parent Events\n        * @use - this._subscribeToEvents();\n        * @function\n        * @return {void}\n        */\n        private _subscribeToEvents(): void {\n            //VARIABLES\n            let self = this;\n\n            /**\n            * Fill Form event\n            * @parent - EditTeacherController\n            * @description - Parent send teacher data in order to\n            * Child fill the form's field\n            * @event\n            */\n            this.$scope.$on('Fill Form',\n                function(event, args) {\n                    self.error = false;\n                    if(args !== 'error') {\n                        self._fillForm(args);\n                    } else {\n                        self.error = true;\n                    }\n                }\n            );\n\n\n            /**\n            * Saved event\n            * @parent - EditTeacherController\n            * @description - Parent notify that data was saved successful\n            * @event\n            */\n            this.$scope.$on('Saved',\n                function(event, args) {\n                    //loading Off\n                    self.saving = false;\n                    self.error = false;\n                    self.saved = true;\n\n                    self.$timeout(function() {\n                        self.saved = false;\n                    }, self.TIME_SHOW_MESSAGE);\n                }\n            );\n        }\n\n    }\n\n    /*-- MODULE DEFINITION --*/\n    angular\n        .module('mainApp.pages.editTeacher')\n        .controller(EditTeacherExperienceController.controllerId,\n                    EditTeacherExperienceController);\n\n}\n"]}