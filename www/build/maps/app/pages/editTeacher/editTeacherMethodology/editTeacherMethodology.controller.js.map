{"version":3,"sources":["app/pages/editTeacher/editTeacherMethodology/editTeacherMethodology.controller.ts"],"names":[],"mappings":"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","file":"../../../../../www/app/pages/editTeacher/editTeacherMethodology/editTeacherMethodology.controller.js","sourcesContent":["/**\n * EditTeacherMethodologyController\n * @description - Edit Teacher Methodology Section Controller (edit teacher)\n */\n\nmodule app.pages.editTeacher {\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    export interface IEditTeacherMethodologyController {\n        form: IEditTeacherMethodologyForm;\n        validate: IEditTeacherMethodologyValidate;\n        activate: () => void;\n    }\n\n    export interface ISelectListElementDisabled extends app.core.interfaces.IDataFromJsonI18n {\n        disabled?: boolean;\n    }\n\n    export interface IEditTeacherMethodologyForm {\n        methodology: string;\n        immersion: app.models.teacher.Immersion;\n    }\n\n    interface IEditTeacherMethodologyValidate {\n        methodology: app.core.util.functionsUtil.IValid;\n        immersionActive: app.core.util.functionsUtil.IValid;\n        typeOfImmersionList: app.core.util.functionsUtil.IValid;\n        otherCategory: app.core.util.functionsUtil.IValid;\n        globalValidate: app.core.util.functionsUtil.IValid;\n    }\n\n    /****************************************/\n    /*           CLASS DEFINITION           */\n    /****************************************/\n    export class EditTeacherMethodologyController implements IEditTeacherMethodologyController {\n\n        static controllerId = 'mainApp.pages.editTeacher.EditTeacherMethodologyController';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        form: IEditTeacherMethodologyForm;\n        saving: boolean;\n        saved: boolean;\n        error: boolean;\n        validate: IEditTeacherMethodologyValidate;\n        helpText: app.core.interfaces.IHelpTextStep;\n        typeOfImmersionList: Array<ISelectListElementDisabled>;\n        typeOfImmersionOptionBox: Array<app.core.interfaces.IKeyValue>;\n        typeObject: app.core.interfaces.IDataFromJsonI18n;\n        HELP_TEXT_TITLE: string;\n        HELP_TEXT_DESCRIPTION: string;\n        TIME_SHOW_MESSAGE: number;\n        // --------------------------------\n\n\n        /*-- INJECT DEPENDENCIES --*/\n        public static $inject = [\n            'dataConfig',\n            'mainApp.core.util.GetDataStaticJsonService',\n            'mainApp.core.util.FunctionsUtilService',\n            '$timeout',\n            '$filter',\n            '$scope',\n            '$rootScope',\n            '$uibModal'\n        ];\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(\n            private dataConfig: IDataConfig,\n            private getDataFromJson: app.core.util.getDataStaticJson.IGetDataStaticJsonService,\n            private functionsUtil: app.core.util.functionsUtil.IFunctionsUtilService,\n            private $timeout: angular.ITimeoutService,\n            private $filter: angular.IFilterService,\n            private $scope: angular.IScope,\n            private $rootScope: app.core.interfaces.IMainAppRootScope,\n            private $uibModal: ng.ui.bootstrap.IModalService) {\n                this._init();\n        }\n\n        /*-- INITIALIZE METHOD --*/\n        private _init() {\n            //CONSTANTS\n            this.TIME_SHOW_MESSAGE = 6000;\n            this.HELP_TEXT_TITLE = this.$filter('translate')('%create.teacher.method.help_text.title.text');\n            this.HELP_TEXT_DESCRIPTION = this.$filter('translate')('%create.teacher.method.help_text.description.text');\n            /*********************************/\n\n            // Init saving loading\n            this.saving = false;\n\n            // Init saved message\n            this.saved = false;\n\n            // Init error message\n            this.error = false;\n\n            //Put Help Text Default\n            this.helpText = {\n                title: this.HELP_TEXT_TITLE,\n                description: this.HELP_TEXT_DESCRIPTION\n            };\n\n            // Init form\n            this.form = {\n                methodology: '',\n                immersion: new app.models.teacher.Immersion\n            };\n\n            // Build Type of Immersion select lists\n            this.typeOfImmersionList = this.getDataFromJson.getTypeOfImmersionTeacheri18n();\n\n            // Init Type of Immersion options box\n            this.typeOfImmersionOptionBox = [];\n\n            // Build validate object fields\n            this.validate = {\n                methodology: {valid: true, message: ''},\n                immersionActive: {valid: true, message: ''},\n                typeOfImmersionList: {valid: true, message: ''},\n                otherCategory: {valid: true, message: ''},\n                globalValidate: {valid: true, message: ''}\n            };\n\n            this.activate();\n        }\n\n        /*-- ACTIVATE METHOD --*/\n        activate(): void {\n            //LOG\n            DEBUG && console.log('EditTeacherMethodologyController controller actived');\n\n            //SUBSCRIBE TO EVENTS\n            this._subscribeToEvents();\n\n            //FILL FORM FROM ROOTSCOPE TEACHER INFO\n            if(this.$rootScope.teacherData) {\n                this._fillForm(this.$rootScope.teacherData);\n            }\n\n        }\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n        /**\n        * changeStatus\n        * @description - change 'Immersion Switch' Status\n        * @function\n        * @return void\n        */\n        changeStatus(): void {\n            this.form.immersion.Active = !this.form.immersion.Active;\n        }\n\n\n\n        /**\n        * saveMethodologySection\n        * @description - save teacher methodologys (update teacher data on DB)\n        * @function\n        * @return void\n        */\n        saveMethodologySection(): void {\n            //Validate data form\n            let formValid = this._validateForm();\n\n            if(formValid) {\n                //loading On\n                this.saving = true;\n                this._setDataModelFromForm();\n                this.$scope.$emit('Save Data');\n            } else {\n                //Go top pages\n                window.scrollTo(0, 0);\n            }\n        }\n\n\n\n        /**\n        * _fillForm\n        * @description - Fill form with teacher data\n        * @use - this._fillForm(data);\n        * @function\n        * @param {app.models.teacher.Teacher} data - Teacher Data\n        * @return {void}\n        */\n        private _fillForm(data: app.models.teacher.Teacher): void {\n            //VARIABLES\n            this.form.methodology = data.Methodology;\n            this.form.immersion = data.Immersion;\n\n            //Charge immersion type list\n            if(this.form.immersion.Active) {\n\n                // type of immersion list was already filled\n                if(this.typeOfImmersionOptionBox.length === 0) {\n\n                    let immersionArray = this.getDataFromJson.getTypeOfImmersionTeacheri18n();\n                    let newArray: Array<app.core.interfaces.IKeyValue> = [];\n\n                    for (let i = 0; i < immersionArray.length; i++) {\n\n                        for (let j = 0; j < this.form.immersion.Category.length; j++) {\n                            if(this.form.immersion.Category[j] === immersionArray[i].code) {\n                                let obj = {key:null, value:''};\n                                obj.key = immersionArray[i].code;\n                                obj.value = immersionArray[i].value;\n                                //Disable immersion option from select list\n                                this._disableEnableOption(true, obj.key);\n                                this.typeOfImmersionOptionBox.push(obj);\n                            }\n                        }\n\n                    }\n\n                }\n\n            }\n\n        }\n\n\n\n        /**\n        * _validateForm\n        * @description - Validate each field on form\n        * @use - this._validateForm();\n        * @function\n        * @return {boolean} formValid - return If the complete form is valid or not.\n        */\n        private _validateForm(): boolean {\n            //CONSTANTS\n            const NULL_ENUM = app.core.util.functionsUtil.Validation.Null;\n            const EMPTY_ENUM = app.core.util.functionsUtil.Validation.Empty;\n            const GLOBAL_MESSAGE = this.$filter('translate')('%create.teacher.method.validation.message.text');\n            /***************************************************/\n            //VARIABLES\n            let formValid = true;\n\n            //Validate 'Methodology' fields\n            let methodology_rules = [NULL_ENUM, EMPTY_ENUM];\n            this.validate.methodology = this.functionsUtil.validator(this.form.methodology, methodology_rules);\n            if(!this.validate.methodology.valid) {\n                formValid = this.validate.methodology.valid;\n            }\n\n            //Validate type of immersion list If user select 'YES' immersion option\n            if(this.form.immersion.Active) {\n\n                let typeOfImmersion_rules = [NULL_ENUM, EMPTY_ENUM];\n                this.validate.typeOfImmersionList = this.functionsUtil.validator(this.form.immersion.Category, typeOfImmersion_rules);\n\n                let otherCategory_rules = [NULL_ENUM, EMPTY_ENUM];\n                this.validate.otherCategory = this.functionsUtil.validator(this.form.immersion.OtherCategory, otherCategory_rules);\n\n                if(this.validate.typeOfImmersionList.valid) {\n\n                    this.validate.typeOfImmersionList.valid = true;\n                    this.validate.otherCategory.valid = true;\n                    this.validate.globalValidate.valid = true;\n                    this.validate.globalValidate.message = '';\n\n                } else if(this.validate.otherCategory.valid) {\n\n                    this.validate.typeOfImmersionList.valid = true;\n                    this.validate.otherCategory.valid = true;\n                    this.validate.globalValidate.valid = true;\n                    this.validate.globalValidate.message = '';\n\n                } else {\n\n                    this.validate.globalValidate.valid = false;\n                    this.validate.globalValidate.message = GLOBAL_MESSAGE;\n                    formValid = this.validate.globalValidate.valid;\n\n                }\n\n            }\n\n            return formValid;\n        }\n\n\n\n        /**\n        * changeHelpText\n        * @description - change help block text (titles and descriptions) dynamically\n        *  based on specific field (methodology, immerison)\n        * @use - this.changeHelpText('firstName');\n        * @function\n        * @return {void}\n        */\n        changeHelpText(type): void {\n            //CONSTANTS\n            const METHODOLOGY_TITLE = this.$filter('translate')('%create.teacher.method.help_text.methodology.title.text');\n            const METHODOLOGY_DESCRIPTION = this.$filter('translate')('%create.teacher.method.help_text.methodology.description.text');\n            const IMMERSION_TITLE = this.$filter('translate')('%create.teacher.method.help_text.imm.title.text');\n            const IMMERSION_DESCRIPTION = this.$filter('translate')('%create.teacher.method.help_text.imm.description.text');\n            /*****************************************************/\n\n            switch(type) {\n                case 'default':\n                    this.helpText.title = this.HELP_TEXT_TITLE;\n                    this.helpText.description = this.HELP_TEXT_DESCRIPTION;\n                break;\n\n                case 'methodology':\n                    this.helpText.title = METHODOLOGY_TITLE;\n                    this.helpText.description = METHODOLOGY_DESCRIPTION;\n                break;\n\n                case 'immersion':\n                    this.helpText.title = IMMERSION_TITLE;\n                    this.helpText.description = IMMERSION_DESCRIPTION;\n                break;\n            }\n\n        }\n\n\n\n        /**\n        * _addNewImmersion\n        * @description - add new immersion type from typeOfImmersionList to typeOfImmersionOptionBox\n        * @use - this._addNewImmersion();\n        * @function\n        * @return {void}\n        */\n        private _addNewImmersion(): void {\n            let self = this;\n\n            //Disable immersion option from select list\n            this._disableEnableOption(true, this.typeObject.code);\n\n            this.typeOfImmersionOptionBox.push({key: this.typeObject.code, value: this.typeObject.value});\n\n            //Add new immersion type on form object\n            this.form.immersion.Category = [];\n            for (let i = 0; i < this.typeOfImmersionOptionBox.length; i++) {\n                this.form.immersion.Category.push(this.typeOfImmersionOptionBox[i].key);\n            }\n\n        }\n\n\n\n        /**\n        * _removeImmersion\n        * @description - remove a immersion type element of options array\n        * @use - this._removeImmersion(3);\n        * @function\n        * @param {string} key - immersion deselected by user\n        * @return {void}\n        */\n        private _removeImmersion(key): void {\n\n            //Enable immersion option from select list\n            this._disableEnableOption(false, key);\n\n            let newArray = this.typeOfImmersionOptionBox.filter(function(el) {\n                return el.key !== key;\n            });\n\n             this.typeOfImmersionOptionBox = newArray;\n\n             //Create new immersion type list on form object\n             this.form.immersion.Category = [];\n             for (let i = 0; i < this.typeOfImmersionOptionBox.length; i++) {\n                 this.form.immersion.Category.push(this.typeOfImmersionOptionBox[i].key);\n             }\n        }\n\n\n\n        /**\n        * _setDataModelFromForm\n        * @description - get data from form's input in order to put it on $parent.teacherData\n        * @use - this._getDataFromForm();\n        * @function\n        * @return {void}\n        */\n        private _setDataModelFromForm(): void {\n            //VARIABLES\n            let immersionOptions = this.typeOfImmersionOptionBox;\n            /*********************************/\n\n            // Send data to parent (createTeacherPage)\n            this.$rootScope.teacherData.Methodology = this.form.methodology;\n            this.$rootScope.teacherData.Immersion = this.form.immersion;\n            this.$rootScope.teacherData.Immersion.Category = this.form.immersion.Category;\n\n        }\n\n\n\n        /**\n        * _disableEnableOption\n        * @description - disable/enable a select option from selectlist\n        * @use - this._disableEnableOption(true, '01');\n        * @function\n        * @param {string} key - immersion option key\n        * @param {boolean} action - enable (false) / disable (true)\n        * @return {void}\n        */\n        private _disableEnableOption(action, key): void {\n            for (let i = 0; i < this.typeOfImmersionList.length; i++) {\n                if(this.typeOfImmersionList[i].code === key) {\n                    this.typeOfImmersionList[i].disabled = action;\n                }\n            }\n        }\n\n\n\n        /**\n        * _subscribeToEvents\n        * @description - this method subscribes Teacher Location Section\n        * to Parent Events\n        * @use - this._subscribeToEvents();\n        * @function\n        * @return {void}\n        */\n        private _subscribeToEvents(): void {\n            //VARIABLES\n            let self = this;\n\n            /**\n            * Fill Form event\n            * @parent - EditTeacherController\n            * @description - Parent send teacher data in order to\n            * Child fill the form's field\n            * @event\n            */\n            this.$scope.$on('Fill Form',\n                function(event, args) {\n                    self.error = false;\n                    if(args !== 'error') {\n                        self._fillForm(args);\n                    } else {\n                        self.error = true;\n                    }\n                }\n            );\n\n\n            /**\n            * Saved event\n            * @parent - EditTeacherController\n            * @description - Parent notify that data was saved successful\n            * @event\n            */\n            this.$scope.$on('Saved',\n                function(event, args) {\n                    //loading Off\n                    self.saving = false;\n                    self.error = false;\n                    self.saved = true;\n\n                    self.$timeout(function() {\n                        self.saved = false;\n                    }, self.TIME_SHOW_MESSAGE);\n                }\n            );\n        }\n\n    }\n\n    /*-- MODULE DEFINITION --*/\n    angular\n        .module('mainApp.pages.editTeacher')\n        .controller(EditTeacherMethodologyController.controllerId,\n                    EditTeacherMethodologyController);\n\n}\n"]}