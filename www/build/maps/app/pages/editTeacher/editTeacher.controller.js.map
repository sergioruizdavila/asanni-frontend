{"version":3,"sources":["app/pages/editTeacher/editTeacher.controller.ts"],"names":[],"mappings":"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","file":"../../../../www/app/pages/editTeacher/editTeacher.controller.js","sourcesContent":["/**\n * EditTeacherController\n * @description - Create Teacher Page Controller\n */\n\nmodule app.pages.editTeacher {\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    export interface IEditTeacherController {\n        activate: () => void;\n    }\n\n    interface ICreateTeacherError {\n        message: string;\n    }\n\n    /****************************************/\n    /*           CLASS DEFINITION           */\n    /****************************************/\n    export class EditTeacherController implements IEditTeacherController {\n\n        static controllerId = 'mainApp.pages.editTeacher.EditTeacherController';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        teacherData: app.models.teacher.Teacher;\n        showHeaderFixed: boolean;\n        progressWidth: string;\n        // --------------------------------\n\n\n        /*-- INJECT DEPENDENCIES --*/\n        public static $inject = [\n            'mainApp.core.util.GetDataStaticJsonService',\n            'mainApp.core.util.FunctionsUtilService',\n            'mainApp.models.user.UserService',\n            'mainApp.models.teacher.TeacherService',\n            'mainApp.core.util.messageUtilService',\n            'dataConfig',\n            '$state',\n            '$stateParams',\n            '$filter',\n            '$scope',\n            '$window',\n            '$rootScope',\n            '$uibModal',\n            'waitForAuth'];\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(\n            private getDataFromJson: app.core.util.getDataStaticJson.IGetDataStaticJsonService,\n            private functionsUtilService: app.core.util.functionsUtil.IFunctionsUtilService,\n            private userService: app.models.user.IUserService,\n            private teacherService: app.models.teacher.ITeacherService,\n            private messageUtil: app.core.util.messageUtil.IMessageUtilService,\n            private dataConfig: IDataConfig,\n            private $state: ng.ui.IStateService,\n            private $stateParams: app.core.interfaces.IStateParamsData,\n            private $filter: angular.IFilterService,\n            private $scope: angular.IScope,\n            private $window,\n            private $rootScope: app.core.interfaces.IMainAppRootScope,\n            private $uibModal: ng.ui.bootstrap.IModalService,\n            waitForAuth) {\n\n            this._init();\n\n        }\n\n        /*-- INITIALIZE METHOD --*/\n        private _init() {\n            //VARIABLES\n            let self = this;\n            let loggedUserId = this.$rootScope.userData.id;\n\n            //Get current state\n            let currentState = this.$state.current.name;\n\n            //Init teacher instance\n            this.$rootScope.teacherData = new app.models.teacher.Teacher();\n            //Connect with user logged\n            this.$rootScope.teacherData.Profile.UserId = loggedUserId;\n\n            this.activate();\n        }\n\n        /*-- ACTIVATE METHOD --*/\n        activate(): void {\n            //CONSTANTS\n            const ENTER_MIXPANEL = 'Enter: Edit Teacher Page';\n            //VARIABLES\n            let self = this;\n\n            //LOG\n            DEBUG && console.log('editTeacher controller actived');\n\n            //MIXPANEL\n            mixpanel.track(ENTER_MIXPANEL);\n\n            //SUBSCRIBE TO EVENTS\n            this._subscribeToEvents();\n\n            //Charge user profile data\n            this.fillFormWithProfileData();\n\n            //Charge teacher data if teacher entity exist on DB\n            this.fillFormWithTeacherData();\n\n        }\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n\n        /**\n        * fillFormWithProfileData\n        * @description - get user profile data from DB, and fill each field on form.\n        * @function\n        * @return void\n        */\n        //TODO: Analizar si es necesario esta funcion aqui, ya que estoy editando\n        // la info del profesor no del profile (solo uso aqui el idioma que ense√±o)\n        // si es asi, colocar una Nota para que no se me olvide por que deje esta funcion\n        fillFormWithProfileData(): void {\n            // VARIABLES\n            let self = this;\n            let userId = this.$rootScope.userData.id;\n\n            if(userId) {\n                // GET USER PROFILE DATA\n                this.userService.getUserProfileById(userId)\n                .then(\n                    function(response) {\n\n                        if(response.userId) {\n                            self.$rootScope.profileData = new app.models.user.Profile(response);\n                            self.$scope.$broadcast('Fill User Profile Form', self.$rootScope.profileData);\n                        }\n\n                    }\n                );\n            }\n        }\n\n\n        /**\n        * fillFormWithTeacherData\n        * @description - get teacher data from DB, and fill each field on form.\n        * @function\n        * @return void\n        */\n        fillFormWithTeacherData(): void {\n            // VARIABLES\n            let self = this;\n            let userId = this.$rootScope.userData.id;\n\n            //Get teacher info by user logged Id\n            this.teacherService.getTeacherByProfileId(userId).then(\n\n                function(response) {\n\n                    if(response.id) {\n\n                        self.$rootScope.teacherData = new app.models.teacher.Teacher(response);\n                        self.$scope.$broadcast('Fill Form', self.$rootScope.teacherData);\n\n                    }\n\n                }\n\n            );\n\n        }\n\n\n\n        /**\n        * _subscribeToEvents\n        * @description - this method subscribes Create Teacher Page to Child's Events\n        * @use - this._subscribeToEvents();\n        * @function\n        * @return {void}\n        */\n        private _subscribeToEvents(): void {\n            // VARIABLES\n            let self = this;\n\n            /**\n            * Save User Profile Data event\n            * @description - Parent (EditTeacherController) receive Child's\n                             event in order to save user profile data on BD\n            * @event\n            */\n            this.$scope.$on('Save Profile Data', function(event, args){\n                //CONSTANTS\n                const SUCCESS_MESSAGE = self.$filter('translate')('%notification.success.text');\n                //VARIABLES\n                let userId = self.$rootScope.profileData.UserId;\n                /**************************************************************/\n\n                if(userId) {\n                    self.userService.updateUserProfile(self.$rootScope.profileData)\n                    .then(\n                        function(response) {\n                            if(response.userId) {\n                                //Show message\n                                //self.messageUtil.success(SUCCESS_MESSAGE);\n\n                                //Fill Form\n                                self.$rootScope.profileData = new app.models.user.Profile(response);\n                                //TODO: Validar si esto es necesario ya que estoy guardando todo en $rootScope\n                                // ya deberia poder tener acceso en los hijos\n                                self.$scope.$broadcast('Fill User Profile Form', self.$rootScope.profileData);\n                                self.$scope.$broadcast('Saved');\n                            }\n                        },\n                        function(error) {\n                            self.messageUtil.error('');\n                            self.$scope.$broadcast('Fill User Profile Form', 'error');\n                        }\n                    );\n                }\n            });\n\n\n            /**\n            * Save Data event\n            * @description - Parent (EditTeacherController) receive Child's\n                             event in order to save teacher data on BD\n            * @event\n            */\n            this.$scope.$on('Save Data', function(event, args) {\n                //CONSTANTS\n                const SUCCESS_MESSAGE = self.$filter('translate')('%notification.success.text');\n                /******************************/\n\n                if(self.$rootScope.teacherData.Id) {\n                    // UPDATE EXISTING TEACHER\n                    self.teacherService.updateTeacher(self.$rootScope.teacherData)\n                    .then(\n                        function(response) {\n                            if(response.id) {\n                                //Show message\n                                //self.messageUtil.success(SUCCESS_MESSAGE);\n                                //Fill Form\n                                self.$rootScope.teacherData = new app.models.teacher.Teacher(response);\n                                //TODO: Validar si esto es necesario ya que estoy guardando todo en $rootScope\n                                // ya deberia poder tener acceso en los hijos\n                                self.$scope.$broadcast('Fill Form', self.$rootScope.teacherData);\n                                self.$scope.$broadcast('Saved');\n                            }\n                        },\n                        function(error) {\n                            //Show error\n                            self.messageUtil.error('');\n                            self.$scope.$broadcast('Fill Form', 'error');\n                        }\n                    );\n                } else {\n                    //TODO: Validar cuando no haya un teacherData Id\n                    DEBUG && console.log('self.$rootScope.teacherData.Id doesn¬¥t exist');\n                }\n\n            });\n\n        }\n\n    }\n\n\n    /*-- MODULE DEFINITION --*/\n    angular\n        .module('mainApp.pages.editTeacher')\n        .controller(EditTeacherController.controllerId,\n                    EditTeacherController);\n\n}\n"]}