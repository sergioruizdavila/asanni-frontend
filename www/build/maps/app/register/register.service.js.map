{"version":3,"sources":["app/register/register.service.ts"],"names":[],"mappings":"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","file":"../../../www/app/register/register.service.js","sourcesContent":["/**\n * RegisterService\n * @description - A service for handling user registration.\n */\n\nmodule app.register {\n\n    'use strict';\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    export interface IRegisterService {\n        register: (userData: IRegisterUserData) => angular.IPromise<any>;\n        checkEmail:(email) => angular.IPromise<any>;\n        checkUsername:(username) => angular.IPromise<any>;\n\n    }\n\n    export interface IRegisterUserData {\n        username: string;\n        email: string;\n        first_name: string;\n        last_name: string;\n        password: string;\n    }\n\n\n    /****************************************/\n    /*           CLASS DEFINITION           */\n    /****************************************/\n    export class RegisterService implements IRegisterService {\n\n        static serviceId = 'mainApp.register.RegisterService';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        REGISTER_URI: string;\n        REGISTER_CHECK_EMAIL_URI: string;\n        REGISTER_CHECK_USERNAME_URI: string;\n        // --------------------------------\n\n\n        /*-- INJECT DEPENDENCIES --*/\n        static $inject = [\n            '$q',\n            'mainApp.core.restApi.restApiService'\n        ];\n\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(\n            private $q: angular.IQService,\n            private restApi: app.core.restApi.IRestApi ) {\n            //LOG\n            DEBUG && console.log('register service instanced');\n\n            //CONSTANTS\n            this.REGISTER_URI = 'register';\n            this.REGISTER_CHECK_EMAIL_URI = 'register/check-email';\n            this.REGISTER_CHECK_USERNAME_URI = 'register/check-username';\n        }\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n        /**\n        * checkEmail\n        * @description - check if email already exists on DB\n        * @use - this.RegisterService.checkEmail();\n        * @function\n        * @param {string} email - user's email\n        * @return {angular.IPromise<any>} promise\n        */\n\n        checkEmail(email): angular.IPromise<any> {\n            //VARIABLES\n            let url = this.REGISTER_CHECK_EMAIL_URI;\n            let deferred = this.$q.defer();\n            let data = {\n                email: email\n            };\n\n            this.restApi.create({url: url}, data).$promise\n                .then(\n                    function(response) {\n                        deferred.resolve(response);\n                    },\n\n                    function(error) {\n                        DEBUG && console.error(error);\n                        /* We can not reject request because in some cases Status\n                        400 is success for us */\n                        deferred.resolve(error);\n                    }\n                );\n\n            return deferred.promise;\n\n        }\n\n\n\n        /**\n        * checkUsername\n        * @description - check if username already exists on DB\n        * @use - this.RegisterService.checkUsername();\n        * @function\n        * @param {string} username - user's username\n        * @return {angular.IPromise<any>} promise\n        */\n\n        checkUsername(username): angular.IPromise<any> {\n            //VARIABLES\n            let url = this.REGISTER_CHECK_USERNAME_URI;\n\n            return this.restApi.create({url: url}, username).$promise\n                .then(\n                    function(data) {\n                        return data;\n                    },\n\n                    function(error) {\n                        DEBUG && console.log(error);\n                        return error;\n                    }\n                );\n        }\n\n\n\n        /**\n        * register\n        * @description - Tried to create user account on DB\n        * @use - this.RegisterService.register();\n        * @function\n        * @param {IRegisterUserData} userData - user basic data to create account\n        * (username, password, first_name, last_name, email)\n        * @return {angular.IPromise<any>} promise\n        */\n\n        register(userData): angular.IPromise<any> {\n            //VARIABLES\n            let url = this.REGISTER_URI;\n            let deferred = this.$q.defer();\n\n            this.restApi.create({url: url}, userData).$promise\n                .then(\n                    function(response) {\n                        deferred.resolve(response);\n                    },\n\n                    function(error) {\n                        DEBUG && console.error(error);\n                        deferred.reject(error);\n                    }\n                );\n\n            return deferred.promise;\n        }\n\n    }\n\n    /*-- MODULE DEFINITION --*/\n    angular\n        .module('mainApp.register', [])\n        .service(RegisterService.serviceId, RegisterService);\n\n}\n"]}