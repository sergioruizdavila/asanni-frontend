{"version":3,"sources":["app/models/student/student.service.ts"],"names":[],"mappings":"AAOA,IAAO,GAAG,CAkIT;AAlID,WAAO,GAAG;IAAC,IAAA,MAAM,CAkIhB;IAlIU,WAAA,MAAM;QAAC,IAAA,OAAO,CAkIxB;QAlIiB,WAAA,OAAO,EAAC,CAAC;YAEvB,YAAY,CAAC;YAeb;gBAoBI,wBAAoB,OAAkC;oBAAlC,YAAO,GAAP,OAAO,CAA2B;oBAElD,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;gBAC7C,CAAC;gBAcD,uCAAc,GAAd,UAAe,EAAE;oBAEb,IAAI,GAAG,GAAG,UAAU,CAAC;oBAErB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAC,CAAC,CAAC,QAAQ;yBAChD,IAAI,CACD,UAAS,IAAI;wBACT,MAAM,CAAC,IAAI,CAAC;oBAChB,CAAC,CACJ,CAAC,KAAK,CACH,UAAS,GAAG;wBACR,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;wBACjB,MAAM,CAAC,GAAG,CAAC;oBACf,CAAC,CACJ,CAAC;gBACV,CAAC;gBASD,uCAAc,GAAd;oBAEI,IAAI,GAAG,GAAG,UAAU,CAAC;oBAErB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAC,GAAG,EAAE,GAAG,EAAC,CAAC,CAAC,QAAQ;yBACzC,IAAI,CACD,UAAS,IAAI;wBACT,MAAM,CAAC,IAAI,CAAC;oBAChB,CAAC,CACJ,CAAC,KAAK,CACH,UAAS,GAAG;wBACR,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;wBACjB,MAAM,CAAC,GAAG,CAAC;oBACf,CAAC,CACJ,CAAC;gBACV,CAAC;gBAaD,2CAAkB,GAAlB,UAAmB,EAAE;oBAEjB,IAAI,GAAG,GAAG,SAAS,CAAC;oBAEpB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAC,CAAC,CAAC,QAAQ;yBAChD,IAAI,CACD,UAAS,IAAI;wBACT,MAAM,CAAC,IAAI,CAAC;oBAChB,CAAC,CACJ,CAAC,KAAK,CACH,UAAS,GAAG;wBACR,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;wBACjB,MAAM,CAAC,GAAG,CAAC;oBACf,CAAC,CACJ,CAAC;gBACV,CAAC;gBAtGM,wBAAS,GAAG,uCAAuC,CAAC;gBAUpD,sBAAO,GAAG;oBACb,qCAAqC;iBACxC,CAAC;gBA4FN,qBAAC;YAAD,CA1GA,AA0GC,IAAA;YA1GY,sBAAc,iBA0G1B,CAAA;YAGD,OAAO;iBACF,MAAM,CAAC,wBAAwB,EAAE,EAAE,CAAC;iBACpC,OAAO,CAAC,cAAc,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;QAE3D,CAAC,EAlIiB,OAAO,GAAP,cAAO,KAAP,cAAO,QAkIxB;IAAD,CAAC,EAlIU,MAAM,GAAN,UAAM,KAAN,UAAM,QAkIhB;AAAD,CAAC,EAlIM,GAAG,KAAH,GAAG,QAkIT","file":"../../../../www/app/models/student/student.service.js","sourcesContent":["/**\n * StudentService\n * @description - Services related on Student Model.\n * @constructor\n * @param {app.core.restApi.IRestApi} restApi - instance rest Api service.\n */\n\nmodule app.models.student {\n\n    'use strict';\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    export interface IStudentService {\n        getStudentById: (id: string) => angular.IPromise<any>;\n        getAllStudents: () => angular.IPromise<any>;\n        getRatingByEarlyid: (id: string) => angular.IPromise<any>;\n    }\n\n\n    /****************************************/\n    /*           CLASS DEFINITION           */\n    /****************************************/\n    export class StudentService implements IStudentService {\n\n        static serviceId = 'mainApp.models.student.StudentService';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n\n        // --------------------------------\n\n\n        /*-- INJECT DEPENDENCIES --*/\n        static $inject = [\n            'mainApp.core.restApi.restApiService'\n        ];\n\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(private restApi: app.core.restApi.IRestApi) {\n            //LOG\n            console.log('student service instanced');\n        }\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n        /**\n        * getStudentById\n        * @description - get teacher by Id\n        * @use - this.StudentService.getStudentByUid('98d667ae');\n        * @function\n        * @params {string} id - student id\n        * @return {angular.IPromise<any>} promise - return student by Id\n        */\n        getStudentById(id): angular.IPromise<any> {\n            //VARIABLES\n            let url = 'students';\n\n            return this.restApi.show({url: url, id: id}).$promise\n                .then(\n                    function(data) {\n                        return data;\n                    }\n                ).catch(\n                    function(err) {\n                        console.log(err);\n                        return err;\n                    }\n                );\n        }\n\n        /**\n        * getAllStudents\n        * @description - get all Students\n        * @function\n        * @return {angular.IPromise<any>} return a promise with\n        * students list\n        */\n        getAllStudents(): angular.IPromise<any> {\n            //VARIABLES\n            let url = 'students';\n\n            return this.restApi.query({url: url}).$promise\n                .then(\n                    function(data) {\n                        return data;\n                    }\n                ).catch(\n                    function(err) {\n                        console.log(err);\n                        return err;\n                    }\n                );\n        }\n\n\n\n        /** TODO: Mover a su respectivo lugar cuando se cree el modelo independiente\n        * de Rating\n        * getRatingByEarlyid\n        * @description - get rating by Early Id\n        * @use - this.StudentService.getRatingByEarlyid('98d667ae');\n        * @function\n        * @params {string} id - early adopter id\n        * @return {angular.IPromise<any>} promise - return rating by Ealry Adopter Id\n        */\n        getRatingByEarlyid(id): angular.IPromise<any> {\n            //VARIABLES\n            let url = 'ratings';\n\n            return this.restApi.show({url: url, id: id}).$promise\n                .then(\n                    function(data) {\n                        return data;\n                    }\n                ).catch(\n                    function(err) {\n                        console.log(err);\n                        return err;\n                    }\n                );\n        }\n\n    }\n\n    /*-- MODULE DEFINITION --*/\n    angular\n        .module('mainApp.models.student', [])\n        .service(StudentService.serviceId, StudentService);\n\n}\n"]}