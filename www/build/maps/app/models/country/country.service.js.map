{"version":3,"sources":["app/models/country/country.service.ts"],"names":[],"mappings":"AAOA,IAAO,GAAG,CAwHT;AAxHD,WAAO,GAAG;IAAC,IAAA,MAAM,CAwHhB;IAxHU,WAAA,MAAM;QAAC,IAAA,OAAO,CAwHxB;QAxHiB,WAAA,OAAO,EAAC,CAAC;YAEvB,YAAY,CAAC;YAab;gBAsBI,wBACY,OAAkC,EAClC,WAAkC,EAClC,EAAqB;oBAFrB,YAAO,GAAP,OAAO,CAA2B;oBAClC,gBAAW,GAAX,WAAW,CAAuB;oBAClC,OAAE,GAAF,EAAE,CAAmB;oBAE7B,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;oBAGlD,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;gBACnC,CAAC;gBAcD,0CAAiB,GAAjB,UAAkB,YAAoB;oBAElC,IAAI,IAAI,GAAG,IAAI,CAAC;oBAChB,IAAI,GAAG,GAAG,IAAI,CAAC,WAAW,GAAG,GAAG,GAAG,YAAY,CAAC;oBAChD,IAAI,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC;oBAE/B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,GAAG,EAAC,CAAC,CAAC,QAAQ;yBACjC,IAAI,CACD,UAAS,QAAQ;wBACb,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;oBAC/B,CAAC,EACD,UAAS,KAAK;wBACV,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;wBAC9B,EAAE,CAAA,CAAC,KAAK,CAAC,UAAU,IAAI,cAAc,CAAC,CAAC,CAAC;4BACpC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;wBAC9B,CAAC;wBACD,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;oBAC3B,CAAC,CACJ,CAAC;oBAEN,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;gBAC5B,CAAC;gBASD,wCAAe,GAAf;oBAEI,IAAI,IAAI,GAAG,IAAI,CAAC;oBAChB,IAAI,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC;oBAC3B,IAAI,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC;oBAE/B,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,EAAC,GAAG,EAAE,GAAG,EAAC,CAAC,CAAC,QAAQ;yBACxC,IAAI,CACD,UAAS,QAAQ;wBACb,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;oBAC/B,CAAC,EACD,UAAS,KAAK;wBACV,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;wBAC9B,EAAE,CAAA,CAAC,KAAK,CAAC,UAAU,IAAI,cAAc,CAAC,CAAC,CAAC;4BACpC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;wBAC9B,CAAC;wBACD,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;oBAC3B,CAAC,CACJ,CAAC;oBAEN,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;gBAC5B,CAAC;gBA9FM,wBAAS,GAAG,uCAAuC,CAAC;gBAUpD,sBAAO,GAAG;oBACb,qCAAqC;oBACrC,0BAA0B;oBAC1B,IAAI;iBACP,CAAC;gBAkFN,qBAAC;YAAD,CAlGA,AAkGC,IAAA;YAlGY,sBAAc,iBAkG1B,CAAA;YAGD,OAAO;iBACF,MAAM,CAAC,wBAAwB,EAAE,EAAE,CAAC;iBACpC,OAAO,CAAC,cAAc,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;QAE3D,CAAC,EAxHiB,OAAO,GAAP,cAAO,KAAP,cAAO,QAwHxB;IAAD,CAAC,EAxHU,MAAM,GAAN,UAAM,KAAN,UAAM,QAwHhB;AAAD,CAAC,EAxHM,GAAG,KAAH,GAAG,QAwHT","file":"../../../../www/app/models/country/country.service.js","sourcesContent":["/**\n * CountryService\n * @description - Services related on Country Model.\n * @constructor\n * @param {app.core.restApi.IRestApi} restApi - instance rest Api service.\n */\n\nmodule app.models.country {\n\n    'use strict';\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    export interface ICountryService {\n        getCountryByAlias: (aliasCountry: string) => angular.IPromise<any>;\n        getAllCountries: () => angular.IPromise<any>;\n    }\n\n    /****************************************/\n    /*           CLASS DEFINITION           */\n    /****************************************/\n    export class CountryService implements ICountryService {\n\n        static serviceId = 'mainApp.models.country.CountryService';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        COUNTRY_URI: string;\n        // --------------------------------\n\n\n        /*-- INJECT DEPENDENCIES --*/\n        static $inject = [\n            'mainApp.core.restApi.restApiService',\n            'mainApp.auth.AuthService',\n            '$q'\n        ];\n\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(\n            private restApi: app.core.restApi.IRestApi,\n            private AuthService: app.auth.IAuthService,\n            private $q: angular.IQService) {\n            //LOG\n            DEBUG && console.log('feature service instanced');\n\n            //CONSTANTS\n            this.COUNTRY_URI = 'countries';\n        }\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n        /**\n        * getCountryByAlias\n        * @description - get country by Alias Country\n        * @use - this.CountryService.getCountryByAlias('new-zealand');\n        * @function\n        * @param {string} aliasCountry - alias country value\n        * @return {angular.IPromise<any>} promise - return country by Alias\n        */\n        getCountryByAlias(aliasCountry: string): angular.IPromise<any> {\n            //VARIABLES\n            let self = this;\n            let url = this.COUNTRY_URI + '/' + aliasCountry;\n            let deferred = this.$q.defer();\n\n            this.restApi.show({url: url}).$promise\n                .then(\n                    function(response) {\n                        deferred.resolve(response);\n                    },\n                    function(error) {\n                        DEBUG && console.error(error);\n                        if(error.statusText == 'Unauthorized') {\n                            self.AuthService.logout();\n                        }\n                        deferred.reject(error);\n                    }\n                );\n\n            return deferred.promise;\n        }\n\n\n        /**\n        * getAllCountries\n        * @description - get all Countries\n        * @function\n        * @return {angular.IPromise<any>} return a promise with Countries list\n        */\n        getAllCountries(): angular.IPromise<any> {\n            //VARIABLES\n            let self = this;\n            let url = this.COUNTRY_URI;\n            let deferred = this.$q.defer();\n\n            this.restApi.queryObject({url: url}).$promise\n                .then(\n                    function(response) {\n                        deferred.resolve(response);\n                    },\n                    function(error) {\n                        DEBUG && console.error(error);\n                        if(error.statusText == 'Unauthorized') {\n                            self.AuthService.logout();\n                        }\n                        deferred.reject(error);\n                    }\n                );\n\n            return deferred.promise;\n        }\n\n    }\n\n    /*-- MODULE DEFINITION --*/\n    angular\n        .module('mainApp.models.country', [])\n        .service(CountryService.serviceId, CountryService);\n\n}\n"]}