{"version":3,"sources":["app/models/feedback/feedback.service.ts"],"names":[],"mappings":"AAOA,IAAO,GAAG,CA0GT;AA1GD,WAAO,GAAG;IAAC,IAAA,MAAM,CA0GhB;IA1GU,WAAA,MAAM;QAAC,IAAA,QAAQ,CA0GzB;QA1GiB,WAAA,UAAQ,EAAC,CAAC;YAExB,YAAY,CAAC;YAab;gBAoBI,yBAAoB,OAAkC;oBAAlC,YAAO,GAAP,OAAO,CAA2B;oBAElD,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;gBAC9C,CAAC;gBAcD,wCAAc,GAAd,UAAe,QAAQ;oBACnB,IAAI,OAAO,CAAC;oBACZ,IAAI,GAAG,GAAG,WAAW,CAAC;oBACtB,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,QAAQ,CAAC;yBAChD,QAAQ,CAAC,IAAI,CACV,UAAU,QAAQ;wBACd,MAAM,CAAC,QAAQ,CAAC;oBACpB,CAAC,EAAE,UAAU,KAAK;wBACd,MAAM,CAAC,KAAK,CAAC;oBACjB,CAAC,CACJ,CAAC,KAAK,CACH,UAAS,GAAG;wBACR,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;wBACjB,MAAM,CAAC,GAAG,CAAC;oBACf,CAAC,CACJ,CAAC;oBAEN,MAAM,CAAC,OAAO,CAAC;gBACnB,CAAC;gBAYD,sCAAY,GAAZ,UAAa,EAAE;oBAEX,IAAI,GAAG,GAAG,QAAQ,CAAC;oBAEnB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAC,CAAC,CAAC,QAAQ;yBAChD,IAAI,CACD,UAAS,IAAI;wBACT,MAAM,CAAC,IAAI,CAAC;oBAChB,CAAC,CACJ,CAAC,KAAK,CACH,UAAS,GAAG;wBACR,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;wBACjB,MAAM,CAAC,GAAG,CAAC;oBACf,CAAC,CACJ,CAAC;gBACV,CAAC;gBAhFM,yBAAS,GAAG,yCAAyC,CAAC;gBAUtD,uBAAO,GAAG;oBACb,qCAAqC;iBACxC,CAAC;gBAsEN,sBAAC;YAAD,CApFA,AAoFC,IAAA;YApFY,0BAAe,kBAoF3B,CAAA;YAGD,OAAO;iBACF,MAAM,CAAC,yBAAyB,EAAE,EAAE,CAAC;iBACrC,OAAO,CAAC,eAAe,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;QAE7D,CAAC,EA1GiB,QAAQ,GAAR,eAAQ,KAAR,eAAQ,QA0GzB;IAAD,CAAC,EA1GU,MAAM,GAAN,UAAM,KAAN,UAAM,QA0GhB;AAAD,CAAC,EA1GM,GAAG,KAAH,GAAG,QA0GT","file":"../../../../www/app/models/feedback/feedback.service.js","sourcesContent":["/**\n * FeedbackService\n * @description - Services related on Feedback Model.\n * @constructor\n * @param {app.core.restApi.IRestApi} restApi - instance rest Api service.\n */\n\nmodule app.models.feedback {\n\n    'use strict';\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    export interface IFeedbackService {\n        createFeedback: (feedback: app.models.feedback.Feedback) => angular.IPromise<any>;\n        getEarlyById: (id: string) => angular.IPromise<any>;\n    }\n\n    /****************************************/\n    /*           CLASS DEFINITION           */\n    /****************************************/\n    export class FeedbackService implements IFeedbackService {\n\n        static serviceId = 'mainApp.models.feedback.FeedbackService';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n\n        // --------------------------------\n\n\n        /*-- INJECT DEPENDENCIES --*/\n        static $inject = [\n            'mainApp.core.restApi.restApiService'\n        ];\n\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(private restApi: app.core.restApi.IRestApi) {\n            //LOG\n            console.log('feedback service instanced');\n        }\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n        /**\n        * createFeedback\n        * @description - create Feedback entity on DB\n        * @function\n        * @params {app.models.feedback.Feedback} feedback - feedback Object\n        * @return {promise} promise - Return a promise of \"Add Feedback Request\".\n        * @return {object} response - Returns response about If request was success or error.\n        */\n        createFeedback(feedback): ng.IPromise<any> {\n            var promise;\n            let url = 'feedbacks';\n            promise = this.restApi.create({ url: url }, feedback)\n                .$promise.then(\n                    function (response) {\n                        return response;\n                    }, function (error) {\n                        return error;\n                    }\n                ).catch(\n                    function(err) {\n                        console.log(err);\n                        return err;\n                    }\n                );\n\n            return promise;\n        }\n\n\n\n        /**\n        * getEarlyById\n        * @description - get early adopter by Id\n        * @use - this.UserService.getEarlyById('98d667ae');\n        * @function\n        * @params {string} id - early adopter id\n        * @return {angular.IPromise<any>} promise - return early adopter by Id\n        */\n        getEarlyById(id): angular.IPromise<any> {\n            //VARIABLES\n            let url = 'early/';\n\n            return this.restApi.show({url: url, id: id}).$promise\n                .then(\n                    function(data) {\n                        return data;\n                    }\n                ).catch(\n                    function(err) {\n                        console.log(err);\n                        return err;\n                    }\n                );\n        }\n\n    }\n\n    /*-- MODULE DEFINITION --*/\n    angular\n        .module('mainApp.models.feedback', [])\n        .service(FeedbackService.serviceId, FeedbackService);\n\n}\n"]}