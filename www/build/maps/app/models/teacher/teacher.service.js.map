{"version":3,"sources":["app/models/teacher/teacher.service.ts"],"names":[],"mappings":"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","file":"../../../../www/app/models/teacher/teacher.service.js","sourcesContent":["/**\n * TeacherService\n * @description - Services related on Teacher Model.\n * @constructor\n * @param {app.core.restApi.IRestApi} restApi - instance rest Api service.\n */\n\nmodule app.models.teacher {\n\n    'use strict';\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    export interface ITeacherService {\n        getTeacherById: (id: string) => angular.IPromise<any>;\n        getTeacherByProfileId: (profileId: string) => angular.IPromise<any>;\n        getAllTeachers: () => angular.IPromise<any>;\n        getAllTeachersByStatus: (status) => angular.IPromise<any>;\n        createTeacher: (teacher: app.models.teacher.Teacher) => angular.IPromise<any>;\n        updateTeacher: (teacher: app.models.teacher.Teacher) => angular.IPromise<any>;\n        createExperience: (teacherId: string, experience: app.models.teacher.Experience) => angular.IPromise<any>;\n        updateExperience: (teacherId: string, experience: app.models.teacher.Experience) => angular.IPromise<any>;\n        createEducation: (teacherId: string, education: app.models.teacher.Education) => angular.IPromise<any>;\n        updateEducation: (teacherId: string, education: app.models.teacher.Education) => angular.IPromise<any>;\n        createCertificate: (teacherId: string, certificate: app.models.teacher.Certificate) => angular.IPromise<any>;\n        updateCertificate: (teacherId: string, certificate: app.models.teacher.Certificate) => angular.IPromise<any>;\n    }\n\n    export interface ITeacherQueryObject {\n        next: string;\n        previous: string;\n        count: number;\n        results: Array<app.models.teacher.Teacher>;\n    }\n\n\n    /****************************************/\n    /*           CLASS DEFINITION           */\n    /****************************************/\n    export class TeacherService implements ITeacherService {\n\n        static serviceId = 'mainApp.models.teacher.TeacherService';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        TEACHER_URI: string;\n        PROFILE_TEACHER_URI: string;\n        STATUS_TEACHER_URI: string;\n        EXPERIENCES_URI: string;\n        EDUCATIONS_URI: string;\n        CERTIFICATES_URI: string;\n        // --------------------------------\n\n\n        /*-- INJECT DEPENDENCIES --*/\n        static $inject = [\n            'mainApp.core.restApi.restApiService',\n            'mainApp.auth.AuthService',\n            '$q'\n        ];\n\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(\n            private restApi: app.core.restApi.IRestApi,\n            private AuthService: app.auth.IAuthService,\n            private $q: angular.IQService) {\n            //LOG\n            DEBUG && console.log('teacher service instanced');\n\n            //CONSTANTS\n            this.TEACHER_URI = 'teachers';\n            this.PROFILE_TEACHER_URI = 'teachers?profileId=';\n            this.STATUS_TEACHER_URI = 'teachers?status=';\n            this.EXPERIENCES_URI = 'experiences';\n            this.EDUCATIONS_URI = 'educations';\n            this.CERTIFICATES_URI = 'certificates';\n        }\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n        /**\n        * getTeacherById\n        * @description - get teacher by Id\n        * @use - this.TeacherService.getTeacherById('98d667ae');\n        * @function\n        * @params {string} id - user id\n        * @return {angular.IPromise<any>} promise - return teacher by Id\n        */\n        getTeacherById(id): angular.IPromise<any> {\n            //VARIABLES\n            let self = this;\n            let url = this.TEACHER_URI;\n            let deferred = this.$q.defer();\n\n            this.restApi.show({url: url, id: id}).$promise\n                .then(\n                    function(response) {\n                        deferred.resolve(response);\n                    },\n                    function(error) {\n                        DEBUG && console.error(error);\n                        if(error.statusText == 'Unauthorized') {\n                            self.AuthService.logout();\n                        }\n                        deferred.reject(error);\n                    }\n                );\n\n            return deferred.promise;\n        }\n\n\n\n        /**\n        * getTeacherByProfileId\n        * @description - get teacher by user profile id filter value\n        * @function\n        * @return {angular.IPromise<any>} return a promise with user profile teacher data\n        */\n        getTeacherByProfileId(profileId): angular.IPromise<any> {\n            //VARIABLES\n            let self = this;\n            let url = this.PROFILE_TEACHER_URI + profileId;\n            let deferred = this.$q.defer();\n\n            this.restApi.queryObject({url: url}).$promise\n                .then(\n                    function(response) {\n                        if(response.results) {\n                            let res = response.results[0] ? response.results[0] : '';\n                            deferred.resolve(res);\n                        } else {\n                            DEBUG && console.error(response);\n                            deferred.reject(response);\n                        }\n                    },\n                    function(error) {\n                        DEBUG && console.error(error);\n                        if(error.statusText == 'Unauthorized') {\n                            self.AuthService.logout();\n                        }\n                        deferred.reject(error);\n                    }\n                );\n\n            return deferred.promise;\n        }\n\n\n\n        /**\n        * getAllTeachersByStatus\n        * @description - get all Teachers by status filter value\n        * @function\n        * @return {angular.IPromise<any>} return a promise with teachers list\n        */\n        getAllTeachersByStatus(status): angular.IPromise<any> {\n            //VARIABLES\n            let self = this;\n            let url = this.STATUS_TEACHER_URI + status;\n            let deferred = this.$q.defer();\n\n            this.restApi.queryObject({url: url}).$promise\n                .then(\n                    function(response) {\n                        deferred.resolve(response);\n                    },\n                    function(error) {\n                        DEBUG && console.error(error);\n                        if(error.statusText == 'Unauthorized') {\n                            self.AuthService.logout();\n                        }\n                        deferred.reject(error);\n                    }\n                );\n\n            return deferred.promise;\n        }\n\n\n\n        /**\n        * getAllTeachers\n        * @description - get all Teachers\n        * @function\n        * @return {angular.IPromise<any>} return a promise with teachers list\n        */\n        getAllTeachers(): angular.IPromise<any> {\n            //VARIABLES\n            let self = this;\n            let url = this.TEACHER_URI;\n            let deferred = this.$q.defer();\n\n            this.restApi.queryObject({url: url}).$promise\n                .then(\n                    function(response) {\n                        deferred.resolve(response);\n                    },\n                    function(error) {\n                        DEBUG && console.error(error);\n                        if(error.statusText == 'Unauthorized') {\n                            self.AuthService.logout();\n                        }\n                        deferred.reject(error);\n                    }\n                );\n\n            return deferred.promise;\n        }\n\n\n\n        /**\n        * createTeacher\n        * @description - create Teacher entity on DB\n        * @function\n        * @params {app.models.teacher.Teacher} teacher - teacher Object\n        * @return {promise} promise - Return a promise of \"Add Teacher Request\".\n        * @return {object} response - Returns response about If request was success or error.\n        */\n        createTeacher(teacher): ng.IPromise<any> {\n            //VARIABLES\n            let self = this;\n            let url = this.TEACHER_URI;\n            let deferred = this.$q.defer();\n\n            this.restApi.create({ url: url }, teacher).$promise\n                .then(\n                    function (response) {\n                        deferred.resolve(response);\n                    },\n                    function (error) {\n                        DEBUG && console.error(error);\n                        if(error.statusText == 'Unauthorized') {\n                            self.AuthService.logout();\n                        }\n                        deferred.reject(error);\n                    }\n                );\n\n            return deferred.promise;\n        }\n\n\n\n        /**\n        * updateTeacher\n        * @description - update Teacher entity on DB\n        * @function\n        * @params {app.models.teacher.Teacher} teacher - teacher Object\n        * @return {promise} promise - Return a promise of \"Add Teacher Request\".\n        * @return {object} response - Returns response about If request was success or error.\n        */\n        updateTeacher(teacher): ng.IPromise<any> {\n            //VARIABLES\n            let self = this;\n            let url = this.TEACHER_URI;\n            let deferred = this.$q.defer();\n\n            this.restApi.update({ url: url, id: teacher.Id }, teacher).$promise\n                .then(\n                    function (response) {\n                        deferred.resolve(response);\n                    },\n                    function (error) {\n                        DEBUG && console.error(error);\n                        if(error.statusText == 'Unauthorized') {\n                            self.AuthService.logout();\n                        }\n                        deferred.reject(error);\n                    }\n                );\n\n            return deferred.promise;\n        }\n\n\n\n        /**\n        * createExperience\n        * @description - create Teacher's experience entity on DB\n        * @function\n        * @params {string} teacherId - teacher Object\n        * @params {app.models.teacher.Experience} experience - experience Object\n        * @return {promise} promise - Return a promise of \"Add Teacher's Experience Request\".\n        * @return {object} response - Returns response about If request was success or error.\n        */\n        createExperience(teacherId, experience): angular.IPromise<any> {\n            //VARIABLES\n            let self = this;\n            let url = this.TEACHER_URI + '/' + teacherId + '/' + this.EXPERIENCES_URI;\n            let deferred = this.$q.defer();\n\n            this.restApi.create({ url: url }, experience).$promise\n                .then(\n                    function (response) {\n                        deferred.resolve(response);\n                    },\n                    function (error) {\n                        DEBUG && console.log(error);\n                        if(error.statusText == 'Unauthorized') {\n                            self.AuthService.logout();\n                        }\n                        deferred.reject(error);\n                    }\n                );\n\n            return deferred.promise;\n        }\n\n\n\n        /**\n        * updateExperience\n        * @description - update Teacher's Experience entity on DB\n        * @function\n        * @params {string} teacherId - teacher Object\n        * @params {app.models.teacher.Experience} experience - experience Object\n        * @return {promise} promise - Return a promise of \"Update Teacher's Experience Request\".\n        * @return {object} response - Returns response about If request was success or error.\n        */\n        updateExperience(teacherId, experience): ng.IPromise<any> {\n            //VARIABLES\n            let self = this;\n            let url = this.TEACHER_URI + '/' + teacherId + '/' + this.EXPERIENCES_URI;\n            let deferred = this.$q.defer();\n\n            this.restApi.update({ url: url, id: experience.Id }, experience).$promise\n                .then(\n                    function (response) {\n                        deferred.resolve(response);\n                    },\n                    function (error) {\n                        DEBUG && console.error(error);\n                        if(error.statusText == 'Unauthorized') {\n                            self.AuthService.logout();\n                        }\n                        deferred.reject(error);\n                    }\n                );\n\n            return deferred.promise;\n        }\n\n\n\n        /**\n        * createEducation\n        * @description - create Teacher's education entity on DB\n        * @function\n        * @params {string} teacherId - teacher Object\n        * @params {app.models.teacher.Education} education - education Object\n        * @return {promise} promise - Return a promise of \"Add Teacher's Education Request\".\n        * @return {object} response - Returns response about If request was success or error.\n        */\n        createEducation(teacherId, education): angular.IPromise<any> {\n            //VARIABLES\n            let self = this;\n            let url = this.TEACHER_URI + '/' + teacherId + '/' + this.EDUCATIONS_URI;\n            let deferred = this.$q.defer();\n\n            this.restApi.create({ url: url }, education).$promise\n                .then(\n                    function (response) {\n                        deferred.resolve(response);\n                    },\n                    function (error) {\n                        DEBUG && console.error(error);\n                        if(error.statusText == 'Unauthorized') {\n                            self.AuthService.logout();\n                        }\n                        deferred.reject(error);\n                    }\n                );\n\n            return deferred.promise;\n        }\n\n\n\n        /**\n        * updateEducation\n        * @description - update Teacher's Education entity on DB\n        * @function\n        * @params {string} teacherId - teacher Object\n        * @params {app.models.teacher.Education} education - education Object\n        * @return {promise} promise - Return a promise of \"Update Teacher's Education Request\".\n        * @return {object} response - Returns response about If request was success or error.\n        */\n        updateEducation(teacherId, education): ng.IPromise<any> {\n            //VARIABLES\n            let self = this;\n            let url = this.TEACHER_URI + '/' + teacherId + '/' + this.EDUCATIONS_URI;\n            let deferred = this.$q.defer();\n\n            this.restApi.update({ url: url, id: education.Id }, education).$promise\n                .then(\n                    function (response) {\n                        deferred.resolve(response);\n                    },\n                    function (error) {\n                        DEBUG && console.error(error);\n                        if(error.statusText == 'Unauthorized') {\n                            self.AuthService.logout();\n                        }\n                        deferred.reject(error);\n                    }\n                );\n\n            return deferred.promise;\n        }\n\n\n\n        /**\n        * createCertificate\n        * @description - create Teacher's certificate entity on DB\n        * @function\n        * @params {string} teacherId - teacher Object\n        * @params {app.models.teacher.Certificate} certificate - certificate Object\n        * @return {promise} promise - Return a promise of \"Add Teacher's Certificate Request\".\n        * @return {object} response - Returns response about If request was success or error.\n        */\n        createCertificate(teacherId, certificate): angular.IPromise<any> {\n            //VARIABLES\n            let self = this;\n            let url = this.TEACHER_URI + '/' + teacherId + '/' + this.CERTIFICATES_URI;\n            let deferred = this.$q.defer();\n\n            this.restApi.create({ url: url }, certificate).$promise\n                .then(\n                    function (response) {\n                        deferred.resolve(response);\n                    },\n                    function (error) {\n                        DEBUG && console.error(error);\n                        if(error.statusText == 'Unauthorized') {\n                            self.AuthService.logout();\n                        }\n                        deferred.reject(error);\n                    }\n                );\n\n            return deferred.promise;\n        }\n\n\n\n        /**\n        * updateCertificate\n        * @description - update Teacher's Certificate entity on DB\n        * @function\n        * @params {string} teacherId - teacher Object\n        * @params {app.models.teacher.Certificate} certificate - certificate Object\n        * @return {promise} promise - Return a promise of \"Update Teacher's Certificate Request\".\n        * @return {object} response - Returns response about If request was success or error.\n        */\n        updateCertificate(teacherId, certificate): ng.IPromise<any> {\n            //VARIABLES\n            let self = this;\n            let url = this.TEACHER_URI + '/' + teacherId + '/' + this.CERTIFICATES_URI;\n            let deferred = this.$q.defer();\n\n            this.restApi.update({ url: url, id: certificate.Id }, certificate).$promise\n                .then(\n                    function (response) {\n                        deferred.resolve(response);\n                    },\n                    function (error) {\n                        DEBUG && console.error(error);\n                        if(error.statusText == 'Unauthorized') {\n                            self.AuthService.logout();\n                        }\n                        deferred.reject(error);\n                    }\n                );\n\n            return deferred.promise;\n        }\n\n\n    }\n\n    /*-- MODULE DEFINITION --*/\n    angular\n        .module('mainApp.models.teacher', [])\n        .service(TeacherService.serviceId, TeacherService);\n\n}\n"]}