{"version":3,"sources":["app/models/school/school.service.ts"],"names":[],"mappings":"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","file":"../../../../www/app/models/school/school.service.js","sourcesContent":["/**\n * SchoolService\n * @description - Services related on School Model.\n * @constructor\n * @param {app.core.restApi.IRestApi} restApi - instance rest Api service.\n */\n\nmodule app.models.school {\n\n    'use strict';\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    export interface ISchoolService {\n        getSchoolById: (id: string) => angular.IPromise<any>;\n        getSchoolByUserId: (userId: string) => angular.IPromise<any>;\n        getAllSchools: () => angular.IPromise<any>;\n        getAllSchoolsByStatus: (status) => angular.IPromise<any>;\n        getMinorSchoolPrice: (prices: app.models.school.Price) => number;\n        schoolFeatureRatingAverage: (school: app.models.school.School) => number;\n    }\n\n    export interface ISchoolQueryObject {\n        next: string;\n        previous: string;\n        count: number;\n        results: Array<app.models.school.School>;\n    }\n\n\n    /****************************************/\n    /*           CLASS DEFINITION           */\n    /****************************************/\n    export class SchoolService implements ISchoolService {\n\n        static serviceId = 'mainApp.models.school.SchoolService';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        SCHOOL_URI: string;\n        USER_SCHOOL_URI: string;\n        STATUS_SCHOOL_URI: string;\n        // --------------------------------\n\n\n        /*-- INJECT DEPENDENCIES --*/\n        static $inject = [\n            'mainApp.core.restApi.restApiService',\n            'mainApp.core.util.FunctionsUtilService',\n            'mainApp.auth.AuthService',\n            '$q'\n        ];\n\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(\n            private restApi: app.core.restApi.IRestApi,\n            private functionsUtil: app.core.util.functionsUtil.IFunctionsUtilService,\n            private AuthService: app.auth.IAuthService,\n            private $q: angular.IQService) {\n\n            //LOG\n            DEBUG && console.log('schools service instanced');\n\n            //CONSTANTS\n            this.SCHOOL_URI = 'schools';\n            this.USER_SCHOOL_URI = 'schools?userId=';\n            this.STATUS_SCHOOL_URI = 'schools?status=';\n\n        }\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n        /**\n        * getSchoolById\n        * @description - get school by Id\n        * @use - this.SchoolService.getSchoolById('98d667ae');\n        * @function\n        * @params {string} id - user id\n        * @return {angular.IPromise<any>} promise - return school by Id\n        */\n        getSchoolById(id): angular.IPromise<any> {\n            //VARIABLES\n            let self = this;\n            let url = this.SCHOOL_URI;\n            let deferred = this.$q.defer();\n\n            this.restApi.show({url: url, id: id}).$promise\n                .then(\n                    function(response) {\n                        deferred.resolve(response);\n                    },\n                    function(error) {\n                        DEBUG && console.error(error);\n                        if(error.statusText == 'Unauthorized') {\n                            self.AuthService.logout();\n                        }\n                        deferred.reject(error);\n                    }\n                );\n\n            return deferred.promise;\n        }\n\n\n\n        /**\n        * getSchoolByUserId\n        * @description - get school by user profile id filter value\n        * @function\n        * @return {angular.IPromise<any>} return a promise with user schools associated data\n        */\n        getSchoolByUserId(userId): angular.IPromise<any> {\n            //VARIABLES\n            let self = this;\n            let url = this.USER_SCHOOL_URI + userId;\n            let deferred = this.$q.defer();\n\n            this.restApi.queryObject({url: url}).$promise\n                .then(\n                    function(response) {\n                        if(response.results) {\n                            let res = response.results[0] ? response.results[0] : '';\n                            deferred.resolve(res);\n                        } else {\n                            DEBUG && console.error(response);\n                            deferred.reject(response);\n                        }\n                    },\n                    function(error) {\n                        DEBUG && console.error(error);\n                        if(error.statusText == 'Unauthorized') {\n                            self.AuthService.logout();\n                        }\n                        deferred.reject(error);\n                    }\n                );\n\n            return deferred.promise;\n        }\n\n\n\n        /**\n        * getAllSchools\n        * @description - get all Schools\n        * @function\n        * @return {angular.IPromise<any>} return a promise with schools list\n        */\n        getAllSchools(): angular.IPromise<any> {\n            //VARIABLES\n            let self = this;\n            let url = this.SCHOOL_URI;\n            let deferred = this.$q.defer();\n\n            this.restApi.queryObject({url: url}).$promise\n                .then(\n                    function(response) {\n                        deferred.resolve(response);\n                    },\n                    function(error) {\n                        DEBUG && console.error(error);\n                        if(error.statusText == 'Unauthorized') {\n                            self.AuthService.logout();\n                        }\n                        deferred.reject(error);\n                    }\n                );\n\n            return deferred.promise;\n        }\n\n\n\n        /**\n        * getAllSchoolsByStatus\n        * @description - get all Schools by status filter value\n        * @function\n        * @return {angular.IPromise<any>} return a promise with teachers list\n        */\n        getAllSchoolsByStatus(status): angular.IPromise<any> {\n            //VARIABLES\n            let self = this;\n            let url = this.STATUS_SCHOOL_URI + status;\n            let deferred = this.$q.defer();\n\n            this.restApi.queryObject({url: url}).$promise\n                .then(\n                    function(response) {\n                        deferred.resolve(response);\n                    },\n                    function(error) {\n                        DEBUG && console.error(error);\n                        if(error.statusText == 'Unauthorized') {\n                            self.AuthService.logout();\n                        }\n                        deferred.reject(error);\n                    }\n                );\n\n            return deferred.promise;\n        }\n\n\n\n        /**\n        * getMinorSchoolPrice\n        * @description - get the minor price of school\n        * @function\n        * @return {number} return minor price value\n        */\n        getMinorSchoolPrice(prices: app.models.school.Price): number {\n            //CONSTANTS\n            const privateGeneralValue = prices.PrivateClass.GeneralType.Value;\n            const privateIntensiveValue = prices.PrivateClass.IntensiveType.Value;\n            const groupGeneralValue = prices.GroupClass.GeneralType.Value;\n            const groupIntensiveValue = prices.GroupClass.IntensiveType.Value;\n\n            // VARIABLES\n            let minorValue = 0;\n\n            if(prices.PrivateClass.Active) {\n                if(prices.PrivateClass.GeneralType.Active) {\n                    minorValue = privateGeneralValue;\n                }\n\n                if(prices.PrivateClass.IntensiveType.Active) {\n                    if(minorValue > 0) {\n                        minorValue = privateIntensiveValue < minorValue ? privateIntensiveValue : minorValue;\n                    } else {\n                        minorValue = privateIntensiveValue;\n                    }\n                }\n            }\n\n            if(prices.GroupClass.Active) {\n                if(prices.GroupClass.GeneralType.Active) {\n                    if(minorValue > 0) {\n                        minorValue = groupGeneralValue < minorValue ? groupGeneralValue : minorValue;\n                    } else {\n                        minorValue = groupGeneralValue;\n                    }\n                }\n\n                if(prices.GroupClass.IntensiveType.Active) {\n                    if(minorValue > 0){\n                        minorValue = groupIntensiveValue < minorValue ? groupIntensiveValue : minorValue;\n                    } else {\n                        minorValue = groupIntensiveValue;\n                    }\n                }\n            }\n\n\n            return minorValue;\n        }\n\n\n\n        /**\n        * schoolFeatureRatingAverage\n        * @description - Calculate school feature rating average\n        * @function\n        * @param {app.models.school.School} school - School Object\n        * @return {number} average - return school feature rating average\n        */\n        schoolFeatureRatingAverage(school: app.models.school.School): number {\n            //CONSTANTS\n            //NOTE: We added this value if the school not offer some features,\n            // in order to not affect so much to global average.\n            const middleValue = 2;\n\n            //VARIABLES\n            let atmosphere = school.Atmosphere > 0 ? school.Atmosphere : middleValue;\n            let immersion = school.Immersion.Rating > 0 ? school.Immersion.Rating : middleValue;\n            let volunteering = school.Volunteering.Rating > 0 ? school.Volunteering.Rating : middleValue;\n            let amenities = school.Amenities.Rating > 0 ? school.Amenities.Rating : middleValue;\n            let accommodation = school.Accommodation.Rating > 0 ? school.Accommodation.Rating : middleValue;\n\n            let average = 0;\n\n            let newArr = [atmosphere, immersion, volunteering, amenities, accommodation];\n\n            average = this.functionsUtil.averageNumbersArray(newArr);\n\n            return average;\n        }\n\n    }\n\n    /*-- MODULE DEFINITION --*/\n    angular\n        .module('mainApp.models.school', [])\n        .service(SchoolService.serviceId, SchoolService);\n\n}\n"]}