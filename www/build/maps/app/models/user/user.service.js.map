{"version":3,"sources":["app/models/user/user.service.ts"],"names":[],"mappings":"AAOA,IAAO,GAAG,CAkJT;AAlJD,WAAO,GAAG;IAAC,IAAA,MAAM,CAkJhB;IAlJU,WAAA,MAAM;QAAC,IAAA,IAAI,CAkJrB;QAlJiB,WAAA,MAAI,EAAC,CAAC;YAEpB,YAAY,CAAC;YAeb;gBAqBI,qBACY,OAAkC,EAClC,WAAkC;oBADlC,YAAO,GAAP,OAAO,CAA2B;oBAClC,gBAAW,GAAX,WAAW,CAAuB;oBAE1C,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;oBAE/C,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;gBAC5B,CAAC;gBAcD,wCAAkB,GAAlB,UAAmB,EAAE;oBAEjB,IAAI,IAAI,GAAG,IAAI,CAAC;oBAChB,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAExB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAC,CAAC,CAAC,QAAQ;yBAChD,IAAI,CACD,UAAU,QAAQ;wBACd,MAAM,CAAC,QAAQ,CAAC;oBACpB,CAAC,EACD,UAAU,KAAK;wBACX,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;wBAC9B,EAAE,CAAA,CAAC,KAAK,CAAC,UAAU,IAAI,cAAc,CAAC,CAAC,CAAC;4BACpC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;wBAC9B,CAAC;wBACD,MAAM,CAAC,KAAK,CAAC;oBACjB,CAAC,CACJ,CAAC;gBACV,CAAC;gBAWD,wCAAkB,GAAlB;oBAEI,IAAI,IAAI,GAAG,IAAI,CAAC;oBAChB,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAExB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAC,GAAG,EAAE,GAAG,EAAC,CAAC,CAAC,QAAQ;yBACzC,IAAI,CACD,UAAS,IAAI;wBACT,MAAM,CAAC,IAAI,CAAC;oBAChB,CAAC,CACJ,CAAC,KAAK,CACH,UAAS,KAAK;wBACV,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;wBAC5B,EAAE,CAAA,CAAC,KAAK,CAAC,UAAU,IAAI,cAAc,CAAC,CAAC,CAAC;4BACpC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;wBAC9B,CAAC;wBACD,MAAM,CAAC,KAAK,CAAC;oBACjB,CAAC,CACJ,CAAC;gBACV,CAAC;gBAYD,uCAAiB,GAAjB,UAAkB,OAAO;oBAErB,IAAI,IAAI,GAAG,IAAI,CAAC;oBAChB,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAExB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,CAAC,MAAM,EAAE,EAAE,OAAO,CAAC,CAAC,QAAQ;yBACzE,IAAI,CACD,UAAU,QAAQ;wBACd,MAAM,CAAC,QAAQ,CAAC;oBACpB,CAAC,EACD,UAAU,KAAK;wBACX,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;wBAC9B,EAAE,CAAA,CAAC,KAAK,CAAC,UAAU,IAAI,cAAc,CAAC,CAAC,CAAC;4BACpC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;wBAC9B,CAAC;wBACD,MAAM,CAAC,KAAK,CAAC;oBACjB,CAAC,CACJ,CAAC;gBACV,CAAC;gBAtHM,qBAAS,GAAG,iCAAiC,CAAC;gBAU9C,mBAAO,GAAG;oBACb,qCAAqC;oBACrC,0BAA0B;iBAC7B,CAAC;gBA2GN,kBAAC;YAAD,CA1HA,AA0HC,IAAA;YA1HY,kBAAW,cA0HvB,CAAA;YAGD,OAAO;iBACF,MAAM,CAAC,qBAAqB,EAAE,EAAE,CAAC;iBACjC,OAAO,CAAC,WAAW,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QAErD,CAAC,EAlJiB,IAAI,GAAJ,WAAI,KAAJ,WAAI,QAkJrB;IAAD,CAAC,EAlJU,MAAM,GAAN,UAAM,KAAN,UAAM,QAkJhB;AAAD,CAAC,EAlJM,GAAG,KAAH,GAAG,QAkJT","file":"../../../../www/app/models/user/user.service.js","sourcesContent":["/**\n * UserService\n * @description - Services related on User Model.\n * @constructor\n * @param {app.core.restApi.IRestApi} restApi - instance rest Api service.\n */\n\nmodule app.models.user {\n\n    'use strict';\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    export interface IUserService {\n        getUserProfileById: (id: string) => angular.IPromise<any>;\n        getAllUsersProfile: () => angular.IPromise<any>;\n        updateUserProfile: (user: app.models.user.Profile) => angular.IPromise<any>;\n    }\n\n\n    /****************************************/\n    /*           CLASS DEFINITION           */\n    /****************************************/\n    export class UserService implements IUserService {\n\n        static serviceId = 'mainApp.models.user.UserService';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        USER_URI: string;\n        // --------------------------------\n\n\n        /*-- INJECT DEPENDENCIES --*/\n        static $inject = [\n            'mainApp.core.restApi.restApiService',\n            'mainApp.auth.AuthService'\n        ];\n\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(\n            private restApi: app.core.restApi.IRestApi,\n            private AuthService: app.auth.IAuthService) {\n            //LOG\n            DEBUG && console.log('user service instanced');\n            //CONSTANTS\n            this.USER_URI = 'users';\n        }\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n        /**\n        * getUserProfileById\n        * @description - get user by Id\n        * @use - this.UserService.getUserProfileById('98d667ae');\n        * @function\n        * @params {string} id - user id\n        * @return {angular.IPromise<any>} promise - return user profile by Id\n        */\n        getUserProfileById(id): angular.IPromise<any> {\n            //VARIABLES\n            let self = this;\n            let url = this.USER_URI;\n\n            return this.restApi.show({url: url, id: id}).$promise\n                .then(\n                    function (response) {\n                        return response;\n                    },\n                    function (error) {\n                        DEBUG && console.error(error);\n                        if(error.statusText == 'Unauthorized') {\n                            self.AuthService.logout();\n                        }\n                        return error;\n                    }\n                );\n        }\n\n\n\n        /**\n        * getAllUsersProfile\n        * @description - get all Users Profiles\n        * @function\n        * @return {angular.IPromise<any>} return a promise with\n        * users list\n        */\n        getAllUsersProfile(): angular.IPromise<any> {\n            //VARIABLES\n            let self = this;\n            let url = this.USER_URI;\n\n            return this.restApi.query({url: url}).$promise\n                .then(\n                    function(data) {\n                        return data;\n                    }\n                ).catch(\n                    function(error) {\n                        DEBUG && console.log(error);\n                        if(error.statusText == 'Unauthorized') {\n                            self.AuthService.logout();\n                        }\n                        return error;\n                    }\n                );\n        }\n\n\n\n        /**\n        * updateUserProfile\n        * @description - update User information entity on DB\n        * @function\n        * @params {app.models.user.Profile} user - user profile Object\n        * @return {promise} promise - Return a promise of \"Updated User Profile\".\n        * @return {object} response - Returns response about If request was success or error.\n        */\n        updateUserProfile(profile): ng.IPromise<any> {\n            //VARIABLES\n            let self = this;\n            let url = this.USER_URI;\n\n            return this.restApi.update({ url: url, id: profile.userId }, profile).$promise\n                .then(\n                    function (response) {\n                        return response;\n                    },\n                    function (error) {\n                        DEBUG && console.error(error);\n                        if(error.statusText == 'Unauthorized') {\n                            self.AuthService.logout();\n                        }\n                        return error;\n                    }\n                );\n        }\n\n    }\n\n    /*-- MODULE DEFINITION --*/\n    angular\n        .module('mainApp.models.user', [])\n        .service(UserService.serviceId, UserService);\n\n}\n"]}