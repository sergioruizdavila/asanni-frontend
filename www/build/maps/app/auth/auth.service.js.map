{"version":3,"sources":["app/auth/auth.service.ts"],"names":[],"mappings":"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","file":"../../../www/app/auth/auth.service.js","sourcesContent":["/**\n * AuthService\n * @description - AuthService uses `angular-oauth2` module to provide\n * authentication functionality, as well as automatic refresh of access tokens.\n * @function\n */\n\nmodule app.auth {\n\n    'use strict';\n\n    /**********************************/\n    /*           INTERFACES           */\n    /**********************************/\n    export interface IAuthService {\n        isAuthenticated:() => boolean;\n        login:(user: app.core.interfaces.IUserDataAuth) => angular.IPromise<any>;\n        logout:() => angular.IPromise<any>;\n        resetPassword:(email: string) => angular.IPromise<any>;\n        confirmResetPassword: (uid: string,\n                               token: string,\n                               newPassword1: string,\n                               newPassword2: string) => angular.IPromise<any>\n    }\n\n\n    /****************************************/\n    /*           CLASS DEFINITION           */\n    /****************************************/\n    export class AuthService implements IAuthService {\n\n        static serviceId = 'mainApp.auth.AuthService';\n\n        /**********************************/\n        /*           PROPERTIES           */\n        /**********************************/\n        AUTH_RESET_PASSWORD_URI: string;\n        AUTH_CONFIRM_RESET_PASSWORD_URI: string;\n        autoRefreshTokenInterval: number;\n        refreshNeeded: boolean;\n        // --------------------------------\n\n        /*-- INJECT DEPENDENCIES --*/\n        static $inject = ['$q',\n                          '$timeout',\n                          '$cookies',\n                          'OAuth',\n                          'mainApp.core.restApi.restApiService',\n                          'dataConfig',\n                          'mainApp.localStorageService'];\n\n        /**********************************/\n        /*           CONSTRUCTOR          */\n        /**********************************/\n        constructor(private $q: angular.IQService,\n                    private $timeout: angular.ITimeoutService,\n                    private $cookies: angular.cookies.ICookiesService,\n                    private OAuth: angular.oauth2.IOAuth,\n                    private restApi: app.core.restApi.IRestApi,\n                    private dataConfig: IDataConfig,\n                    private localStorage) {\n            //LOG\n            DEBUG && console.log('auth service called');\n\n            //CONSTANTS\n            this.AUTH_RESET_PASSWORD_URI = 'rest-auth/password/reset/';\n            this.AUTH_CONFIRM_RESET_PASSWORD_URI = 'rest-auth/password/reset/confirm/';\n\n            this.autoRefreshTokenInterval = dataConfig.autoRefreshTokenIntervalSeconds * 1000;\n            this.refreshNeeded = true;\n        }\n\n        /**********************************/\n        /*            METHODS             */\n        /**********************************/\n\n\n        /**\n         * isAuthenticated\n         * @description - Verifies if user is authenticated or not based\n         * on the `token` cookie.\n         * @use - this.AuthService.isAuthenticated();\n         * @function\n         * @return {boolean} boolean - User is authenticated or not\n         */\n\n        isAuthenticated(): boolean {\n            return this.OAuth.isAuthenticated();\n        }\n\n\n\n        /**\n         * forceLogout\n         * @description - If logout cannot be performed (if server is down,\n         * for example), force logout by removing the `token` cookie.\n         * @use - this.AuthService.isAuthenticated();\n         * @function\n         * @return {void}\n         */\n\n        forceLogout(): void {\n          DEBUG && console.log(\"Forcing logout\");\n          this.$cookies.remove(this.dataConfig.cookieName);\n          //Clean localStorage Values\n          this.localStorage.removeItem(this.dataConfig.userDataLocalStorage);\n          this.localStorage.removeItem(this.dataConfig.teacherDataLocalStorage);\n          window.location.reload();\n        }\n\n\n\n        /**\n         * resetPassword\n         * @description - reset password given a email value\n         * @use - this.AuthService.resetPassword('sergio@gmail.com');\n         * @function\n         * @return {angular.IPromise<any>} promise - return http request with\n         * Status Code 200 OK\n        */\n\n        resetPassword(email): angular.IPromise<any> {\n            //VARIABLES\n            let url = this.AUTH_RESET_PASSWORD_URI;\n            let deferred = this.$q.defer();\n            let data = {\n                email: email\n            };\n\n            this.restApi.create({url: url}, data).$promise\n                .then(\n                    function(response) {\n                        deferred.resolve(response);\n                    },\n\n                    function(error) {\n                        DEBUG && console.error(error);\n                        deferred.reject(error);\n                    }\n                );\n\n            return deferred.promise;\n        }\n\n\n\n        /**\n         * confirmResetPassword\n         * @description - send confirmation to reset password given a new password\n         * @use - this.AuthService.confirmResetPassword({\n                    uid: 'MQ',\n                    token: '4jf-2632ecc2e516fc2686bc',\n                    new_password1: 'test2017',\n                    new_password2: 'test2017'\n                  });\n         * @function\n         * @return {angular.IPromise<any>} promise - return http request with\n         * Status Code 200 OK\n        */\n\n        confirmResetPassword(uid, token, newPassword1, newPassword2): angular.IPromise<any> {\n            //VARIABLES\n            let url = this.AUTH_CONFIRM_RESET_PASSWORD_URI;\n            let deferred = this.$q.defer();\n            let data = {\n                uid: uid,\n                token: token,\n                new_password1: newPassword1,\n                new_password2: newPassword2\n            };\n\n            this.restApi.create({url: url}, data).$promise\n                .then(\n                    function(response) {\n                        DEBUG && console.error(response);\n                        deferred.resolve(response.detail);\n                    },\n\n                    function(error) {\n                        DEBUG && console.error(error);\n                        deferred.reject(error);\n                    }\n                );\n\n            return deferred.promise;\n        }\n\n\n\n        /**\n         * login\n         * @description - Tries to login a user by obtaining access and\n         * refresh tokens and stores them in a cookie.\n         * @use - this.AuthService.login(user);\n         * @function\n         * @param  {app.core.IUserDataAuth} user - Object with 'username'\n         * and 'password' properties.\n         * @return {angular.IPromise<any>} promise - return http response with\n         * access token information (access_token, expire_in, refresh_token)\n         */\n\n        login(user): angular.IPromise<any> {\n            //VARIABLES\n            let self = this;\n            let deferred = this.$q.defer();\n\n            //NOTE This method can't change to $promise structure, keep this structure\n            this.OAuth.getAccessToken(user, {}).then(\n                function(response) {\n                    DEBUG && console.info(\"Logged in successfuly!\");\n                    deferred.resolve(response);\n                },\n                function(error) {\n                    DEBUG && console.error(\"Error while logging in!\");\n                    deferred.reject(error);\n                }\n            );\n\n            return deferred.promise;\n        }\n\n\n\n        /**\n         * logout\n         * @description - Revokes the 'token' and removes the stored 'token'\n         * from cookies.\n         * @use - this.AuthService.logout();\n         * @function\n         * @return {angular.IPromise<any>} promise - return http request with\n         * Status Code 200 OK\n        */\n\n        logout(): angular.IPromise<any> {\n            //VARIABLES\n            let self = this;\n            let deferred = this.$q.defer();\n\n            //NOTE This method can't change to $promise structure, keep this structure\n            this.OAuth.revokeToken().then(\n                function(response) {\n                    DEBUG && console.info(\"Logged out successfuly!\");\n                    //Clean localStorage Values\n                    self.localStorage.removeItem(self.dataConfig.userDataLocalStorage);\n                    self.localStorage.removeItem(self.dataConfig.teacherDataLocalStorage);\n                    window.location.reload();\n                    deferred.resolve(response);\n                },\n                function(response) {\n                    DEBUG && console.error(\"Error while logging you out!\");\n                    // Force logout\n                    self.forceLogout();\n                    deferred.reject(response);\n                }\n            );\n\n            return deferred.promise;\n        }\n\n\n\n        /**\n         * refreshToken\n         * @description - Gets a new access token. Should not be called directly,\n         * as autoRefreshToken() is used to manage it.\n         * @use - this.AuthService.autoRefreshToken();\n         * @function\n         * @return {angular.IPromise<any>} promise - return http request with\n         * Status Code 200 OK\n         */\n\n        refreshToken(): angular.IPromise<any> {\n            //VARIABLES\n            let self = this;\n            let deferred = this.$q.defer();\n\n            if (!this.isAuthenticated()) {\n                DEBUG && console.error('Cannot refresh token if Unauthenticated');\n                deferred.reject();\n                return deferred.promise;\n            }\n\n            //NOTE This method can't change to $promise structure, keep this structure\n            this.OAuth.getRefreshToken().then(\n                function(response) {\n                    // Success\n                    DEBUG && console.info(\"Access token refreshed\");\n                    deferred.resolve(response);\n                },\n                function(response) {\n                    DEBUG && console.error(\"Error refreshing token \");\n                    DEBUG && console.error(response);\n                    deferred.reject(response);\n                }\n            );\n\n            return deferred.promise;\n        }\n\n\n\n        /**\n         * autoRefreshToken\n         * @description - A function to automatically refresh the access token as needed.\n         * It is called before a route change which requires authentication\n         * using ngRoute's resolve property and stalls the initialization\n         * of the view until the promise is resolved.\n         *\n         * Additionally, once called it recursively calls itself every\n         * 'autoRefreshTokenInterval' milliseconds to handle situations\n         * where an access token might expire and cause a 401, while\n         * the route doesn't change.\n         * @use - this.autoRefreshToken();\n         * @function\n         * @return {angular.IPromise<any>} promise\n         */\n\n        autoRefreshToken(): any {\n            //VARIABLES\n            let self = this;\n            var deferred = this.$q.defer();\n\n            // If we don't have to refresh the access token, simply resolve the promise\n            if (!this.refreshNeeded) {\n                deferred.resolve();\n                return deferred.promise;\n            }\n\n            //NOTE This method can't change to $promise structure, keep this structure\n            this.refreshToken().then(\n                function(response) {\n                    self.refreshNeeded = false;\n                    deferred.resolve(response);\n                },\n                function(response) {\n                    deferred.reject(response);\n                }\n            );\n\n            this.$timeout(function() {\n                /* Since autoRefreshTokenInterval milliseconds have passed\n                   since we refreshed the access token, we need to refresh\n                   it again. */\n                if (self.isAuthenticated()) {\n                    self.refreshNeeded = true;\n                    self.autoRefreshToken();\n                }\n            }, self.autoRefreshTokenInterval);\n\n            return deferred.promise;\n        }\n\n\n    }\n\n    /*-- MODULE DEFINITION --*/\n    angular\n    .module('mainApp.auth', [])\n    .service(AuthService.serviceId, AuthService);\n\n}\n"]}