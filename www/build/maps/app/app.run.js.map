{"version":3,"sources":["app/app.run.ts"],"names":[],"mappings":"AAOA,CAAC;IAEG,YAAY,CAAC;IAEb,OAAO;SACF,MAAM,CAAC,SAAS,CAAC;SACjB,GAAG,CAAC,GAAG,CAAC,CAAC;IAEd,GAAG,CAAC,OAAO,GAAG;QACF,YAAY;QACZ,QAAQ;QACR,YAAY;QACZ,0BAA0B;QAC1B,iCAAiC;QACjC,6BAA6B;KAChC,CAAC;IAEV,aAAa,UAAiD,EACjD,MAA2B,EAC3B,UAAuB,EACvB,WAAkC,EAClC,WAAyC,EACzC,YAAY;QAGrB,IAAI,cAAc,GAAG,UAAU,CAAC,MAAM,CAAC;QACvC,IAAI,gBAAgB,GAAG,UAAU,CAAC,gBAAgB,CAAC;QACnD,IAAI,gBAAgB,GAAG,UAAU,CAAC,gBAAgB,CAAC;QAGnD,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACpE,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACpC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,QAAQ,CAAC,IAAI,CAAC,gBAAgB,EAAE;gBAC5B,MAAM,EAAE,UAAS,QAAQ;oBACrB,IAAI,WAAW,GAAG,QAAQ,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;oBACvD,IAAI,YAAY,GAAG,MAAM,EAAE,CAAC,MAAM,CAAC,yBAAyB,CAAC,CAAC;oBAC9D,EAAE,CAAA,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC,CAAC;wBACrB,QAAQ,CAAC,aAAa,CAAC,EAAE,aAAa,EAAE,YAAY,EAAE,CAAC,CAAC;wBACxD,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;oBAC5B,CAAC;gBACL,CAAC;aACJ,CAAC,CAAC;QACP,CAAC;QAGD,EAAE,CAAC,CAAC,WAAW,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;YAEhC,IAAI,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAExF,EAAE,CAAA,CAAC,eAAe,CAAC,CAAC,CAAC;gBACjB,UAAU,CAAC,QAAQ,GAAG,eAAe,CAAC;gBAEtC,WAAW,CAAC,kBAAkB,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,IAAI,CACvD,UAAS,QAAQ;oBACb,EAAE,CAAA,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;wBACjB,UAAU,CAAC,WAAW,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;oBACnE,CAAC;gBACL,CAAC,CACJ,CAAC;YACN,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,KAAK,CAAC,cAAc,CAAC,kDAAkD,CAAC,CAAC;gBACzE,WAAW,CAAC,MAAM,EAAE,CAAC;YACzB,CAAC;QAEL,CAAC;QAGD,UAAU,CAAC,GAAG,CAAC,mBAAmB,EAAE,UAAS,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,UAAU;YAExF,EAAE,CAAA,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;gBAG7D,KAAK,CAAC,cAAc,EAAE,CAAC;gBACvB,MAAM,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC;YAClC,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;AAEL,CAAC,CAAC,EAAE,CAAC;AAKL,CAAC,UAAU,OAAO;IAEhB,oCAAoC,OAAO;QACzC,EAAE,CAAA,CAAC,OAAO,CAAC,YAAY,CAAC,CAAA,CAAC;YACvB,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC;QAC9B,CAAC;QACD,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;IACrD,CAAC;IAGD,0BAA0B,CAAC,OAAO,GAAG,CAAC,SAAS,CAAC,CAAC;IAGjD,OAAO;SACJ,MAAM,CAAC,sBAAsB,EAAE,EAAE,CAAC;SAClC,OAAO,CAAC,6BAA6B,EAAE,0BAA0B,CAAC,CAAC;AAExE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC","file":"../../www/app/app.run.js","sourcesContent":["/**\n * run() run low-level functionality\n * such as authorization, get user info, roles, etc.\n *\n * @return {void}\n */\n\n(function (): void {\n\n    'use strict';\n\n    angular\n        .module('mainApp')\n        .run(run);\n\n    run.$inject = [\n                '$rootScope',\n                '$state',\n                'dataConfig',\n                'mainApp.auth.AuthService',\n                'mainApp.models.user.UserService',\n                'mainApp.localStorageService'\n            ];\n\n    function run($rootScope: app.core.interfaces.IMainAppRootScope,\n                 $state: ng.ui.IStateService,\n                 dataConfig: IDataConfig,\n                 AuthService: app.auth.IAuthService,\n                 userService: app.models.user.IUserService,\n                 localStorage): void {\n\n        //VARIABLES\n        let productionHost = dataConfig.domain;\n        let mixpanelTokenDEV = dataConfig.mixpanelTokenDEV;\n        let mixpanelTokenPRD = dataConfig.mixpanelTokenPRD;\n\n        //Change MixPanel Environment dynamically\n        if (window.location.hostname.toLowerCase().search(productionHost) < 0) {\n            mixpanel.init(mixpanelTokenDEV);\n        } else {\n            mixpanel.init(mixpanelTokenPRD, {\n                loaded: function(mixpanel) {\n                    let first_visit = mixpanel.get_property(\"First visit\");\n                    let current_date = moment().format('MMMM Do YYYY, h:mm:ss a');\n                    if(first_visit == null) {\n                        mixpanel.register_once({ \"First visit\": current_date });\n                        mixpanel.track(\"Visit\");\n                    }\n                }\n            });\n        }\n\n        //Get current authenticated user data from localStorage\n        if (AuthService.isAuthenticated()) {\n            //VARIABLES\n            let userAccountInfo = JSON.parse(localStorage.getItem(dataConfig.userDataLocalStorage));\n\n            if(userAccountInfo) {\n                $rootScope.userData = userAccountInfo;\n                //Get user profile data and save in $rootScope\n                userService.getUserProfileById($rootScope.userData.id).then(\n                    function(response) {\n                        if(response.userId) {\n                            $rootScope.profileData = new app.models.user.Profile(response);\n                        }\n                    }\n                );\n            } else {\n                Raven.captureMessage('Error app.run.js method: userAccountInfo is null');\n                AuthService.logout();\n            }\n\n        }\n\n        //Validate each state if require login\n        $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams) {\n\n            if(toState.data.requireLogin && !AuthService.isAuthenticated()) {\n                /* Unauthenticated request to a route requiring auth is\n                   redirected to main page (page.landingPage) */\n                event.preventDefault();\n                $state.go('page.landingPage');\n            }\n        });\n    }\n\n})();\n\n\n/* localStorage Service */\n\n(function (angular) {\n\n  function localStorageServiceFactory($window) {\n    if($window.localStorage){\n      return $window.localStorage;\n    }\n    throw new Error('Local storage support is needed');\n  }\n\n  // Inject dependencies\n  localStorageServiceFactory.$inject = ['$window'];\n\n  // Export\n  angular\n    .module('mainApp.localStorage', [])\n    .factory('mainApp.localStorageService', localStorageServiceFactory);\n\n})(angular);\n"]}